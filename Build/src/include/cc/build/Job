/*
 * Copyright (C) 2021-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/String>

namespace cc::build {

/** \class Job cc/build/Job
  * \brief A single build command
  */
class Job: public Object
{
public:
    Job() = default;

    explicit Job(const String &command);
    explicit Job(const List<String> &args);

    String command() const;

    int status() const;
    String outputText() const;

    void registerDerivative(Job &job);
    bool getNextDerivative(Out<Job> derivative);

    int countDown() const;

    bool run();

    void wait();
    void notify();

    bool reported() const;
    void setReported(bool on);

protected:
    struct State;

    explicit Job(State *newState);

    const State &me() const;
    State &me();
};

} // namespace cc::build
