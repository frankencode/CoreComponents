/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/build/Job>
#include <cc/Process>
#include <cc/Command>
#include <cc/Queue>
#include <cc/stdio>

namespace cc::build {

struct Job::State: public Object::State
{
    explicit State(const String &command):
        command_{command}
    {}

    explicit State(const List<String> &args):
        command_{args.join(' ')},
        args_{args}
    {}

    virtual bool run()
    {
        try {
            Process process;
            if (args_.count() > 0) {
                process = Process{Command{}.args(args_)};
            }
            else {
                process = Process{command_};
            }
            outputText_ = process.output().readAll();
            status_ = process.wait();
        }
        catch (Exception &ex) {
            ferr() << ex << nl;
            status_ = -1;
        }

        return status_ == 0;
    }

    String command_;
    List<String> args_;

    int status_ { -1 };
    String outputText_;

    int countDown_ { 0 };

    Queue<Job> derivatives_;
};

} // namespace cc::build
