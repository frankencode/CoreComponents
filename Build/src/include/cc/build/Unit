/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/build/Module>
#include <cc/Object>
#include <cc/String>

namespace cc::build {

class Unit final: public Object
{
public:
    Unit() = default;

    explicit Unit(const String &compileCommand, const String &objectFilePath, const List<String> &dependencyPaths, bool dirty):
        Object{new State{compileCommand, objectFilePath, dependencyPaths, dirty}}
    {}

    String compileCommand() const { return me().compileCommand_; }
    String objectFilePath() const { return me().objectFilePath_; }
    String sourcePath() const { return me().dependencyPaths_.at(0); }

    List<String> dependencyPaths() const { return me().dependencyPaths_; }
    bool dirty() const { return me().dirty_; }

    const Module &module() const { return me().module_; }
    Module &module() { return me().module_; }

private:
    struct State final: public Object::State
    {
        State(const String &compileCommand, const String &objectFilePath, const List<String> &dependencyPaths, bool dirty):
            compileCommand_{compileCommand},
            objectFilePath_{objectFilePath},
            dependencyPaths_{dependencyPaths},
            dirty_{dirty}
        {}

        String compileCommand_;
        String objectFilePath_;
        List<String> dependencyPaths_;
        bool dirty_;
        Module module_;
    };

    const State &me() const { return Object::me.as<State>(); }
    State &me() { return Object::me.as<State>(); }
};

} // namespace cc::build
