/*
 * Copyright (C) 2021-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/build/Job>

namespace cc::build {

/** \class Unit cc/build/Unit
  * \brief A C/C++ translation unit
  */
class Unit final: public Object
{
public:
    enum class Type {
        Regular,
        Module,
        SystemModule
    };

    Unit() = default;

    Unit(Type type, const String &source, const String &target = "", bool dirty = false):
        Object{new State{type, source, target, dirty}}
    {}

    Type type() const { return me().type_; }
    String source() const { return me().source_; }
    String target() const { return me().target_; }
    bool dirty() const { return me().dirty_; }

private:
    friend class CompileLinkStage;
    friend class ImportManager;

    struct State final: public Object::State
    {
        State(Type type, const String &source, const String &target, bool dirty):
            type_{type},
            source_{source},
            target_{target},
            dirty_{dirty}
        {}

        Type type_;
        String source_;
        String target_;
        bool dirty_;
        Job job_;
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }

    State *operator->() { return &Object::me.as<State>(); }
    const State *operator->() const { return &Object::me.as<State>(); }
};

} // namespace cc::build
