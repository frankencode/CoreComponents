/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <pulse/introspect.h>
#include <cc/String>
#include <cc/Object>

namespace cc {

/** \class PulseServerInfo cc/PulseServerInfo
  * \ingroup pulse_audio
  * \brief %Pulse %Audio server information
  */
class PulseServerInfo final: public Object
{
public:
    explicit PulseServerInfo(const pa_server_info *info):
        Object{new State{info}}
    {}

    String serverName() const { return me().serverName_; }
    String serverVersion() const { return me().serverVersion_; }
    String defaultSinkName() const { return me().defaultSinkName_; }
    String defaultSourceName() const { return me().defaultSourceName_; }

private:
    struct State final: public Object::State
    {
        State(const pa_server_info *info):
            serverName_{info->server_name},
            serverVersion_{info->server_version},
            defaultSinkName_{info->default_sink_name},
            defaultSourceName_{info->default_source_name}
        {}

        String serverName_;
        String serverVersion_;
        String defaultSinkName_;
        String defaultSourceName_;
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
