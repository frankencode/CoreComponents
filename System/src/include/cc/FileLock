/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/File>
#include <cc/Guard>

namespace cc {

/** \class FileLock cc/FileLock
  * \ingroup ipc
  * \brief Advisory file lock
  * \see Guard
  * \exception SystemError
  */
class FileLock
{
public:
    /** Create an advisory file lock for a file area
      * \param file %File to lock
      * \param type Type of lock
      * \param start Start offset of the file area
      * \param length Length of the file area
      * \param whence Interpretation of \a start offset
      */
    FileLock(const File &file, FileContention type, long long start = 0, long long length = 0, Seek whence = Seek::Begin);

    /** Create an advisory file lock for a file area
      * \param file %File to lock
      * \param type Type of lock
      * \param start Start offset of the file area
      * \param whence Interpretation of \a start offset
      */
    FileLock(const File &file, FileContention type, long long start, Seek whence = Seek::Begin):
        FileLock{file, type, start, 0, whence}
    {}

    /** Try to acquire the file lock
      * \return True if lock could be successfully acquired
      */
    bool tryAcquire();

    /** Wait and acquire lock
      */
    void acquire();

    /** Release lock
      */
    void release();

private:
    File file_;
    struct flock lock_;
};

/** \class ReadLock cc/FileLock
  * \brief Advisory file lock for shared access
  */
class ReadLock: public FileLock
{
public:
    /** Create a shared file lock for a file area
      * \param file %File to lock
      * \param start Start offset of the file area
      * \param length Length of the file area
      * \param whence Interpretation of \a start offset
      */
    explicit ReadLock(const File &file, long long start = 0, long long length = 0, Seek whence = Seek::Begin):
        FileLock{file, FileContention::Shared, start, length, whence}
    {}

    /** Create a shared file lock for a file area
      * \param file %File to lock
      * \param start Start offset of the file area
      * \param whence Interpretation of \a start offset
      */
    explicit ReadLock(const File &file, long long start = 0, Seek whence = Seek::Begin):
        FileLock{file, FileContention::Shared, start, 0, whence}
    {}
};

/** \class WriteLock cc/FileLock
  * \brief Advisory file lock for exclusive access
  */
class WriteLock: public FileLock
{
public:
    /** Create an exclusive file lock for a file area
      * \param file %File to lock
      * \param start Start offset of the file area
      * \param length Length of the file area
      * \param whence Interpretation of \a start offset
      */
    explicit WriteLock(const File &file, long long start = 0, long long length = 0, Seek whence = Seek::Begin):
        FileLock{file, FileContention::Exclusive, start, length, whence}
    {}

    /** Create an exclusive file lock for a file area
      * \param file %File to lock
      * \param start Start offset of the file area
      * \param whence Interpretation of \a start offset
      */
    explicit WriteLock(const File &file, long long start = 0, Seek whence = Seek::Begin):
        FileLock{file, FileContention::Exclusive, start, 0, whence}
    {}
};

} // namespace cc
