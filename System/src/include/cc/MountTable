/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/String>

namespace cc {

/** \class MountPoint cc/MountTable
  * \ingroup sysinfo
  * \brief Mount table entry
  */
class MountPoint
{
public:
    /** Storage device path
      */
    String source() const { return parts_.at(0); }

    /** Mounted filesystem root path
      */
    String target() const { return parts_.at(1); }

    /** Comma-separated filesystem types
      */
    String type() const { return parts_.at(2); }

    /** Comma-separated mount options in "key=value" format
      */
    String options() const { return parts_.at(3); }

    /** Stringify
      */
    String toString() const { return parts_; }

private:
    friend class MountTable;

    MountPoint(const String &line);

    List<String> parts_;
};

inline String str(const MountPoint &entry) { return entry.toString(); }

/** \class MountTable cc/MountTable
  * \ingroup sysinfo
  * \brief Filesystem mount table (fstab format)
  */
class MountTable: public List<MountPoint>
{
public:
    /** Parse an in-memory mount table
      * \param text Mount table in text format
      * \return Parsed mount table
      */
    static MountTable read(const String &text);

    /** Load mount table from file
      * \param path File path
      */
    explicit MountTable(const String &path);

    /** Stringify this mount table
      */
    String toString() const;

private:
    static String loadText(const String &path);

    MountTable() = default;
    void readLines(const String &text);
};

/** Stringify mount table \a table
  */
inline String str(const MountTable &table) { return table.toString(); }

} // namespace cc
