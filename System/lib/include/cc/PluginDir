/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Plugin>
#include <cc/MultiMap>

namespace cc {

/** \class PluginDir cc/PluginDir
  * \ingroup plugins
  * \brief %Plugin directory
  */
class PluginDir final: public Object
{
public:
    /** Load plugins from directory \a path
      */
    explicit PluginDir(const String &path);

    /** %Plugin directory path
      */
    String path() const { return me().path_; }

    /** %List of all loaded plugins
      */
    MultiMap<String, Plugin> loadedPlugins() const { return me().loadedPlugins_; }

    /** %List of all plugin directories
      */
    static List<PluginDir> pluginDirs() { return getPluginDirs(); }

protected:
    virtual void onLoaded(Plugin &plugin) {}
    virtual void onError(const String &pluginPath, const String &errorMessage);

private:
    static List<PluginDir> &getPluginDirs()
    {
        static List<PluginDir> pluginDirs;
        return pluginDirs;
    }

    struct State: public Object::State
    {
        State(const String &path): path_{path} {}
        String path_;
        MultiMap<String, Plugin> loadedPlugins_;
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
