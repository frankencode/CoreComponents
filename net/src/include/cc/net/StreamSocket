/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/SystemStream>
#include <cc/net/SocketAddress>

namespace cc {
namespace net {

/** \class StreamSocket cc/net/StreamSocket
  * \brief Connection oriented byte-sequential communication channel
  */
class StreamSocket: public SystemStream
{
public:
    class Instance: public SystemStream::Instance
    {
    public:
        /** Establish a local socket connection
          * \param other the other socket stream to connect to
          */
        void connect(StreamSocket &other);

        /** Initiate connection to a peer socket
          * \param peerAddress address of peer socket
          * \see waitForReady()
          */
        void connect(const SocketAddress &peerAddress);

        /** Initiate connection to a peer socket
          * \param hostName host name of server
          * \param port port number
          * \exception HostNameResolutionError
          * \see waitForReady()
          */
        void connect(const String &hostName, int port);

        /** Open address for incoming connection requests
          * \param localAddress local address to bind to
          * \param backlog number of connections to queue when the process is busy
          */
        void listen(const SocketAddress &localAddress, int backlog = 1024);

        /** Accept an incoming connection request
          * \return connected socket
          */
        StreamSocket accept();

        /** Wait until the connection has been fully established
          * \param interval the interval to wait at max in milliseconds (or infinite if interval < 0)
          * \return true if the connection has been established before timeout, false otherwise
          * \exception NetworkError
          */
        bool waitForReady(int timeout = -1);

        /** The local address if this is a listening sockets, the peer address otherwise
          */
        SocketAddress address() const;

        /** %Set the timeout of accumulating incoming data
          * \param interval timeout in seconds
          */
        void setRecvTimeout(double interval);

        /** %Set the timeout of accumulating outgoing data
          * \param interval timeout in seconds
          */
        void setSendTimeout(double interval);

        /// \todo FIXME, should be protected
        void accept(StreamSocket::Instance *client);

    protected:
        friend class StreamSocket;

        Instance(int fd = -1);
        Instance(const SocketAddress &address);

        SocketAddress address_;
        bool connected_ { false };
    };

    /** Create an undefined stream socket
      */
    StreamSocket():
        SystemStream{new Instance}
    {}

    StreamSocket(IoTarget *target):
        SystemStream{instanceFromIoTarget(target)}
    {}

    Instance *operator->() const { return my<Instance>(); }

    operator Instance *() { return my<Instance>(); }

    bool operator==(const StreamSocket &other) const
    {
        return (*this)->fd_ == other->fd_;
    }

private:
    friend class Instance;

    static StreamSocket::Instance *instanceFromIoTarget(IoTarget *target)
    {
        auto instance = dynamic_cast<StreamSocket::Instance *>(target);
        return instance ? instance : new Instance;
    }

    StreamSocket(const SocketAddress &address):
        SystemStream{new Instance{address}}
    {}
};

}} // namespace cc::net
