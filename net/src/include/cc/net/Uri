/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/exceptions>
#include <cc/string>
#include <cc/Map>
#include <cc/net/types>

namespace cc { class Token; }

namespace cc {
namespace net {

/** \class Uri cc/net/Uri
  * \brief Uniform Resource Indentifier
  */
class Uri
{
public:
    class Instance: public Object {
    public:
        /// URI scheme (e.g. http, file)
        string scheme() const { return scheme_; }

        /// %Set the URI scheme
        void setScheme(const string &value) { scheme_ = value; }

        /// User and password information (e.g. "oscar:123456")
        string userInfo() const { return userInfo_; }

        /// %Set the user information
        void setUserInfo(const string &value) { userInfo_ = value; }

        /// Registered host name or numeric address (IPv4 or IPv6)
        string host() const { return host_; }

        /// %Set the host name
        void setHost(const string &value) { host_ = value; }

        /// Tell if the host name is a numeric address
        bool hostIsNumeric() const { return hostIsNumeric_; }

        /// Protocol family of the numeric address
        ProtocolFamily family() const {
            if (!hostIsNumeric_) return ProtocolFamily::Unspecified;
            return host_->contains(':') ? ProtocolFamily::Internet6 : ProtocolFamily::Internet4;
        }

        /// Service port
        int port() const { return port_; }

        /// %Set the service port
        void setPort(int value) { port_ = value; }

        /// Path component of the URI
        string path() const { return path_; }

        /// %Set the path component of the URI
        void setPath(const string &value) { path_ = value; }

        /// Query component of the URI
        string query() const { return query_; }

        /// %Set the query component of the URI
        void setQuery(const string &value) { query_ = value; }

        /// Fragment component of the URI
        string fragment() const { return fragment_; }

        /// %Set fragment component of the URI
        void setFragment(const string &value) { fragment_ = value; }

        /// Return the host name with port number
        string requestHost() const;

        /// Return the path with query and fragment component
        string requestPath() const;

        /// Convert this URI to a string
        string toString() const;

    private:
        friend class cc::Cow;
        friend class Uri;

        Instance() = default;
        Instance(const string &text, Token *rootToken = nullptr);

        Instance *copy() const { return new Instance{*this}; }

        string scheme_;
        string userInfo_;
        string host_;
        bool hostIsNumeric_ { false };
        int port_ { -1 };
        string path_;
        string query_;
        string fragment_;
    };

    static string encode(const string &s);
    static string decode(const string &s);

    static string encodeForm(const Map<string> *form);
    static Ref<Map<string> > decodeForm(const string &payload);

    /** Create a new URI
      * \return new object instance
      */
    Uri():
        instance_{new Instance}
    {}

    /** Create a new URI
      * \param text URI string
      * \param rootToken root of the URI token tree
      * \exception UriSyntaxError
      */
    Uri(const string &text, Token *rootToken = nullptr):
        instance_{new Instance{text, rootToken}}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }

private:
    Ref<Instance> instance_;
};

/** \class UriSyntaxError cc/net/Uri
  * \brief Failed to parse an URI string
  */
class UriSyntaxError: public UsageError
{
public:
    /** Low-level constructor
      * \param text \copydoc text()
      */
    UriSyntaxError(const string &text): text_{text} {}

    /// the text that failed to parse as an URI
    string text() const { return text_; }

    string message() const override;

private:
    string text_;
};

}} // namespace cc::net
