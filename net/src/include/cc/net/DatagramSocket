/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/net/SocketAddress>
#include <cc/net/exceptions>
#include <cc/SystemStream>

namespace cc {
namespace net {

/** \class DatagramSocket cc/net/DatagramSocket
  * \brief Datagram socket
  */
class DatagramSocket: public SystemStream
{
public:
    class Instance: public SystemStream::Instance
    {
    public:
        /** Enabled/disable sending broadcasts on this socket
          * \param on if true enable broadcasting
          * \see SocketAddress(int)
          */
        void allowBroadcasting(bool on);

        /** %Set the incoming socket buffer size
          * \param newSize new incoming buffer size in bytes
          */
        void setRecvBufferSize(int newSize);

        /** %Set the outgoing socket buffer size
          * \param newSize new outgoing buffer size in bytes
          */
        void setSendBufferSize(int newSize);

        /** Receive a datagram
          * \param peerAddress peer address from which the datagram originates from
          * \param buffer data buffer to hold the datagram received
          * \return number of bytes received
          * \exception HostUnreachable an ICMP error from an earlier sendTo() has been received
          */
        virtual int recvFrom(SocketAddress *peerAddress, CharArray *buffer);

        /** Send a datagram
          * \param peerAddress destination address
          * \param message the message to send
          * \return number of bytes send
          * \exception HostUnreachable an ICMP error from an earlier sendTo() has been received
          * \see CharArray::select()
          */
        virtual int sendTo(const SocketAddress &peerAddress, const CharArray *message);

        /** Restrict communication to a single source
          * \param peerAddress unicast or multicast address to receive datagrams from
          */
        void connect(const SocketAddress &peerAddress);

    protected:
        friend class DatagramSocket;

        Instance(int fd = -1);
        Instance(const SocketAddress &localAddress);

        ProtocolFamily family_;
    };

    /** Establish a local sockets connection
      */
    void connect(DatagramSocket &first, DatagramSocket &second);

    /** Create an invalid socket
      */
    DatagramSocket() = default;

    /** Create a new datagram socket
      * \param address local address to bind to the socket
      */
    DatagramSocket(const SocketAddress &address):
        SystemStream{new Instance{address}}
    {}

    Instance *operator->() const { return my<Instance>(); }

private:
    DatagramSocket(int fd):
        SystemStream{new Instance{fd}}
    {}
};

}} // namespace cc::net
