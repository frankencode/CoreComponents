/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <arpa/inet.h>
#include <netinet/in.h> // sockaddr_in, etc.
#include <netdb.h> // addrinfo
#include <sys/socket.h> // connect
#include <sys/un.h> // sockaddr_un

#include <cc/str>
#include <cc/net/types>
#include <cc/net/exceptions>
#include <cc/net/Uri>

namespace cc {
namespace net {

class SocketAddressDetails;
class SocketAddress;

typedef List<SocketAddress> SocketAddressList;

/** \class SocketAddress cc/net/SocketAddress
  * \brief Socket address
  */
class SocketAddress
{
public:
    /** \brief %Object instance
      */
    class Instance: public Object {
    public:
        bool isValid() const; /// Check if this is a valid address

        ProtocolFamily family() const; ///< Network protocol family
        SocketType socketType() const; ///< Socket type if this address is a result of name resolution
        InternetProtocol protocol() const;  ///< Socket protocol if this address is a result of name resolution
        int port() const; ///< Service port
        void setPort(int port); ///< Change the service port

        String networkAddress() const; ///< Convert the network address to a string (sans port number)
        String toString() const; ///< Convert the full address to a string (with port number)

        int scope() const; ///< IPv6 scope of this address
        void setScope(int scope); ///< Change the IPv6 scope

        /** Lookup the host name of given address. Usually a reverse DNS
          * lookup will be issued, which may take several seconds.
          * \FIXME: remove failed argument and throw proper exceptions
          */
        String lookupHostName(bool *failed = nullptr) const;

        /** Lookup the service name. In most setups the service name will be looked up
          * in a local file (/etc/services) and therefore the call returns immediately.
          */
        String lookupServiceName() const;

        /** Returns the network prefix of an IPv6 address (the first 64 bits).
          * For IPv4 addresses the entire address is returned.
          */
        uint64_t networkPrefix() const;

        int bitLength() const { return 8 * addrLen(); } ///< Size of the address in bits

        struct sockaddr *addr(); ///< Provide access to the underlying low-level address structure
        const struct sockaddr *addr() const; ///< Provide access to the underlying low-level address structure (read-only)
        int addrLen() const; ///< Size of the underlying low-level address structure in bytes

        /// Additional information for assigned IPv4 addresses (returns nullptr if not available)
        const SocketAddressDetails *details() const;

    private:
        friend class cc::Cow;
        friend class SocketAddress;
        friend class SocketAddressDetails;

        Instance();
        Instance(ProtocolFamily family, const String &address = "", int port = 0);
        Instance(int port);
        Instance(struct sockaddr_in *addr);
        Instance(struct sockaddr_in6 *addr);
        Instance(addrinfo *info);

        Instance(const Instance &) = default;
        Instance *copy() const { return new Instance{*this}; }

        bool equals(const Instance *other) const;

        union {
            struct sockaddr addr_;
            struct sockaddr_in inet4Address_;
            struct sockaddr_in6 inet6Address_;
            struct sockaddr_un localAddress_;
        };

        SocketType socketType_ { SocketType::Unspecified };
        InternetProtocol protocol_ { InternetProtocol::Unspecified };
    };

    /** Resolve internet address of an URI
      * \param uri target URI
      * \return new object instance
      * \exception HostNameResolutionError
      */
    static SocketAddress resolveUri(const Uri &uri);

    /** Resolve internet address of a host
      * \param hostName host or domain name to resolve
      * \param port port number to set
      * \return new object instance
      * \exception HostNameResolutionError
      */
    static SocketAddress resolveHost(const String &hostName, int port = 0);

    /** Query the complete connection information for given host name, service name and
      * protocol family. The call blocks until the local resolver has resolved the
      * host name. This may take several seconds.
      *   Depending on supported protocol stacks and service availability in
      * different protocols (UDP/TCP) and number of network addresses of the
      * queried host multiple SocketAddress objects will be returned.
      *   An empty list is returned, if the host name is unknown, service is
      * not available or protocol family is not supported by the host.
      *   The host name can be a short name relative to the local domain.
      * The fully qualified domain name (aka canonical name) can be optionally retrieved.
      * \exception HostNameResolutionError
      */
    static Ref<SocketAddressList> queryConnectionInfo(
        const String &hostName,
        const String &serviceName = "",
        ProtocolFamily family = ProtocolFamily::Unspecified,
        SocketType socketType = SocketType::Unspecified,
        String *canonicalName = nullptr
    );

    /// Create an invalid socket address
    SocketAddress();

    /** \brief Create a socket address
      * \param address numerical host address, wildcard ("*", "::") or file path
      * \exception InvalidAddressSyntax
      */
    SocketAddress(const String &address):
        instance_{new Instance{guessFamily(address), address}}
    {}

    /** \brief Create a socket address
      * \param family protocol family
      * \param address numerical host address, wildcard ("*", "::") or file path
      * \param port service port
      * \exception InvalidAddressSyntax
      */
    explicit SocketAddress(ProtocolFamily family, const String &address = "", int port = 0):
        instance_{new Instance{family, address, port}}
    {}

    /** Create an IPv4 broadcast address
      * \return new object instance
     */
    explicit SocketAddress(int port);

    /// Constant member access
    const Instance *operator->() const { return instance_; }

    /// Non-constant member access
    Instance *operator->() { return Cow::get(instance_); }

    /// Check if this is a valid address
    explicit operator bool() const { return instance_->isValid(); }

    /// Convert to string
    operator String() const { return instance_->toString(); }

    /// Compare for equality
    bool operator==(const SocketAddress &other) const { return instance_->equals(other.instance_); }

private:
    friend class Instance;
    friend class NetworkInterface;
    friend class RouteInfo;

    static ProtocolFamily guessFamily(const String &address);

    static Instance *instance();

    explicit SocketAddress(struct sockaddr_in *addr):
        instance_{new Instance{addr}}
    {}

    explicit SocketAddress(struct sockaddr_in6 *addr):
        instance_{new Instance{addr}}
    {}

    explicit SocketAddress(addrinfo *info):
        instance_{new Instance{info}}
    {}

    explicit SocketAddress(Instance *instance):
        instance_{instance}
    {}

    explicit SocketAddress(SocketAddressDetails *details):
        instance_{details}
    {}

    Ref<Instance> instance_;
};

/** \brief Additional IPv4 address information associated with a network interface
  */
class SocketAddressDetails: public SocketAddress::Instance
{
public:
    /// size of the subnet mask
    int networkMask() const { return networkMask_; }

    /// local address
    SocketAddress localAddress() const { return localAddress_; }

    /// broadcast address
    SocketAddress broadcastAddress() const { return broadcastAddress_; }

    /// destination address in cases this is a point-to-point link
    SocketAddress destinationAddress() const { return broadcastAddress_; }

    /// anycast address
    SocketAddress anycastAddress() const { return anycastAddress_; }

private:
    friend class NetworkInterface;

    SocketAddressDetails(): networkMask_{0} {}
    SocketAddressDetails(struct sockaddr_in *addr, int networkMask = 0): SocketAddress::Instance{addr}, networkMask_{networkMask} {}
    SocketAddressDetails(struct sockaddr_in6 *addr): SocketAddress::Instance{addr}, networkMask_{0} {}

    int networkMask_;
    SocketAddress localAddress_;
    SocketAddress broadcastAddress_;
    SocketAddress anycastAddress_;
};

}} // namespace cc::net
