/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Window>
#include <SDL2/SDL.h>

namespace cc {

class SdlWindow final: public Window
{
public:
    SdlWindow() = default;

    explicit SdlWindow(const View &view):
        Window{new State{view}}
    {}

    uint32_t id() const { return me().id_; }
    SDL_Window *sdlWindow() const { return me().sdlWindow_; }

private:
    friend class Object;
    friend class SdlApplication;

    struct State final: public Window::State
    {
        State(const View &view);
        ~State();

        void onWindowResized(Size newSize);
        void onWindowMoved(Point newPos);
        void onWindowShown();
        void onWindowHidden();
        void redraw();

        void show(int display) override;
        void hide() override;
        void raise() override;

        void setWindowIcon(const Image &image);
        void setOpacity(double opacity) override;

        void setMinSize(Size size);
        void setMaxSize(Size size);

        void renderFrame(const Frame &frame) override;
        void renderViewToImage(const View &view, Image &image) override;

        static void updateTexture(SDL_Renderer *sdlRenderer, View view);
        static void updateOpacity(View view);
        static void renderCascade(SDL_Renderer *sdlRenderer, const View &view);
        static void renderTexture(SDL_Renderer *sdlRenderer, const View &view);

        Property<void> minSizeMonitor;
        Property<void> maxSizeMonitor;

        bool exposed_ { false };
        bool primordial_ { true };
        uint32_t id_;
        uint32_t gainFocusTime_ { 0 };
        SDL_Window *sdlWindow_;
        SDL_Renderer *sdlRenderer_;
        Size currentSize_;
        Point currentPos_;
        SDL_Surface *sdlIcon_ { nullptr };
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
