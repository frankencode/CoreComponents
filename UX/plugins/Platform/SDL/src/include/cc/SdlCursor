/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Cursor>
#include <SDL2/SDL.h>

namespace cc {

class SdlCursor final: public Cursor
{
    struct State;

public:
    SdlCursor(CursorShape shape):
        Cursor{new State{shape}}
    {}

    SdlCursor(const Cursor &cursor)
    {
        static_cast<Cursor &>(*this) = cursor;
    }

    SDL_Cursor *sdlCursor() const { return me().sdlCursor_; }

private:
    friend class Object;

    struct State final: public Cursor::State
    {
        State(CursorShape shape):
            Cursor::State{shape},
            sdlCursor_{SDL_CreateSystemCursor(
                [=]() {
                    switch (shape) {
                        case CursorShape::Arrow                   : return SDL_SYSTEM_CURSOR_ARROW;
                        case CursorShape::IBeam                   : return SDL_SYSTEM_CURSOR_IBEAM;
                        case CursorShape::Wait                    : return SDL_SYSTEM_CURSOR_WAIT;
                        case CursorShape::CrossHair               : return SDL_SYSTEM_CURSOR_CROSSHAIR;
                        case CursorShape::WaitArrow               : return SDL_SYSTEM_CURSOR_WAITARROW;
                        case CursorShape::ResizeNorthWestSouthEast: return SDL_SYSTEM_CURSOR_SIZENWSE;
                        case CursorShape::ResizeNorthEastSouthWest: return SDL_SYSTEM_CURSOR_SIZENESW;
                        case CursorShape::ResizeWestEast          : return SDL_SYSTEM_CURSOR_SIZEWE;
                        case CursorShape::ResizeNorthSouth        : return SDL_SYSTEM_CURSOR_SIZENS;
                        case CursorShape::ResizeCross             : return SDL_SYSTEM_CURSOR_SIZEALL;
                        case CursorShape::Forbidden               : return SDL_SYSTEM_CURSOR_NO;
                        case CursorShape::Hand                    : return SDL_SYSTEM_CURSOR_HAND;
                    }
                    return SDL_SYSTEM_CURSOR_ARROW;
                }()
            )}
        {}

        SDL_Cursor *sdlCursor_;
    };

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
