/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Rect>
#include <cc/Color>
#include <cc/Property>
#include <cc/Object>
#include <cc/typography>
#include <cc/bitmask>
#include <cc/str>
#include <cmath>

namespace cc {

/** %Alignment within a RowLayout
  */
enum class RowAlign {
    Top,    ///< %Align top
    Bottom, ///< %Align bottom
    Center  ///< %Align center
};

inline String str(RowAlign align)
{
    switch (align) {
        case RowAlign::Top:    return "RowAlign::Top";
        case RowAlign::Bottom: return "RowAlign::Bottom";
        case RowAlign::Center: return "RowAlign::Center";
    }

    return String{};
}

/** %Alignment within a ManagedColumn
  */
enum class ColumnAlign {
    Auto,  ///< %Align according to language preference
    Left,  ///< %Align left
    Right, ///< %Align right
    Center ///< %Align center
};

inline String str(ColumnAlign align)
{
    switch (align) {
        case ColumnAlign::Auto:   return "ColumnAlign::Auto";
        case ColumnAlign::Left:   return "ColumnAlign::Left";
        case ColumnAlign::Right:  return "ColumnAlign::Right";
        case ColumnAlign::Center: return "ColumnAlign::Center";
    }

    return String{};
}

/** \internal
  */
enum class UpdateReason {
    Moved,
    Changed,
    Resized,
    Exposed,
    // Shown,
    Hidden,
    Faded
};

/** %Mouse button flags
  */
enum class MouseButton: unsigned int {
    None   = 0, ///< No mouse button
    Left   = 1, ///< Left mouse button
    Right  = 2, ///< Right mouse button
    Middle = 4, ///< Middle mouse button
    X1     = 8, ///< X1 mouse button
    X2     = 16 ///< X2 mouse button
};

CC_BITMASK(MouseButton)

inline String str(MouseButton mask)
{
    List<String> parts;
    if (mask & MouseButton::Left)   parts << "MouseButton::Left";
    if (mask & MouseButton::Right)  parts << "MouseButton::Right";
    if (mask & MouseButton::X1)     parts << "MouseButton::X1";
    if (mask & MouseButton::X2)     parts << "MouseButton::X2";
    if (mask & MouseButton::Middle) parts << "MouseButton::Middle";
    return parts.join('|');
}

using PenId = uint32_t;

/** Pressure-sensitive pen action
  */
enum class PenAction {
    Moved, ///< Pen touched the surface or is moved on the surface
    Hovered, ///< Pen lifted from the surface or is moved above the surface
    Pressed, ///< Pen button is pressed
    Released ///< Pen button is released
};

inline String str(PenAction action)
{
    switch (action) {
        case PenAction::Moved : return "PenAction::Moved";
        case PenAction::Hovered : return "PenAction::Hovered";
        case PenAction::Pressed : return "PenAction::Pressed";
        case PenAction::Released: return "PenAction::Released";
    };
    return String{};
}

/** Pressure-sensitive pen button flags
  */
enum class PenButton: uint32_t {
    None     = 0,       ///< Empty set of buttons
    InkTip   = 1u << 0, ///< Painting tip is touching the surface
    Button1  = 1u << 1, ///< %Button 1 is pressed
    Button2  = 1u << 2, ///< %Button 2 is pressed
    Button3  = 1u << 3, ///< %Button 3 is pressed
    Button4  = 1u << 4, ///< %Button 4 is pressed
    Button5  = 1u << 5, ///< %Button 5 is pressed
    EraseTip = 1u << 30 ///< Erase tip is touching the surface
};

CC_BITMASK(PenButton)

inline String str(PenButton mask)
{
    List<String> parts;
    if (mask & PenButton::InkTip) parts << "PenButton::InkTip";
    if (mask & PenButton::Button1) parts << "PenButton::Button1";
    if (mask & PenButton::Button2) parts << "PenButton::Button2";
    if (mask & PenButton::Button3) parts << "PenButton::Button3";
    if (mask & PenButton::Button4) parts << "PenButton::Button4";
    if (mask & PenButton::Button5) parts << "PenButton::Button5";
    if (mask & PenButton::EraseTip) parts << "PenButton::EraseTip";
    return parts.join('|');
}

/** Type of input action
  */
enum class PointerAction {
    Moved, ///< Pointer was moved
    Pressed, ///< Pointer has been pressed
    Released ///< Pointer has been released
};

inline String str(PointerAction action)
{
    switch (action) {
        case PointerAction::Moved   : return "PointerAction::Moved";
        case PointerAction::Pressed : return "PointerAction::Pressed";
        case PointerAction::Released: return "PointerAction::Released";
    };

    return String{};
}

/** %Keyboard key action
  */
enum class KeyAction {
    Pressed, ///< Key was pressed
    Released ///< Key was released
};

inline String str(KeyAction action)
{
    switch (action) {
        case KeyAction::Pressed : return "KeyAction::Pressed";
        case KeyAction::Released: return "KeyAction::Released";
    };

    return String{};
}

/** Predefined cursor shapes
  */
enum class CursorShape {
    Arrow,                    ///< Arrow cursor
    IBeam,                    ///< I-beam text selection cursor
    Wait,                     ///< Hourglass cursor
    CrossHair,                ///< Crosshair cursor
    WaitArrow,                ///< Arrow cursor with an hourglass
    ResizeNorthWestSouthEast, ///< Resizing cursor (NW to SE)
    ResizeNorthEastSouthWest, ///< Resizing cursor (NE to SW)
    ResizeWestEast,           ///< Resizing cursor (W to E)
    ResizeNorthSouth,         ///< Resizing cursor (N to S)
    ResizeCross,              ///< Resiging cursor
    Forbidden,                ///< Forbidden action cursor
    Hand                      ///< Grabbing hand cursor
};

inline String str(CursorShape shape)
{
    switch (shape) {
        case CursorShape::Arrow                   : return "CursorShape::Arrow";
        case CursorShape::IBeam                   : return "CursorShape::IBeam";
        case CursorShape::Wait                    : return "CursorShape::Wait";
        case CursorShape::CrossHair               : return "CursorShape::CrossHair";
        case CursorShape::WaitArrow               : return "CursorShape::WaitArrow";
        case CursorShape::ResizeNorthWestSouthEast: return "CursorShape::ResizeNorthWestSouthEast";
        case CursorShape::ResizeNorthEastSouthWest: return "CursorShape::ResizeNorthEastSouthWest";
        case CursorShape::ResizeWestEast          : return "CursorShape::ResizeWestEast";
        case CursorShape::ResizeNorthSouth        : return "CursorShape::ResizeNorthSouth";
        case CursorShape::ResizeCross             : return "CursorShape::ResizeCross";
        case CursorShape::Forbidden               : return "CursorShape::Forbidden";
        case CursorShape::Hand                    : return "CursorShape::Hand";
    };

    return String{};
}

/** %Orientation
  */
enum class Orientation {
    Vertical,              ///< Portrait orientation
    Horizontal,            ///< Landscape orientation
    Portrait = Vertical,   ///< Portrait orientation
    Landscape = Horizontal ///< Landscape orientation
};

inline String str(Orientation orientation)
{
    switch (orientation) {
        case Orientation::Horizontal: return "Orientation::Horizontal";
        case Orientation::Vertical  : return "Orientation::Vertical";
    };

    return String{};
}

/** Push button style
  */
enum class PushButtonStyle {
    Elevated, ///< Elevated Button
    Floating, ///< Floating Action Button (FAB)
    TinyFloating, ///< Tiny Floating Action Button (FAB)
    FloatingWithLabel, ///< Extended Floating Action Button (FAB with label)
    Default = Elevated ///< Default push button style
};

inline String str(PushButtonStyle style)
{
    switch (style) {
        case PushButtonStyle::Elevated: return "PushButtonStyle::Elevated";
        case PushButtonStyle::Floating: return "PushButtonStyle::Floating";
        case PushButtonStyle::TinyFloating: return "PushButtonStyle::TinyFloating";
        case PushButtonStyle::FloatingWithLabel: return "PushButtonStyle::FloatingWithLabel";
    };
    return String{};
}

/** %Touch button style
  */
enum class TouchButtonStyle {
    Filled, ///< Filled with a prominent color
    Tonal, ///< Filled with a more subtle color
    Outline, ///< Outline, not filled
    Text, ///< Just a touchable text
    Default = Filled ///< Default touch button style
};

inline String str(TouchButtonStyle style)
{
    switch (style) {
        case TouchButtonStyle::Filled: return "TouchButtonStyle::Filled";
        case TouchButtonStyle::Tonal: return "TouchButtonStyle::Tonal";
        case TouchButtonStyle::Outline: return "TouchButtonStyle::Outline";
        case TouchButtonStyle::Text: return "TouchButtonStyle::Text";
    };
    return String{};
}

/** Check if a text can be wrapped behind a certain text fragment
  */
using TextWrapBehind = Function<bool(const String &/*text*/, long /*byteOffset*/, long /*byteCount*/)>;

/** Check if \a text can be wrapped behind a text fragment
  * \param text Text to be wrapped
  * \param byteOffset Offset of the text fragment
  * \param byteCount Length of the text fragment
  */
bool textWrapBehindDefault(const String &text, long byteOffset, long byteCount);

/** Touch device ID
  */
using TouchDeviceId = std::int64_t;

/** Touch finger ID
  */
using TouchFingerId = std::int64_t;

/** Translate design units (\a x) to pixels
  */
double dp(double x);

/** Translate scaleable design units (\a x) to pixels
  */
double sp(double x);

/** Translate grid units (\a n) to pixels
  */
double gu(int n);

} // namespace cc
