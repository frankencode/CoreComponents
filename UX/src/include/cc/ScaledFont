/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/FontFace>
#include <cc/FontMetrics>
#include <cc/Font>

namespace cc {

/** \class ScaledFont cc/ScaledFont
  * \ingroup ui
  * \brief Scaled font needed for painting text
  */
class ScaledFont: public Object
{
public:
    /** Create a null scaled font
      */
    ScaledFont() = default;

    /** Get the font selector
      */
    Font font() const { return me().font_; }

    /** Get the font size (in pixel)
      */
    double size() const { return me().font_.size(); }

    /** Get the font metrics
      */
    FontMetrics metrics() const { return me().metrics_; }

    /** Get the selected font face
      */
    FontFace fontFace() const { return me().fontFace(); }

protected:
    struct State: public Object::State
    {
        State(const Font &font):
            font_{font}
        {}

        virtual FontFace fontFace() const = 0;

        Font font_;
        FontMetrics metrics_;
    };

    explicit ScaledFont(State *newState):
        Object{newState}
    {}

    FontMetrics::State &metricsState() { return me().metrics_.me(); }

    const State &me() const { return Object::me.as<State>(); }
    State &me() { return Object::me.as<State>(); }
};

inline String str(const ScaledFont &sf)
{
    return Format{}
        << "ScaledFont {" << nl
        << "  path: " << sf.fontFace().path() << nl
        << "  size: " << sf.font().size() << nl
        << "}";
}

} //namespace cc
