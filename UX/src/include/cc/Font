/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Composite>
#include <cc/Color>
#include <cc/typography>

namespace cc {

/** \class Font cc/Font
  * \ingroup ui
  * \brief %Font selector
  */
class Font
{
public:
    /** Create an unspecific font selector
      */
    Font()
    {
        me().stretch_ = +Stretch::Normal;
        me().decoration_ = +Decoration::None;
        me().smoothing_ = +FontSmoothing::Default;
        me().outlineHinting_ = +OutlineHinting::Default;
        me().metricsHinting_ = +MetricsHinting::Default;
    }

    /** Create font selector for given \a size
      */
    Font(double size):
        Font{}
    {
        me().size_ = size;
    }

    /** Check if this font selector is specific
      */
    operator bool() const
    {
        return *this != Font{};
    }

    /** Create font selector for given \a family and \a size
      */
    Font(const String &family, double size):
        Font{}
    {
        me().family_ = family;
        me().size_ = size;
    }

    /** Create font selector for given \a family
      */
    Font(const String &family):
        Font{}
    {
        me().family_ = family;
    }

    /** Create font selector for given \a pitch
      */
    Font(Pitch pitch);

    /** Create font selector for given \a pitch and \a size
      */
    Font(Pitch pitch, double size):
        Font{pitch}
    {
        me().size_ = size;
    }

    String family() const { return me().family_; } ///< Get font family
    Font &family(const String &newValue) { me().family_ = newValue; return *this; }  ///< %Set font family

    double size() const { return me().size_; } ///< Get font size (in pixel)
    Font &size(double newValue) { me().size_ = newValue; return *this; } ///< %Set font size (in pixel)

    static double defaultSize(Pitch pitch = Pitch::Variable); ///< Get default font size (in pixel) for given \a pitch

    Slant slant() const { return me().slant_; } ///< Get slant
    Font &slant(Slant newValue) { me().slant_ = newValue; return *this; } ///< %Set slant

    Weight weight() const { return me().weight_; } ///< Get weight
    Font &weight(Weight newValue) { me().weight_ = newValue; return *this; } ///< %Set weight

    Stretch stretch() const { return static_cast<Stretch>(me().stretch_); } ///< Get stretch
    Font &stretch(Stretch newValue) { me().stretch_ = static_cast<uint8_t>(newValue); return *this; } ///< %Set stretch

    Decoration decoration() const { return static_cast<Decoration>(me().decoration_); } ///< Get decoration
    Font &decoration(Decoration newValue) { me().decoration_ = static_cast<uint8_t>(newValue); return *this; } ///< %Set decoration

    FontSmoothing smoothing() const { return static_cast<FontSmoothing>(me().smoothing_); } ///< Get smoothing
    Font &smoothing(FontSmoothing newValue) { me().smoothing_ = static_cast<uint8_t>(newValue); return *this; } ///< %Set smoothing

    OutlineHinting outlineHinting() const { return static_cast<OutlineHinting>(me().outlineHinting_); } ///< Get outline hinting
    Font &outlineHinting(OutlineHinting newValue) { me().outlineHinting_ = static_cast<uint8_t>(newValue); return *this; } ///< %Set outline hinting

    MetricsHinting metricsHinting() const { return static_cast<MetricsHinting>(me().metricsHinting_); } ///< Get metrics hinting
    Font &metricsHinting(MetricsHinting newValue) { me().metricsHinting_ = static_cast<uint8_t>(newValue); return *this; } ///< %Set metrics hinting

    Color color() const { return me().ink_; } ///< Get foreground color
    Font &color(Color newValue) { me().ink_ = newValue; return *this; } ///< %Set foreground color

    Color paper() const { return me().paper_; } ///< Get background color
    Font &paper(Color newValue) { me().paper_ = newValue; return *this; } ///< %Set background color

    Font &operator*=(double scale)
    {
        return size(
            (size() <= 0 ? defaultSize() : size()) * scale
        );
    }

    /** Equal to operator
      */
    bool operator==(const Font &b) const
    {
        return
            family()         == b.family()         &&
            size()           == b.size()           &&
            weight()         == b.weight()         &&
            slant()          == b.slant()          &&
            stretch()        == b.stretch()        &&
            decoration()     == b.decoration()     &&
            smoothing()      == b.smoothing()      &&
            outlineHinting() == b.outlineHinting() &&
            metricsHinting() == b.metricsHinting() &&
            color()          == b.color()          &&
            paper()          == b.paper();
    }

    /** Not equal to operator
      */
    bool operator!=(const Font &b) const
    {
        return !(*this == b);
    }

private:
    struct State {
        String family_;
        float size_ { -1 };
        Slant slant_ { Slant::Normal };
        Weight weight_ { Weight::Normal };
        uint8_t stretch_ : 4;
        uint8_t decoration_ : 4;
        uint8_t smoothing_ : 3;
        uint8_t outlineHinting_ : 3;
        uint8_t metricsHinting_ : 2;
        Color ink_;
        Color paper_;
    };

    Composite<State> me;
};

/** Scale size of \a font by a factor of \a scale
  */
inline Font operator*(const Font &font, double scale) { Font target = font; return target *= scale; }

/** Scale size of \a font by a factor of \a scale
  */
inline Font operator*(double scale, const Font &font) { return font * scale; }

inline Font operator+(const Font &a, const Font &b)
{
    return Font{a.family(), a.size() + b.size()};
}

/** Stringify font for debugging purposes
  */
String str(const Font &font);

} // namespace cc
