/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/View>

namespace cc {

/** \class RowLayout cc/RowLayout
  * \ingroup ui_layout
  * \brief %Layout children views in a row
  * \see RowLayout
  */
class RowLayout final: public View::Layout
{
public:
    /** Create new column layout and assign it to \a view
      */
    RowLayout():
        Layout{new RowLayout::State}
    {}

    RowAlign align() const { return me().align(); } ///< Get row alignment
    RowLayout &align(RowAlign newValue) { me().align(newValue); return *this; } ///< %Set row alignment

private:
    class State final: public View::Layout::State
    {
    public:
        Orientation orientation() const override { return Orientation::Horizontal; }

        Property<RowAlign> align { RowAlign::Top };

    private:
        friend class RowLayout;

        State() = default;

        void updateLayout();

        Property<void> update { [this]{ updateLayout(); } };
        bool firstTime_ { true };
        bool setViewSize_ { false };
    };

    State& me() { return Object::me.as<State>(); }
    const State& me() const { return Object::me.as<State>(); }
};

} // namespace cc
