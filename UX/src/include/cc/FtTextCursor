/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/FtTextRun>

namespace cc {

/** \internal
  */
class FtTextCursor: public TextCursor
{
public:
    FtTextCursor() = default;

    explicit FtTextCursor(const FtTextRun &textRun):
        TextCursor{new State{textRun}}
    {}

    int runIndex() const { return me().runIndex_; } ///< %Glyph run index
    int clusterIndex() const { return me().clusterIndex_; } ///< %Cluster index
    int glyphIndex() const { return me().glyphIndex_; } ///< &Glyph index within the glyph run

private:
    friend class Object;
    friend class FtTextRun;

    struct State: public TextCursor::State
    {
        State(const FtTextRun &textRun):
            textRun_{textRun}
        {}

        FtTextCursor self() const;

        TextCursor copy() const override;
        void assign(const TextCursor &other) override;

        int step(int steps) override;
        int lineStep(int steps) override;

        FtTextRun textRun_;
    };

    explicit FtTextCursor(State *newState):
        TextCursor{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
