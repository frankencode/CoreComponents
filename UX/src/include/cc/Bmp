/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Image>
#include <cc/Stream>

namespace cc {

class ByteSource;

/** \class Bmp cc/Bmp
  * \ingroup ui
  * \brief Read and write bitmap image files (BMP file format in local endian ARGB pixel format)
  */
class Bmp final: public Object
{
public:
    static bool detect(const Bytes &data, Out<int> width = None{}, Out<int> height = None{});

    /** Map bitmap image file into memory
      * \param path %File path of the image to load
      * \exception BmpError
      * \exception SystemResourceError
      */
    static Image map(const String &path);

    /** Load image from BMP encoded \a data
      */
    static Image decode(const Bytes &data);

    static void encode(const Stream &stream, const Image &image);
    static void save(const String &path, const Image &image);

private:
    static void readHeader(ByteSource source, Out<int> width, Out<int> height, Out<uint32_t> fileSize = None{}, Out<uint32_t> dataOffset = None{});
};

/** \class BmpError cc/Bmp
  * \brief Failed to load an image file because of unexpected or unsupported file format
  */
class BmpError: public Exception
{
public:
    explicit BmpError(const char *reason);

    virtual String message() const override;

private:
    const char *reason_;
};

} // namespace cc
