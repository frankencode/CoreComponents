/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/InputControl>
#include <cc/Ideographic>

namespace cc {

/** \class FloatingActionButton cc/FloatingActionButton
  * \ingroup ui
  * \brief Floating action button (FAB)
  */
class FloatingActionButton final: public InputControl
{
public:
    /** Size flavor
      */
    enum class Flavor {
        Regular, ///< Regular sized button
        Tiny, ///< Tiny button
        Extended ///< With additional label
    };

    /** Create a primordial button
      */
    FloatingActionButton();

    /** Create a new button of given \a flavor
      */
    explicit FloatingActionButton(Flavor flavor);

    /** Create a new button with addition label (Flavor::Extended)
      */
    explicit FloatingActionButton(const String &text);

    /** Get a weak reference in \a self
      */
    FloatingActionButton &associate(Out<FloatingActionButton> self);

    FloatingActionButton &icon(Ideographic ch); ///< %Set icon
    FloatingActionButton &icon(const Image &image); ///< %Set icon
    FloatingActionButton &icon(const View &view); ///< %Set icon

    Color color() const; ///< Get button fill color
    FloatingActionButton &color(Color newValue); ///< %Set button fill color
    FloatingActionButton &color(Definition<Color> &&f); ///< Define button fill color

    Color textColor() const; ///< Get foreground color
    FloatingActionButton &textColor(Color newValue); ///< %Set foreground color
    FloatingActionButton &textColor(Definition<Color> &&f); ///< Define foreground color

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
