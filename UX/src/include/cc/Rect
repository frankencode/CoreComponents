/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Vector>

namespace cc {

using Point = Vector<double, 2>;
using Size = Vector<double, 2>;

/** \class Rect cc/Rect
  * \ingroup ui
  * \brief Rectangle
  */
class Rect
{
public:
    /** Create an empty rectangle
      */
    Rect() = default;

    /** Create a rectangle of given \a size
      */
    Rect(const Size &size):
        size_{size}
    {}

    /** Create a rectangle of given \a size located at \a pos
      */
    Rect(const Point &pos, const Size &size):
        pos_{pos},
        size_{size}
    {}

    /** Create a rectangle covering the ranges [x0, x1) and [y0, y1)
      */
    Rect(double x0, double y0, double x1, double y1):
        pos_{x0, y0},
        size_{x1 - x0, y1 - y0}
    {}

    /** Area is greate than zero
      */
    explicit operator bool() const { return x0() < x1() && y0() < y1(); }

    Point pos() const { return pos_; } ///< Get position
    void pos(Point newValue) { pos_ = newValue; } ///< %Set position
    void pos(double x, double y) { pos_ = Point{x, y}; } ///< %Set position

    Size size() const { return size_; } ///< Get size
    void size(Size newValue) { size_ = newValue; } ///< %Set size
    void size(double w, double h) { size_ = Size{w, h}; } ///< %Set size

    double x() const { return pos_[0]; } ///< Get pos()[0]
    double y() const { return pos_[1]; } ///< Get pos()[1]
    double width() const { return size_[0]; } ///< Get size()[0]
    double height() const { return size_[1]; } ///< Get size()[1]

    double x0() const { return pos_[0]; } ///< Get pos()[0]
    double y0() const { return pos_[1]; } ///< Get pos()[1];
    double x1() const { return pos_[0] + size_[0]; } ///< Get pos()[0] + size()[0]
    double y1() const { return pos_[1] + size_[1]; } ///< Get pos()[1] + size()[1]

    /** Equal to operator
      */
    bool operator==(const Rect &b)
    {
        return pos() == b.pos() && size() == b.size();
    }

    /** Not equal to operator
      */
    bool operator!=(const Rect &b)
    {
        return pos() != b.pos() || size() != b.size();
    }

    /** Check if \a b is covered by this rectangle
      */
    bool contains(const Rect &b) const
    {
        return
            x0() <= b.x0() && b.x1() <= x1() &&
            y0() <= b.y0() && b.y1() <= y1();
    }

    /** Check if \a b is covered by this rectangle
      */
    bool contains(const Point &b) const
    {
        return
            x0() <= b.x() && b.x() < x1() &&
            y0() <= b.y() && b.y() < y1();
    }

private:
    Point pos_;
    Size size_;
};

} // namespace cc

namespace cc {

/** Stringify \a rect
  * \ingroup ui
  */
String str(const cc::Rect &rect);

/** Stringify \a rect in fixed floating point notation
  * \ingroup ui
  */
String fixed(const cc::Rect &rect, int ni, int nf);

/** Stringify \a rect in fixed floating point notation
  * \ingroup ui
  */
String fixed(const cc::Rect &rect, int nf);

} // namespace cc
