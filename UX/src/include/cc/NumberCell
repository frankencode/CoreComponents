/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class NumberCell cc/NumberCell
  * \ingroup ui
  * \brief Fixed point number display and input cell
  * \see Slider
  */
class NumberCell final: public Control
{
public:
    /** Create a primordial number cell
      */
    NumberCell();

    /** Get a weak reference in \a self
      */
    NumberCell &associate(Out<NumberCell> self);

    double min() const; ///< Get minimum value
    NumberCell &min(double newValue); ///< %Set minimum value
    NumberCell &min(Definition<double> &&f); ///< Define minimum value

    double max() const; ///< Get maximum value
    NumberCell &max(double newValue); ///< %Set maximum value
    NumberCell &max(Definition<double> &&f); ///< Define maximum slider value

    double precision() const; ///< Get precision
    NumberCell &precision(double newValue); ///< %Set precision (defaults to 1)
    NumberCell &precision(Definition<double> &&f); ///< Define precision

    int digits() const; ///< Get number of digits
    NumberCell &digits(int newValue); ///< %Set number of digits
    NumberCell &digits(Definition<int> &&f); ///< Define number of digits

    char decimalPoint() const; ///< Get decimal point character (defaults to '.')
    NumberCell &decimalPoint(char newValue); ///< %Set decimal point character
    NumberCell &decimalPoint(Definition<char> &&f); ///< Define decimal point character

    Font font() const; ///< Get the font
    NumberCell &font(Font newValue); ///< %Set the font
    NumberCell &font(Definition<Font> &&f); ///< Define the font

    double value() const; ///< Get current value
    NumberCell &value(double newValue); ///< %Set current value
    NumberCell &onValueChanged(Function<void()> &&f); ///< Get notified when value changes

    bool textInput() const; ///< Tell if text input is enabled (enabled by default)
    NumberCell &textInput(bool newValue); ///< Enable/disable text input
    NumberCell &textInput(Definition<bool> &&f); ///< Define when text input should be enabled

    Color textColor() const; ///< Get text color
    NumberCell &textColor(Color newValue); ///< %Set text color
    NumberCell &textColor(Definition<Color> &&f); ///< Define text color

    Color color() const; ///< Get cell color
    NumberCell& color(Color newValue); ///< %Set cell color
    NumberCell& color(Definition<Color> &&f); ///< Define cell color

    NumberCell &onAccepted(Function<void()> &&f); ///< %Input accepted
    NumberCell &onRejected(Function<void()> &&f); ///< %Input rejected

private:
    friend class Object;
    friend class Slider;

    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
