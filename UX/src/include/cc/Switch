/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class Switch cc/Switch
  * \ingroup ui
  * \brief On-off switch with associated label
  */
class Switch final: public Control
{
public:
    /** Create primordial switch field
      */
    Switch();

    /** Create a new switch field
      */
    explicit Switch(const String &text);

    /** Get a weak reference in \a self
      */
    Switch &associate(Out<Switch> self);

    String text() const; ///< Get text
    Switch &text(const String &newValue); ///< %Set text
    Switch &text(Definition<String> &&f); ///< Define text

    bool value() const; ///< Get current state
    Switch &value(bool newValue); ///< %Set current state
    Switch &value(Definition<bool> &&f); ///< Define current state

    Switch &onValueChanged(Fun<void()> &&f); ///< Get notified when value changes

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
