/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class Organizer cc/Organizer
  * \ingroup ui
  * \brief Controls that organize the layout of other controls
  *
  * Organizer controls do not catch all input events, but only those that
  * are not handled by one of its child controls.
  *
  * \todo introduce a virtual function Control::State::isControlProxy() const -> bool with opposite semantic and remove the Organizer class
  */
class Organizer: public Control
{
public:
    /** Create a null organizer
      */
    Organizer() = default;

protected:
    friend class Object;

    struct State: public Control::State {};

    explicit Organizer(State *newState):
        Control{newState}
    {}

    explicit Organizer(CreateState onDemand):
        Control{onDemand}
    {}
};

} // namespace cc
