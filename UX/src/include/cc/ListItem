/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

class ListMenu;

/** \class ListItem cc/ListItem
  * \ingroup ui
  * \brief %Item in a list menu
  */
class ListItem: public Control
{
public:
    /** Create a primordial list item
      */
    ListItem();

    /** Get a weak reference in \a self
      */
    ListItem &associate(Out<ListItem> self);

    View icon() const { return me().icon_(); } ///< Get icon
    ListItem &icon(const View &newValue); ///< %Set icon
    ListItem &icon(const Image &newValue); ///< %Set icon

    View title() const { return me().title_(); } ///< Get title
    ListItem &title(const View &newValue); ///< %Set title
    ListItem &title(const String &newValue); ///< %Set title

    View indicator() const { return me().indicator(); } ///< Get indicator
    ListItem &indicator(const View &newValue); ///< %Set indicator
    ListItem &indicator(const Image &newValue); ///< %Set indicator

    bool enabled() const { return me().enabled(); } ///< Tell if enabled
    ListItem &enabled(bool newValue) { me().enabled(newValue); return *this; } ///< %Set enabled
    ListItem &enabled(Definition<bool> &&f) { me().enabled(move(f)); return *this; } ///< Define enabled

protected:
    friend class Object;
    friend class ListMenu;

    struct State: public Control::State
    {
        State();

        View icon() const { return icon_(); }
        void icon(const View &newValue);

        View title() const { return title_(); }
        void title(const View &newValue);

        View indicator() const { return indicator_(); }
        void indicator(const View &newValue);

        Property<bool> enabled;

    private:
        friend class ListItem;

        Size minSize() const override;

        void bindIcon();
        void bindTitle();
        void bindIndicator();

        Property<View> icon_;
        Property<View> title_;
        Property<View> indicator_;
    };

    explicit ListItem(CreateState onDemand):
        Control{onDemand}
    {}

    explicit ListItem(State *newState):
        Control{newState}
    {}

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc
