/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/InputControl>
#include <cc/Picture>

namespace cc {

/** \class TouchButton cc/TouchButton
  * \ingroup ui
  * \brief %Touch button (a button that changes color when touched)
  * \todo Some onPressed() is needed to be triggered when the button is pressed by keyboard or mouse/pointer.
  */
class TouchButton: public InputControl
{
public:
    /** \copybrief TouchButtonStyle
      */
    using Style = TouchButtonStyle;

    /** Create a primordial touch button
      */
    TouchButton();

    /** Create a new touch button
      */
    TouchButton(Style style, const String &text, const Picture &icon = Picture{});

    /** Create a new touch button
      */
    explicit TouchButton(const String &text, const Picture &icon = Picture{});

    /** Get a weak reference in \a self
      */
    TouchButton &associate(Out<TouchButton> self);

    String text() const; ///< Get text
    TouchButton &text(const String &newValue); ///< %Set text
    TouchButton &text(Definition<String> &&f); ///< Define text

    TouchButton &autoExpand(bool on = true); ///< Automatically expand to full when placed in a layout

    TouchButton &onTriggered(Fun<void()> &&f); ///< Setup callback to be called when the button is pressed
    TouchButton &operator()(Fun<void()> &&f); ///< \copydoc onTriggered()

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
