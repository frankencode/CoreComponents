/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/keyboard>

namespace cc {

/** \class Shortcut cc/Shortcut
  * \ingroup ui
  * \brief Keyboard shortcut
  */
class Shortcut final: public Object
{
public:
    /** Create a null shortcut
      */
    Shortcut() = default;

    /** Create a new shortcut
      */
    Shortcut(KeyCode key, KeyModifier modifier = KeyModifier::None):
        Object{new State{key, modifier}}
    {}

    /** Device independent key code
      */
    KeyCode key() const { return me().key_; }

    /** Keyboard modifiers
      */
    KeyModifier modifier() const { return me().modifier_; }

    /** Equals-to operator
      */
    bool operator==(const Shortcut &other) const
    {
        return
            key() == other.key() &&
            modifier() == other.modifier();
    }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Shortcut &other) const
    {
        std::strong_ordering ordering = key() <=> other.key();
        if (ordering == std::strong_ordering::equal) ordering = modifier() <=> other.modifier();
        return ordering;
    }

private:
    struct State final: public Object::State
    {
        State(KeyCode key, KeyModifier modifier):
            key_{key},
            modifier_{modifier}
        {}


        KeyCode key_;
        KeyModifier modifier_;
    };

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
