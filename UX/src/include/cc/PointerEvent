/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/uiTypes>

namespace cc {

template<class> class PosGuard;
class MouseEvent;

/** \class PointerEvent cc/PointerEvent
  * \ingroup ui
  * \brief Input event from a pointing device (e.g. mouse or touch screen)
  */
class PointerEvent: public Object
{
public:
    /** \copydoc PointerAction
      */
    PointerAction action() const { return me().action_; }

    /** Time the event occured
      */
    double time() const { return me().time_; }

    /** Position of the pointer
      */
    Point pos() const { return me().pos_; }

    /** Distance the pointer has been moved
      */
    Step step() const { return me().step_; }

    /** Convert into a human-reable form
      */
    String toString() const { return me().toString(); }

protected:
    friend class Object;
    friend class PosGuard<PointerEvent>;
    friend class MouseEvent;

    friend String str(const PointerEvent &event);

    struct State: public Object::State
    {
        State(
            PointerAction action,
            double time,
            const Point &pos,
            const Step &step
        ):
            action_{action},
            time_{time},
            pos_{pos},
            step_{step}
        {}

        virtual String toString() const = 0;

        PointerAction action_;
        double time_;
        Point pos_;
        Step step_;
    };

    /** Create a null pointer event
      */
    PointerEvent() = default;

    explicit PointerEvent(State *newState):
        Object{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

inline String str(const PointerEvent &event)
{
    return event.toString();
}

} // namespace cc
