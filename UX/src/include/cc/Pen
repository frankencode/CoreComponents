/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/Array>
#include <cc/Color>

namespace cc {

/** %Line cap rendering style
  */
enum class LineCap: short {
    Butt, ///< %Line ends exactly at end point
    Round, ///< %Line end is rounded around the end point
    Square, ///< %Line end shows a rectangle around the end point
    Undef = -1
};

inline constexpr short operator+(LineCap style) { return static_cast<int>(style); }

inline String str(LineCap style)
{
    switch (style) {
        case LineCap::Butt: return "LineCap::Butt";
        case LineCap::Round: return "LineCap::Round";
        case LineCap::Square: return "LineCap::Square";
        case LineCap::Undef: return "LineCap::Undef";
    };
    return String{};
}

/** %Line join rendering style
  */
enum class LineJoin: short {
    Miter, ///< %Sharp angled corner
    Round, ///< %Rounded corner
    Bevel, ///< %Beveled corner
    Undef = -1
};

inline constexpr short operator+(LineJoin style) { return static_cast<int>(style); }

inline String str(LineJoin style)
{
    switch (style) {
        case LineJoin::Miter: return "LineJoin::Miter";
        case LineJoin::Round: return "LineJoin::Round";
        case LineJoin::Bevel: return "LineJoin::Bevel";
        case LineJoin::Undef: return "LineJoin::Undef";
    };
    return String{};
}

/** \class Pen cc/Pen
  * \brief %Source color and line style
  * \see Painter
  */
class Pen final: public Object
{
public:
    /** Create a primordial pen
      */
    Pen() = default;

    /** Create a new pen with given \a color
      */
    explicit Pen(Color color):
        Object{new State{color}}
    {}

    Pen(Color color, double lineWidth):
        Object{new State{color, lineWidth}}
    {}

    Color color() const { return me().color_; } ///< %Get pen color
    Pen &color(Color newValue) { me().color_ = newValue; return *this; } ///< %Set pen color

    double lineWidth() const { return me().lineWidth_; } ///< %Set line width
    Pen &lineWidth(double newValue) { me().lineWidth_ = newValue; return *this; } ///< %Get line width

    LineCap lineCap() const { return me().lineCap_; } ///< %Get line cap style
    Pen &lineCap(LineCap newValue) { me().lineCap_ = newValue; return *this; } ///< %Set line cap style

    LineJoin lineJoin() const { return me().lineJoin_; } ///< %Get line join style
    Pen &lineJoin(LineJoin newValue) { me().lineJoin_ = newValue; return *this; } ///< %Set line join style

    double miterLimit() const { return me().miterLimit_; } ///< %Get miter limit
    Pen &miterLimit(double newValue) { me().miterLimit_ = newValue; return *this; } ///< %Set miter limit

    Array<double> lineDash() const { return me().lineDash_; } ///< %Get line dash pattern
    Pen &lineDash(const Array<double> &newValue) { me().lineDash_ = newValue; return *this; } ///< %Set line dash pattern

    double lineDashOffset() const { return me().lineDashOffset_; } ///< %Get line dash offset
    Pen &lineDashOffset(double newValue) { me().lineDashOffset_ = newValue; return *this; } ///< %Set line dash offset

    /** Stringify into a human-reable form
      */
    String toString() const;

private:
    struct State: public Object::State
    {
        State() = default;

        State(Color color):
            color_{color}
        {}

        State(Color color, double lineWidth):
            color_{color},
            lineWidth_{lineWidth}
        {}

        String toString() const;

        Color color_;
        LineCap lineCap_ { LineCap::Undef };
        LineJoin lineJoin_ { LineJoin::Undef };
        double lineWidth_ { -1 };
        double miterLimit_ { -1 };
        Array<double> lineDash_;
        double lineDashOffset_ { 0 };
    };

    State &me() {
        if (!Object::me) Object::me = new State;
        return Object::me.as<State>();
    }

    const State &me() const { return Object::me.as<State>(); }
};

inline bool operator==(const Pen &a, const Pen &b)
{
    if (!a || !b) return !a && !b;

    return
        a.color() == b.color() &&
        a.lineWidth() == b.lineWidth() &&
        a.lineJoin() == b.lineJoin() &&
        a.miterLimit() == b.miterLimit() &&
        a.lineDash() == b.lineDash() &&
        a.lineDashOffset() == b.lineDashOffset();
}

inline bool operator!=(const Pen &a, const Pen &b)
{
    if (!a || !b) return (!a && b) || (a && !b);

    return
        a.color() != b.color() ||
        a.lineWidth() != b.lineWidth() ||
        a.lineCap() != b.lineCap() ||
        a.lineJoin() != b.lineJoin() ||
        a.lineDash() != b.lineDash() ||
        a.lineDashOffset() != b.lineDashOffset();
}

} // namespace cc
