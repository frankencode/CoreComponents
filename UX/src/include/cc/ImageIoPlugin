/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Image>

namespace cc {

/** \class ImageIoPlugin cc/ImageIoPlugin
  * \group ui
  * \brief Description of an image file format
  * \see ImageIoPluginManager
  */
class ImageIoPlugin: public Object
{
public:
    /** Detect image I/O plugin for loading an image
      * \param path %File path
      * \param data %File contents
      * \param width Returns the image width
      * \param height Returns the image height
      * \return ImageIoPlugin needed to load the image
      */
    static ImageIoPlugin detect(const String &path, const Bytes &data, Out<int> width = None{}, Out<int> height = None{});

    /** Create a null image plugin
      */
    ImageIoPlugin() = default;

    /** Unqiue name identifying this plugin
      */
    String mediaType() const
    {
        return me().mediaType();
    }

    /** Common file name extensions used for this image format
      */
    List<String> fileSuffix() const
    {
        return me().fileSuffix();
    }

    /** Check if \a data is of this image file format and optionally return the \a width and \a height of the image
      */
    bool detect(const Bytes &data, Out<int> width = None{}, Out<int> height = None{}) const
    {
        return me().detect(data, &width, &height);
    }

    /** Load the image from given \a data
      * \return Loaded image if decoding \a data was successful
      * \return A null image if decoding \a data failed
      */
    Image decode(const Bytes &data) const
    {
        return me().decode(data);
    }

    /** Load image from \a data
      * \param image Target image (output is scaled to match the user-defined size)
      * \param data Encoded image data
      * \return true if image could be loaded successfully
      */
    bool decodeInto(InOut<Image> image, const Bytes &data) const
    {
        return me().decodeInto(&image, data);
    }

    /** Write encoded image to \a sink
      * \param sink Output sink to write the encoded image to
      * \param image Source image
      */
    void encode(const Stream &sink, const Image &image) const
    {
        return me().encode(sink, image);
    }

protected:
    struct State: public Object::State
    {
        /** Initialize plugin
          * \param name \copybrief ImageIoPlugin::name()
          * \param exts \copybrief ImageIoPlugin::fileSuffix()
          */
        State(const String &mediaType, const List<String> &fileSuffix):
            mediaType_{mediaType},
            fileSuffix_{fileSuffix}
        {}

        /** \copydoc ImageIoPlugin::mediaType()
          */
        String mediaType() const { return mediaType_; }

        /** \copydoc ImageIoPlugin::fileSuffix()
          */
        List<String> fileSuffix() const { return fileSuffix_; }

        /** \copydoc ImageIoPlugin::detect()
          */
        virtual bool detect(const Bytes &data, Out<int> width, Out<int> height) const = 0;

        /** \copydoc ImageIoPlugin::decode()
          */
        virtual Image decode(const Bytes &data) const = 0;

        /** \copydoc ImageIoPlugin::decodeInto()
          */
        virtual bool decodeInto(InOut<Image> image, const Bytes &data) const = 0;

        /** \copydoc ImageIoPlugin::encode()
          */
        virtual void encode(const Stream &sink, const Image &image) const = 0;

    private:
        String mediaType_;
        List<String> fileSuffix_;
    };

    explicit ImageIoPlugin(State *newState);

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
