/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Image>

namespace cc {

/** \class ImageIoPlugin cc/ImageIoPlugin
  * \group ui
  * \brief Description of an image file format
  * \see ImageIoPluginManager
  */
class ImageIoPlugin: public Object
{
public:
    /** \copydoc State::name()
      */
    String name() const
    {
        return me().name();
    }

    /** \copydoc State::fileNameExtensions()
      */
    List<String> fileNameExtensions() const
    {
        return me().fileNameExtensions();
    }

    /** \copydoc State::check()
      */
    bool check(const Bytes &data, Out<int> width = None{}, Out<int> height = None{}) const
    {
        return me().check(data, &width, &height);
    }

    /** \copydoc State::load
      */
    Image load(const Bytes &data) const
    {
        return me().load(data);
    }

    /** \copydoc State::loadInto()
      */
    bool loadInto(InOut<Image> image, const Bytes &data) const
    {
        return me().loadInto(&image, data);
    }

protected:
    struct State: public Object::State
    {
        /** Initialize plugin
          * \param name \copybrief State::name()
          */
        State(const String &name):
            name_{name}
        {}

        /** Unqiue name identifying this plugin
          */
        String name() const { return name_; }

        /** A list of common file name extensions (case-insensitive)
          */
        virtual List<String> fileNameExtensions() const = 0;

        /** Check if \a data is of this image file format and optionally return the \a width and \a height of the image
          */
        virtual bool check(const Bytes &data, Out<int> width, Out<int> height) const = 0;

        /** Load the image from given \a data
          * \return Loaded image if decoding \a data was successful
          * \return A null image if decoding \a data failed
          */
        virtual Image load(const Bytes &data) const = 0;

        /** Load image from \a data
          * \param image Image to load the image data into
          * \param data Encoded image data
          * \return true if image could be loaded successfully
          */
        virtual bool loadInto(InOut<Image> image, const Bytes &data) const = 0;

    private:
        String name_;
    };

    explicit ImageIoPlugin(State *newState);

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
