/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Flickable>
#include <cc/ScrollBar>

namespace cc {

/** \class ScrollView cc/ScrollView
  * \ingroup ui
  * \brief Scrollable view
  * \todo rename to ScrollArea
  */
class ScrollView: public View
{
public:
    /** Create a primordial scroll view
      */
    ScrollView();

    /** Create a new scroll view of size (\a width, \a height)
      */
    ScrollView(double width, double height);

    /** Create a new scroll view with custom \a carrier
      */
    explicit ScrollView(const View &carrier);

    /** Create a new scroll view of size (\a width, \a height) with custom \a carrier
      */
    ScrollView(double width, double height, const View &carrier);

    /** Get a weak reference in \a self
      */
    ScrollView &associate(Out<ScrollView> self);

    /** Get the carrier
      */
    View carrier() const { return me().flickable_.carrier(); }

    /** Get scroll bar auto hide mode
      */
    bool scrollBarAutoHide() const { return me().scrollBarAutoHide(); }

    /** %Set scroll bar auto hide mode
      */
    ScrollView &scrollBarAutoHide(bool newValue) { me().scrollBarAutoHide(newValue); return *this; }

protected:
    struct State: public View::State
    {
        State(const View &carrier = Pane{});

        Property<bool> scrollBarAutoHide { true };
        Property<void> scrollMonitor;
        Property<void> carrierMonitor;

        Flickable flickable_;
        ScrollBar vScroll_;
        ScrollBar hScroll_;
    };

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc
