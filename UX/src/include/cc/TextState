/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#include <cc/Text>
#include <cc/TextRun>
#include <cc/FontMetrics>

namespace cc {

struct Text::State: public View::State
{
    explicit State(const String &initialText = String{}, Font initialFont = Font{}, bool html = false):
       text{initialText},
       font{initialFont}
    {
        if (!initialFont) font([this]{ return style().defaultFont(); });
        paper([this]{ return basePaper(); });

        textRun([this, html]{
            return html ? TextRun::fromHtml(text(), font()) : TextRun{text, font()};
        });

        wrappedRun([this]{
            TextRun run = textRun();
            double maxLineWidth = maxWidth() - 2 * margin()[0];
            if (0 < maxLineWidth && maxLineWidth < run.size()[0]) {
                run = run.wrap(maxLineWidth, textAlign());
            }
            return run;
        });

        size([this]{ return preferredSize(); });

        if (font().color())
            color(font().color());
        else
            color([this]{ return theme().primaryTextColor(); });

        textPos([this]{
            if (textAlign() == TextAlign::Left || textAlign() == TextAlign::Justify)
                return margin() + Point{0, metrics().ascender()};
            else if (textAlign() == TextAlign::Right)
                return Point{width() - margin()[0], margin()[1]} - wrappedRun().size()[0] + Point{0, metrics().ascender()};
            else
                return (size() - wrappedRun().size()) / 2 + Point{0, metrics().ascender()};
        });

        metrics([this]{ return FontMetrics{font()}; });

        paint([this]{
            Painter p{this};
            p.setPen(color());
            p.showTextRun(textPos().round(), wrappedRun());
        });
    }

    Size preferredSize() const override
    {
        return (0 < maxWidth() ? wrappedRun().size() : textRun().size()) + 2 * margin();
    }

    Size minSize() const override
    {
        return Size{0, wrappedRun().size()[1]} + 2 * margin();
    }

    Point baselineStart() const
    {
        return pos() + textPos();
    }

    void baselineStart(Definition<Point> &&a)
    {
        pos([this, a]{ return a() - textPos(); });
    }

    Property<String> text;
    Property<Font> font;
    Property<Color> color;
    Property<Size> margin;
    Property<double> maxWidth;
    Property<TextAlign> textAlign { TextAlign::Left };
    Property<Point> textPos;
    Property<FontMetrics> metrics;
    Property<TextRun> textRun;
    Property<TextRun> wrappedRun;
};

} // namespace cc
