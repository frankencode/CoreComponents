/*
 * Copyright (C) 2020-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/InputControl>
#include <cc/TextEditor>

namespace cc {

/** \class TextInput cc/TextInput
  * \ingroup ui
  * \brief %Single-line text input control
  */
class TextInput: public InputControl
{
public:
    /** Create a primordial text input control
      */
    TextInput();

    /** Create a new text input control
      */
    explicit TextInput(const String &text);

    /** Get a weak reference in \a self
      */
    TextInput &associate(Out<TextInput> self);

    String text() const; ///< Get current input text
    TextInput &text(const String &newValue); ///< %Set current input text

    TextAlign textAlign() const; ///< Get text alignment
    TextInput &textAlign(TextAlign newValue); ///< %Set text alignment

    Color textColor() const; ///< Get text color
    TextInput &textColor(Color newValue); ///< %Set text color
    TextInput &textColor(Definition<Color> &&f); ///< Define text color

    Point textPos() const; ///< Get the baseline start position of the input text

    Font font() const; ///< Get the font
    TextInput &font(Font newValue); ///< %Set the font
    TextInput &font(Definition<Font> &&f); ///< Define the font

    String sizerText() const; ///< Get sizer text
    TextInput &sizerText(const String &newValue); ///< %Set sizer text
    TextInput &sizerText(Definition<String> &&f); ///< %Define sizer text

    TextInput &accept(Function<bool()> &&f); ///< Define acceptable input text
    TextInput &filter(Function<bool(Range range, InOut<String>)> &&f); ///< Define text input filter

    void selectAll();

protected:
    /** Internal state
      */
    struct State;

    /** Initialize text input control
      */
    explicit TextInput(const TextEditor &editor);

    /** Initialize primordial text input control
      */
    explicit TextInput(CreateState onDemand);

    /** Initialize text input with \a newState
      */
    explicit TextInput(State *newState);

    /** Get the underlying editor
      */
    TextEditor editor() const;

    State &me();
    const State &me() const;
};

} // namespace cc
