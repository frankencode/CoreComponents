/*
 * Copyright (C) 2020-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/TextCursor>
#include <cc/TextRun>

namespace cc {

struct TextInput::State: public InputControl::State
{
    State();
    State(const TextEditor &editor);

    virtual String text() const;
    virtual void text(const String &newValue);
    Point textPos() const;

    bool accept() const override;

    Size preferredSize() const override;

    Size minSize() const override;
    Size maxSize() const override;
    void startBlink();

    void stopBlink();

    Rect textInputArea() const override;

    void onTextEdited(const String &chunk, int start, int length) override;

    void onTextInput(const String &chunk) override;

    void paste(const String &chunk);

    void paste(Range range, const String &chunk);

    void selectAll();

    Property<Font> font;
    Property<Color> textColor;
    Property<String> sizerText;
    Property<List<String>> imeChunks;
    Property<TextRun> unwrappedTextRun;
    Property<TextRun> textRun;
    Property<TextAlign> textAlign { TextAlign::Left };
    Property<TextCursor> textCursor;
    Property<bool> textCursorVisible;
    Property<Range> selection;

    Fun<bool()> accept_;
    Fun<bool(Range range, InOut<String>)> filter_;
    TextEditor editor_;
    Timer timer_ { 0.5 };
    bool shiftKey_ { false };
};

} // namespace cc
