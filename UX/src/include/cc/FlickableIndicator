/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/View>

namespace cc {

/** \class FlickableIndicator cc/FlickableIndicator
  * \ingroup ui
  * \brief Positional indicator for a flickable pane
  * \see FlickableIndicator
  */
class FlickableIndicator final: public View
{
public:
    /** Create a primordial scroll indicator
      */
    FlickableIndicator();

    /** Create a new scroll indicator of given \a orientation
      */
    explicit FlickableIndicator(Orientation orientation);

    /** Get a weak reference in \a self
      */
    FlickableIndicator &associate(Out<FlickableIndicator> self);

    Orientation orientation() const; ///< Get orientation
    FlickableIndicator &orientation(Orientation newValue); ///< %Set orientation

    double visibleOffset() const; ///< Get pane position
    FlickableIndicator &visibleOffset(double newValue); ///< %Set pane position
    FlickableIndicator &visibleOffset(Definition<double> &&f); ///< Define pane position

    double totalExtent() const; ///< Get pane size
    FlickableIndicator &totalExtent(double newValue); ///< %Set pane size
    FlickableIndicator &totalExtent(Definition<double> &&f); ///< Define pane size

    double autoHide() const; ///< Get auto hide
    FlickableIndicator &autoHide(bool newValue); ///< %Set auto hide
    FlickableIndicator &autoHide(Definition<bool> &&f); ///< Define auto hide

    double visibleExtent() const; ///< Get visible extent

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
