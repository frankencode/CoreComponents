/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class ClockDial cc/ClockDial
  * \ingroup ui
  * \brief Abstract interactive clock face
  */
class ClockDial: public Control
{
public:
    /** Create a null clock dial
      */
    ClockDial() = default;

    Size margin() const; ///< Margins around the clock face
    ClockDial &margin(Size newValue); ///< Set margins around the clock face
    ClockDial &margin(Definition<Size> &&f); ///< Define margins around the clock face

    int value() const; ///< Get value
    ClockDial &value(int newValue); ///< %Set value

    int minValue() const; ///< Get minimum value
    int maxValue() const; ///< Get maximum value

protected:
    struct State: public Control::State
    {
        State(int initialValue);

        /** Minimum value displayed on the clock face
          */
        virtual int minValue() const = 0;

        /** Maximum value displayed on the clock face
          */
        virtual int maxValue() const = 0;

        /** Map the face index \a i to a face value.
          * The face index starts with 0 at the 3 o'clock and increases clockwise with each full hour.
          */
        virtual int faceIndexToValue(int i) const = 0;

        /** Translate the face value to the display string
          */
        virtual String faceValueToString(int value) const = 0;

    private:
        friend class ClockDial;

        void settled() override;
        double thumbRadius() const;
        Size preferredSize() const override;
        void selectValue(Point pos);

        Property<Size> margin { sp(24), sp(24) };
        Property<int> value;
    };

    explicit ClockDial(CreateState onDemand):
        Control{onDemand}
    {}

    explicit ClockDial(State *newState):
        Control{newState}
    {}

    State &me();
    const State &me() const;
};

} // namespace cc
