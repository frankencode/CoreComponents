/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/StylePlugin>
#include <cc/Singleton>
#include <cc/Map>

namespace cc {

/** \internal
  * \class StyleManager cc/StyleManager
  * \ingroup ui
  * \brief Keep track of visual styles
  */
class StyleManager: public Singleton
{
public:
    /** Get access to the style manager singleton
      */
    StyleManager();

    StylePlugin activePlugin() const { return me().activePlugin_; }
    void setActivePlugin(const StylePlugin &plugin);

    Map<String, StylePlugin> plugins() const { return me().plugins_; }

private:
    friend class StylePlugin;

    void registerPlugin(const StylePlugin &plugin);

    struct State: public Singleton::State {
        State();
        Map<String, StylePlugin> plugins_;
        StylePlugin activePlugin_;
        String defaultStyleName_;
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
