/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/TextInput>

namespace cc {

/** \class NumberInput cc/NumberInput
  * \ingroup ui
  * \brief Specialized input control for entering fixed point decimal number literals
  */
class NumberInput final: public TextInput
{
public:
    /** Create a primordial number input
      */
    NumberInput();

    /** Get a weak reference in \a self
      */
    NumberInput &associate(Out<NumberInput> self);

    double min() const; ///< Get minimum value
    NumberInput &min(double newValue); ///< %Set minimum value
    NumberInput &min(Definition<double> &&f); ///< Define minimum value

    double max() const; ///< Get maximum value
    NumberInput &max(double newValue); ///< %Set maximum value
    NumberInput &max(Definition<double> &&f); ///< Define maximum slider value

    double precision() const; ///< Get precision
    NumberInput &precision(double newValue); ///< %Set precision (defaults to 1)
    NumberInput &precision(Definition<double> &&f); ///< Define precision

    int digits() const; ///< Get number of digits
    NumberInput &digits(int newValue); ///< %Set number of digits
    NumberInput &digits(Definition<int> &&f); ///< Define number of digits

    char decimalPoint() const; ///< Get decimal point character (defaults to '.')
    NumberInput &decimalPoint(char newValue); ///< %Set decimal point character
    NumberInput &decimalPoint(Definition<char> &&f); ///< Define decimal point character

    double value() const; ///< Get current value
    NumberInput &value(double newValue); ///< %Set current value
    NumberInput &onValueChanged(Fun<void()> &&f); ///< Get notified when value changes

private:
    friend class Object;

    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
