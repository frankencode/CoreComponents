/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Transition>
#include <cc/types>

namespace cc {

/** \class Easing cc/Easing
  * \ingroup ui
  * \brief %Easing curves
  * \todo Visualize and tune the easing functions
  */
struct Easing
{
    /** Setup easing behavior for a property
      * \param property %Property for which to ease value changes
      * \param curve %Easing curve to apply
      * \param duration %Duration of the transition in seconds
      * \tparam T %Property value type
      */
    template<class T>
    Easing(Property<T> &property, const EasingCurve &curve, double duration, Fun<bool()> &&direct = nullptr)
    {
        Transition<T>{property, curve, duration, move(direct)};
    }

    /** \f$f(t)=t\f$
      */
    static double Linear(double t);

    /** \f$f(t)=t^2\f$
      */
    static double InQuad(double t);

    /** \f$f(t)=-t^2+2t\f$
      */
    static double OutQuad(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & 2t^2\\
      * t>0.5  & -2t^2+4t-1
      * \end{cases}\f$
      */
    static double InOutQuad(double t);

    /** \f$f(t)=t^3\f$
      */
    static double InCubic(double t);

    /** \f$f(t)=t^3-3t^2+3t\f$
      */
    static double OutCubic(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & 4t^3\\
      * t>0.5  & 4t^3-12t^2+12t-3
      * \end{cases}\f$
      */
    static double InOutCubic(double t);

    /** \f$f(t)=t^4\f$
      */
    static double InQuart(double t);

    /** \f$f(t)=t^4+4t^3-6t^2+4t\f$
      */
    static double OutQuart(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & 8t^3\\
      * t>0.5  & -8t^4+32t^3-48t^2+32t-7
      * \end{cases}\f$
      */
    static double InOutQuart(double t);

    /** \f$f(t)=t^5\f$
      */
    static double InQuint(double t);

    /** \f$f(t)=t^5-4t^4+10t^3-10t^2+5t\f$
      */
    static double OutQuint(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & 16t^5\\
      * t>0.5  & 16t^5-80t^4+160t^3-160t^2+80t-15
      * \end{cases}\f$
      */
    static double InOutQuint(double t);

    /** \f$f(t)=\sin(2\pi(t-1))+1\f$
      */
    static double InSine(double t);

    /** \f$f(t)=\sin(2\pi t)\f$
      */
    static double OutSine(double t);

    /** \f$f(t)=\frac{1}{2}(1-\cos(\pi t))\f$
      */
    static double InOutSine(double t);

    /** \f$f(t)=1-\sqrt{1-t^2}\f$
      */
    static double InCirc(double t);

    /** \f$f(t)=\sqrt{2t-t^2}\f$
      */
    static double OutCirc(double t);

    /** \f$f(t)=\frac{1}{2}-\frac{1}{2}\sqrt{1-4t^2}\f$
      */
    static double InOutCirc(double t);

    /** \f$f(t) = \begin{cases}
      * t\neq 0 & 2^{10t-10}\\
      * t=0 & 0
      * \end{cases}\f$
      */
    static double InExpo(double t);

    /** \f$f(t) = \begin{cases}
      * t\neq 1 & 1-2^{-10t}\\
      * t=1 & 1
      * \end{cases}\f$
      */
    static double OutExpo(double t);

    /** \f$f(t) = \begin{cases}
      * t=0\vee t=1 & t\\
      * t<=0.5 & \frac{1}{2}2^{20t-10}\\
      * t>0.5 & 1-\frac{1}{2}2^{-20t+10}
      * \end{cases}\f$
      */
    static double InOutExpo(double t);

    /** \f$f(t)=\sin(26\pi t)2^{10t-10}\f$
      */
    static double InElastic(double t);

    /** \f$f(t)=\sin(-26\pi (t + 1))2^{-10t} + 1\f$
      */
    static double OutElastic(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & \frac{1}{2}\sin(52\pi t)2^{20t-10}\\
      * t>0.5  & \frac{1}{2}\sin(-52\pi t)2^{-20t+10}+1
      * \end{cases}\f$
      */
    static double InOutElastic(double t);

    /** \f$f(t)=t^3-t\sin(\pi t)\f$
      */
    static double InBack(double t);

    /** \f$f(t)=t^3-2t^2+3t-(1-t)\sin(\pi(1-t))\f$
      */
    static double OutBack(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & 4t^3-2t\sin(2\pi t)\\
      * t>0.5  & (t^3-3t^2+t-2)\sin(-2\pi(t-1))
      * \end{cases}\f$
      */
    static double InOutBack(double t);

    /** \f$f(t)=1-OutBounce(1-t)\f$
      */
    static double InBounce(double t);

    /** \f$f(t) = \begin{cases}
      * 0<=t<=\frac{4}{11}           & \frac{121}{16}t^2 \\
      * \frac{4}{11}<t<=\frac{8}{11} & \frac{363}{40}t^2 - \frac{99}{10}t + \frac{17}{5}\\
      * \frac{8}{11}<t<=\frac{9}{10} & \frac{4356}{361}t^2 - \frac{35442}{1805}t + \frac{16061}{1805}\\
      * \frac{9}{10}<t               & \frac{54}{5}t^2 - \frac{513}{25}t + \frac{268}{25}\\
      * \end{cases}\f$
      */
    static double OutBounce(double t);

    /** \f$f(t) = \begin{cases}
      * t<=0.5 & \frac{1}{2}InBounce(2t)\\
      * t>0.5  & \frac{1}{2}OutBounce(2t-1)+\frac{1}{2}\\
      * \end{cases}\f$
      */
    static double InOutBounce(double t);

    /** Cubic %Bezier curve
      */
    class Bezier
    {
    public:
        /** Create a cubic %Bezier curve starting at {0, 0} and ending at {1, 1} with control points \a a and \a b
          */
        Bezier(const Point &a, const Point &b):
            p1_{a},
            p2_{b}
        {}

        /** Create a cubic %Bezier curve starting at {0, 0} and ending at {1, 1} with control points (\a xa, \a ya) and (\a xb, \a yb)
          */
        Bezier(double xa, double ya, double xb, double yb):
            p1_{xa, ya},
            p2_{xb, yb}
        {}

        /** First control point
          */
        Point a() const { return p1_; }

        /** Second control point
          */
        Point b() const { return p1_; }

        /** Evaluate
          */
        double operator()(double t) const
        {
            return value(t);
        }

    private:
        double value(double t) const;
        Point point(double s) const;

        Point p1_;
        Point p2_;
    };
};

} // namespace cc
