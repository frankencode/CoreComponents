/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class Slider cc/Slider
  * \ingroup ui
  * \brief %Slider with leading and trailing decoration
  */
class Slider final: public View
{
public:
    /** Create a primordial slider field
      */
    Slider();

    /** Get a weak reference in \a self
      */
    Slider &associate(Out<Slider> self);

    Slider &leading(const View &view); ///< %Set leading decoration
    Slider &trailing(const View &view); ///< %Set trailing decoration

    double min() const; ///< Get minimum slider value
    Slider &min(double newValue); ///< %Set minimum slider value
    Slider &min(Definition<double> &&f); ///< Define minimum slider value

    double max() const; ///< Get maximum slider value
    Slider &max(double newValue); ///< %Set maximum slider value
    Slider &max(Definition<double> &&f); ///< Define maximum slider value

    double precision() const; ///< Get precision
    Slider &precision(double newValue); ///< %Set precision
    Slider &precision(Definition<double> &&f); ///< Define precision

    double value() const; ///< Get current slider value
    bool jumped() const; ///< Current value change is due to tap or click
    Slider &value(double newValue); ///< %Set current slider value
    Slider &onValueChanged(Fun<void()> &&f); ///< Get notified when value changes
    Slider &onUserInput(Fun<void()> &&f); ///< Get notified when value changes due to user interaction

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
