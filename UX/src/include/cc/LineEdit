/*
 * Copyright (C) 2020-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/TextInput>
#include <cc/Picture>

namespace cc {

enum class Icon: uint32_t;

/** \class LineEdit cc/LineEdit
  * \ingroup ui
  * \brief %Text input field
  */
class LineEdit: public Control
{
public:
    /** Create a primordial text input field
      */
    LineEdit();

    /** Create a new text input field with given \a title
      */
    explicit LineEdit(const String &title);

    /** Get a weak reference in \a self
      */
    LineEdit &associate(Out<LineEdit> self);

    String title() const; ///< Get title
    LineEdit &title(const String &newValue); ///< %Set title

    String text() const; ///< Get current text
    LineEdit &text(const String &newValue); ///< %Set current text

    String placeholder() const; ///< Get placeholder text
    LineEdit &placeholder(const String &newValue); ///< %Set placeholder text

    String help() const; ///< Get help text
    LineEdit &help(const String &newValue); ///< %Set help text
    LineEdit &help(Definition<String> &&f); ///< Define help text

    String error() const; ///< Get error text
    LineEdit &error(const String &newValue); ///< %Set error text
    LineEdit &error(Definition<String> &&f); ///< Define error text

    String status() const; ///< Get status text
    LineEdit &status(const String &newValue); ///< %Set status text
    LineEdit &status(Definition<String> &&f); ///< Define status text

    LineEdit &icon(const Picture &picture); ///< %Set leading decoration icon
    LineEdit &alertIcon(); ///< %Add an optionally visible alert icon

    LineEdit &leading(const View &view); ///< %Set leading decoration
    LineEdit &trailing(const View &view); ///< %Set trailing decoration

    LineEdit &onAccepted(Function<void()> &&f); ///< %Handle input accepted event
    LineEdit &onRejected(Function<void()> &&f); ///< %Handle input rejected event

    LineEdit &accept(Function<bool()> &&f); ///< %Define acceptable input text
    LineEdit &filter(Function<bool(Range range, InOut<String>)> &&f); ///< %Define text input restrictions

protected:
    struct State;

    /** Create a text field with a custom input control
      * \param input %Custom input control
      * \param title %Title of this text field
      */
    explicit LineEdit(const TextInput &input, const String &title = String{});

    /** Get the input control
      */
    TextInput input() const;

    State &me();
    const State &me() const;
};

} // namespace cc
