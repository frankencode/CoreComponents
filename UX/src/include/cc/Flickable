/*
 * Copyright (C) 2020-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Organizer>
#include <cc/Timer>
#include <cc/Pane>

namespace cc {

/** \class Flickable cc/Flickable
  * \ingroup ui
  * \brief %Control with variable sized movable contents
  */
class Flickable: public Organizer
{
public:
    /** Create a primordial flickable
      */
    Flickable();

    /** Create a new flickable of given size (\a width, \a height) and optionally with a custom \a carrier
      */
    Flickable(double width, double height, const View &carrier = Pane{});

    /** Create a new flickable with a custom \a carrier
      */
    explicit Flickable(const View &carrier);

    /** Get a weak reference in \a self
      */
    Flickable &associate(Out<Flickable> self);

    /** Get the access to the carrier
      */
    View &carrier() { return me().carrier_; }

    /** Get the access to the carrier
      */
    const View &carrier() const { return me().carrier_; }

protected:
    friend class Object;
    friend class FlickableIndicator;

    struct State: public Organizer::State
    {
        State(const View &carrier = Pane{});
        ~State();

        View carrier() const { return carrier_; }

        virtual void preheat();
        virtual void positionCarrierOnResize();

    protected:
        friend class Flickable;
        friend class FlickableIndicator;

        void keepFocusControlInView();

        bool carrierInsideBoundary() const;
        Point carrierStep(Point p, double b = 0);

        void carrierFlyStart();
        void carrierBounceStart();
        void carrierTraverseStart(Step distance);
        void carrierStop();
        void timerStop();

        void carrierFly();
        void carrierBounce();
        void carrierTraverse();
        void carrierStopped();

        Property<double> maxFlyTime { 1.5 };
        Property<double> maxSpeed { [this]{ return 3 * size().max(); } };
        Property<double> minHoldTime { 0.1 };
        Property<double> boundary { dp(60) };
        Property<double> maxBounceTime { 0.6 };
        Property<double> traverseTime { 0.5 };

        Property<double> wheelGranularity { 3 * std::ceil(style().itemHeight2()) };
        Property<double> maxWheelTime { 0.1 };
        Property<bool> wheelInversion { style().wheelInversion() };
        Property<bool> wheelBouncing { true };

        Property<Control> focusControl;

        View carrier_;
        Control overwrittenControl_;
        bool isDragged_ { false };
        Point dragStart_;
        Point carrierOrigin_;

        Point lastDragPos_;
        double lastDragTime_;
        double releaseSpeedMagnitude_;
        Step speed_;

        enum class TimerMode { Stopped, Flying, Bouncing, Traversing };
        TimerMode timerMode_ { TimerMode::Stopped };

        Timer timer_;
        double lastTime_;

        Point startPos_;
        Point finalPos_;

        bool wasFlying_ { false };
        bool carrierAtRest_ { true };
    };

    explicit Flickable(State *newState):
        Organizer{newState}
    {}

    explicit Flickable(CreateState createState):
        Organizer{createState}
    {}

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc
