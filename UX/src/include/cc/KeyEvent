/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/keyboard>
#include <cc/uiTypes>

namespace cc {

/** \class KeyEvent cc/KeyEvent
  * \ingroup ui
  * \brief Keyboard input event
  */
class KeyEvent final
{
public:
    /** Create a new keyboard input event
      * \param action \copydoc action()
      * \param time \copydoc time()
      * \param repeatCount \copydoc repeatCount()
      * \param scanCode \copydoc scanCode()
      * \param keyCode \copydoc keyCode()
      * \param modifiers \copydoc modifiers()
      */
    KeyEvent(
        KeyAction action,
        double time,
        int repeatCount,
        ScanCode scanCode,
        KeyCode keyCode,
        KeyModifier modifiers
    ):
        me{
            action,
            time,
            repeatCount,
            scanCode,
            keyCode,
            modifiers
        }
    {}

    /** \copydoc KeyAction
      */
    KeyAction action() const { return me().action_; }

    /** Event time
      */
    double time() const { return me().time_; }

    /** Automatic key repeat count
      */
    int repeatCount() const { return me().repeatCount_; }

    /** \copydoc ScanCode
      */
    ScanCode scanCode() const { return me().scanCode_; }

    /** \copydoc KeyCode
      */
    KeyCode keyCode() const { return me().keyCode_; }

    /** \copydoc KeyModifier
      */
    KeyModifier modifiers() const { return me().modifiers_; }

private:
    struct State {
        KeyAction action_;
        double time_;
        int repeatCount_;
        ScanCode scanCode_;
        KeyCode keyCode_;
        KeyModifier modifiers_;
    };

    Shared<State> me;
};

inline String str(const KeyEvent &event)
{
    return Format{}
        << "KeyEvent {" << nl
        << "  action: " << event.action() << nl
        << "  time: " << event.time() << nl
        << "  repeatCount: " << event.repeatCount() << nl
        << "  scanCode: " << event.scanCode() << nl
        << "  keyCode: " << event.keyCode() << nl
        << "  modifiers: " << event.modifiers() << nl
        << "}";
}

} // namespace cc
