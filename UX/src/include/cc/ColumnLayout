/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/View>

namespace cc {

/** \class ColumnLayout cc/ColumnLayout
  * \ingroup ui_layout
  * \brief Layout children views in a column
  */
class ColumnLayout final: public View::Layout
{
public:
    /** Create new column layout and assign it to \a view
      */
    ColumnLayout():
        Layout{new ColumnLayout::State}
    {}

    ColumnAlign align() const { return me().align(); } ///< Get column alignment
    ColumnLayout &align(ColumnAlign newValue) { me().align(newValue); return *this; } ///< %Set column alignment

    double indent() const { return me().indent(); } ///< Get horizontal indentation
    ColumnLayout &indent(double newValue) { me().indent(newValue); return *this; } ///< %Set horizontal indentation

private:
    class State final: public View::Layout::State
    {
    public:
        Orientation orientation() const override { return Orientation::Vertical; }

        Property<ColumnAlign> align { ColumnAlign::Left };
        Property<double> indent { 0 };

    private:
        friend class ColumnLayout;

        State() = default;

        void updateLayout();

        Property<void> update { [this]{ updateLayout(); } };
        bool firstTime_ { true };
        bool setViewSize_ { false };
    };

    State& me() { return Object::me.as<State>(); }
    const State& me() const { return Object::me.as<State>(); }
};

} // namespace cc
