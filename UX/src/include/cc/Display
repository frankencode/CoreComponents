/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/DisplayMode>
#include <cc/uiTypes>

namespace cc {

/** \class Display cc/Display
  * \ingroup ui
  * \brief %Display geometry information
  */
class Display: public Object
{
public:
    /** Create null display information
      */
    Display() = default;

    /** Create new display information
      */
    Display(
        Point pos,
        Size size,
        Size dpi,
        DisplayMode nativeMode
    ):
        Object{
            new State{
                pos, size, dpi, nativeMode
            }
        }
    {}

    Point pos() const { return me().pos(); } ///< %Position of the display
    Size size() const { return me().size(); } ///< %Size of the display
    Rect geometry() const { return Rect{pos(), size()}; } ///< Get Rect{pos(), size()}
    Size dpi() const { return me().dpi(); } ///< %Display resolution in dots per inch
    DisplayMode nativeMode() const { return me().nativeMode(); } ///< %Native mode for this display
    Size dpcm() const { return me().dpcm(); }  ///< %Display resolution in dots per centimeter
    double diagonal() const { return me().diagonal(); }  ///< %Display diagonal in inch
    bool isHandheld() const { return me().isHandheld(); }  ///< %Guess if this is a handheld device

    String toString() const
    {
        return Format{}
            << "Display {" << nl
            << "  pos       : " << size() << nl
            << "  size      : " << pos() << nl
            << "  dpi       : " << dpi() << nl
            << "  nativeMode: " << nativeMode() << nl
            << "}";
    }

protected:
    friend class DisplayManager;

    struct State: public Object::State
    {
        State(Point pos_, Size size_, Size dpi_, DisplayMode nativeMode_):
            pos{pos_},
            size{size_},
            dpi{dpi_},
            nativeMode{nativeMode_}
        {}

        Property<Point> pos;
        Property<Size> size;
        Property<Size> dpi;
        Property<DisplayMode> nativeMode;

        const Property<Size> dpcm { [this]{ return dpi() / 2.54; } };
        const Property<double> diagonal { [this]{ return (size() / dpi()).abs(); } };
        const Property<bool> isHandheld { [this]{ return diagonal() < 11; } };
    };

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
