/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/uiTypes>

namespace cc {

/** \class Theme cc/Theme
  * \ingroup ui
  * \brief User interface styling theme
  */
class Theme: public Object
{
public:
    Theme() = default; ///< Create a null theme

    Color primaryColor() const { return me().primaryColor(); } ///< Primary application color
    Color secondaryColor() const { return me().secondaryColor(); } ///< Secondary application color
    Color alertColor() const { return me().alertColor(); } ///< %Warning/error color
    Color statusBarColor() const { return me().statusBarColor(); } ///< Status bar background color
    Color windowColor() const { return me().windowColor(); } ///< %Window background color
    Color popupColor() const { return me().popupColor(); } ///< %Popup window background color

    Color appBarColor(bool pressed = false) const { return me().appBarColor(pressed); } ///< %Application bar background color
    Color appBarTextColor() const { return me().appBarTextColor(); } ///< %Application bar foreground color
    Color appBarShadowColor() const { return me().appBarShadowColor(); } ///< Color of the drop shadow under the application bar

    Color titleTextColor() const { return me().titleTextColor(); } ///< %Title text color
    Color focusTextColor() const { return me().focusTextColor(); } ///< %Text color for an item with active input focus
    Color primaryTextColor() const { return me().primaryTextColor(); } ///< %Default text color
    Color secondaryTextColor() const { return me().secondaryTextColor(); } ///< Alternative text color
    Color inactiveTextColor() const { return me().inactiveTextColor(); } ///< %Text color for inactive/disabled controls

    Color inputLineColor() const { return me().inputLineColor(); } ///< %Default color of the underline of input fields
    Color hoverInputLineColor() const { return me().hoverInputLineColor(); } ///< %Color of the input line when the mouse is hovering over it
    Color pressedInputLineColor() const { return me().pressedInputLineColor(); } ///< %Color of the input line when pressed by the user
    Color focusInputLineColor() const { return me().focusInputLineColor(); } ///< %Color of the input line when input field has keyboard input focus
    Color textCursorColor() const { return me().textCursorColor(); } ///< %Color of the text input cursor
    Color textSelectionColor() const { return me().textSelectionColor(); } ///< %Text color of text selections
    Color textSelectionPaper() const { return me().textSelectionPaper(); } ///< %Background color of text selections

    Color dividerColor() const { return me().dividerColor(); } ///< %Divider color

    Color inputFieldFillColor() const { return me().inputFieldFillColor(); } ///< %Background color of input fields
    Color inputFieldFillColor(bool pressed) const { return me().inputFieldFillColor(pressed); } ///< %Background color of input fields

    Color itemHighlightColor() const { return me().itemHighlightColor(); } ///< %Item highlight background color

    Color sliderKnobColor() const { return me().sliderKnobColor(); } ///< %Color of a slider knob
    Color sliderKnobShadowColor() const { return me().sliderKnobShadowColor(); }
    Color sliderActiveTrackColor() const { return me().sliderActiveTrackColor(); } ///< %Color of the active slider track
    Color sliderInactiveTrackColor() const { return me().sliderInactiveTrackColor(); } ///< %Color of the inactive slider track
    Color sliderFocusColor() const { return me().sliderFocusColor(); } ///< %Color of the slider knob focus indicator

    Color switchKnobColor(bool on) const { return me().switchKnobColor(on); }
    Color switchKnobShadowColor(bool on) const { return me().switchKnobShadowColor(on); }
    Color switchTrackColor(bool on) const { return me().switchTrackColor(on); }
    Color switchFocusColor() const { return me().switchFocusColor(); }

    Color checkboxColor(bool on) const { return me().checkboxColor(on); }
    Color checkboxFocusColor() const { return me().checkboxFocusColor(); }

    Color radioboxColor(bool on) const { return me().radioboxColor(on); }
    Color radioboxFocusColor() const { return me().radioboxFocusColor(); }

    Color pushButtonColor(PushButtonStyle style) const { return me().pushButtonColor(style); }
    Color pushButtonTextColor(PushButtonStyle style) const { return me().pushButtonTextColor(style); }
    Color pushButtonShadowColor(PushButtonStyle style) const { return me().pushButtonShadowColor(style); }
    Color pushButtonFocusColor(PushButtonStyle style) const { return me().pushButtonFocusColor(style); }

    Color touchButtonColor(TouchButtonStyle style, bool pressed) const { return me().touchButtonColor(style, pressed); }
    Color touchButtonTextColor(TouchButtonStyle style, bool pressed) const { return me().touchButtonTextColor(style, pressed); }

    Color flickableIndicatorColor() const { return me().flickableIndicatorColor(); }
    Color flickableIndicatorHandleColor() const { return me().flickableIndicatorHandleColor(); }

    Color clockDialClockFaceColor(bool pressed) const { return me().clockDialClockFaceColor(pressed); }
    Color clockDialClockFaceTextColor(bool pressed) const { return me().clockDialClockFaceTextColor(pressed); }
    Color clockDialCurrentValueColor(bool pressed) const { return me().clockDialCurrentValueColor(pressed); }
    Color clockDialCurrentValueTextColor(bool pressed) const { return me().clockDialCurrentValueTextColor(pressed); }

    double defaultFontSize() const { return me().defaultFontSize(); } ///< Default font size
    double defaultFixedFontSize() const { return me().defaultFixedFontSize(); } ///< Default font size for the default fixed pitch fonts
    double smallFontSize() const { return me().smallFontSize(); } ///< Secondary small font size
    double textCursorWidth() const { return me().textCursorWidth(); } ///< Width of the text cursor in text input controls

protected:
    struct State: public Object::State
    {
        virtual Color primaryColor() const = 0;
        virtual Color secondaryColor() const = 0;
        virtual Color alertColor() const = 0;

        virtual Color statusBarColor() const = 0;
        virtual Color windowColor() const = 0;
        virtual Color popupColor() const = 0;

        virtual Color appBarColor(bool pressed) const = 0;
        virtual Color appBarTextColor() const { return titleTextColor(); }
        virtual Color appBarShadowColor() const = 0;

        virtual Color titleTextColor() const = 0;
        virtual Color focusTextColor() const = 0;
        virtual Color primaryTextColor() const = 0;
        virtual Color secondaryTextColor() const = 0;
        virtual Color inactiveTextColor() const = 0;

        virtual Color inputLineColor() const = 0;
        virtual Color hoverInputLineColor() const = 0;
        virtual Color pressedInputLineColor() const = 0;
        virtual Color focusInputLineColor() const = 0;
        virtual Color textCursorColor() const = 0;
        virtual Color textSelectionColor() const = 0;
        virtual Color textSelectionPaper() const = 0;

        virtual Color dividerColor() const = 0;

        virtual Color inputFieldFillColor() const = 0;
        virtual Color inputFieldFillColor(bool pressed) const { return inputFieldFillColor(); }

        virtual Color itemHighlightColor() const = 0;

        virtual Color sliderKnobColor() const = 0;
        virtual Color sliderKnobShadowColor() const = 0;
        virtual Color sliderActiveTrackColor() const = 0;
        virtual Color sliderInactiveTrackColor() const = 0;
        virtual Color sliderFocusColor() const = 0;

        virtual Color switchKnobColor(bool on) const = 0;
        virtual Color switchKnobShadowColor(bool on) const = 0;
        virtual Color switchTrackColor(bool on) const = 0;
        virtual Color switchFocusColor() const = 0;

        virtual Color checkboxColor(bool on) const { return on ? primaryColor() : secondaryTextColor(); }
        virtual Color checkboxFocusColor() const { return switchFocusColor(); }

        virtual Color radioboxColor(bool on) const { return on ? primaryColor() : secondaryTextColor(); }
        virtual Color radioboxFocusColor() const { return switchFocusColor(); }

        virtual Color pushButtonColor(PushButtonStyle style) const = 0;
        virtual Color pushButtonTextColor(PushButtonStyle style) const = 0;
        virtual Color pushButtonShadowColor(PushButtonStyle style) const = 0;
        virtual Color pushButtonFocusColor(PushButtonStyle style) const { return Color{}; }

        virtual Color touchButtonColor(TouchButtonStyle style, bool pressed) const = 0;
        virtual Color touchButtonTextColor(TouchButtonStyle style, bool pressed) const = 0;

        virtual Color flickableIndicatorColor() const { return inputFieldFillColor(); }
        virtual Color flickableIndicatorHandleColor() const { return sliderKnobColor(); }

        virtual Color clockDialClockFaceColor(bool pressed) const { return inputFieldFillColor(); }
        virtual Color clockDialClockFaceTextColor(bool pressed) const { return primaryTextColor(); }
        virtual Color clockDialCurrentValueColor(bool pressed) const { return sliderKnobColor(); }
        virtual Color clockDialCurrentValueTextColor(bool pressed) const { return titleTextColor(); }

        virtual double defaultFontSize() const { return 16; }
        virtual double defaultFixedFontSize() const { return 16; }
        virtual double smallFontSize() const { return 12; }
        virtual double textCursorWidth() const { return dp(1); }
    };

    explicit Theme(State *newState):
        Object{newState}
    {}

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
