/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/Fun>

namespace cc {

class Application;
class TimeoutRequest;

/** \class Timer cc/Timer
  * \ingroup ui
  * \brief Inverval timer
  * \see System::now(), Date
  */
class Timer final: public Object
{
public:
    /** Create a null timer
      */
    Timer() = default;

    /** Create a repeating interval timer
      * \param interval %Interval in which the timeout signal is triggered
      */
    explicit Timer(double interval);

    /** Register function \a f to be called on timeout
      */
    Timer &onTimeout(Fun<void()> &&f);

    /** Start timer
      */
    Timer &start();

    /** Start timer at a later \a startTime
      */
    Timer &startAt(double startTime);

    /** Start timer after a giving \a delayTime
      */
    Timer &startIn(double delayTime);

    /** Stop the timer
      */
    void stop();

    /** %Timer is active and generates timeout signals
      */
    bool isActive() const;

    /** The first time the timer emits the timeout signal
      */
    double firstTime() const;

    /** Beginning of the first timeout interval
      */
    double startTime() const;

    /** %Time between two timeout signal emissions
      */
    double interval() const;

    /** Convenience method to run the application loop
      */
    int run();

private:
    friend class Application;
    friend class TimeoutRequest;

    struct State;

    State &me();
    const State &me() const;

    State *operator->();
    const State *operator->() const;
};

} // namespace cc
