/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class Checkbox cc/Checkbox
  * \ingroup ui
  * \brief %CheckboxControl with associated label
  */
class Checkbox final: public Control
{
public:
    /** Create primordial checkbox
      */
    Checkbox();

    /** Create a new checkbox
      */
    explicit Checkbox(const String &text);

    /** Get a weak reference in \a self
      */
    Checkbox &associate(Out<Checkbox> self);

    String text() const; ///< Get text
    Checkbox &text(const String &newValue); ///< %Set text
    Checkbox &text(Definition<String> &&f); ///< Define text

    bool value() const; ///< Get value
    Checkbox &value(bool newValue); ///< %Set value

    Checkbox &onValueChanged(Fun<void()> &&f); ///< Get notified when value changes

    /** Group this checkbox under \a groupLeader
      */
    Checkbox &groupUnder(const Checkbox &groupLeader);

private:
    struct State;

    State &me();
    const State &me() const;
    State *operator->();
};

} // namespace cc
