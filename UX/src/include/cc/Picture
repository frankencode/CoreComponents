/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/View>
#include <cc/Visual>

namespace cc {

/** \class Picture cc/Picture
  * \ingroup ui
  * \brief Glyph visual or other user-defined image optionally toned to specifc foreground color
  * \see GlyphVisual, Icon, Image
  */
class Picture: public View
{
public:
    /** Create a premordial picture
      */
    Picture();

    /** Create a new picture
      * \param visual Visual which paints the picture
      * \param color Default color to used for painting the picture
      */
    explicit Picture(const Visual &visual, Color color = Color{});

    /** Create a new picture
      * \param ch %Icon code
      * \param size %Size in pixel
      * \param color %Foreground color
      */
    Picture(Icon ch, double size = 0, Color color = Color{});

    /** Create a new picture from \a image toned to color \a color
      */
    Picture(const Image &image, Color color = Color{});

    /** Get a weak reference in \a self
      */
    Picture &associate(Out<Picture> self);

    Visual visual() const { return me().visual(); } ///< Get the visual
    Picture &visual(const Visual &newValue) { me().visual(newValue); return *this; } ///< %Set the visual
    Picture &visual(Definition<Visual> &&f) { me().visual(move(f)); return *this; } ///< %Define the visual

    Color color() const { return me().color(); } ///< Get the foreground color
    Picture &color(const Color &newValue) { me().color(newValue); return *this; } ///< %Set the foreground color
    Picture &color(Definition<Color> &&f) { me().color(move(f)); return *this; } ///< %Define the foreground color

private:
    struct State: public View::State
    {
        State(const Visual &initVisual = Visual{}, Color initColor = Color{});
        explicit State(const Image &image, Color initColor = Color{});

        Property<Visual> visual;
        Property<Color> color;
    };

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc
