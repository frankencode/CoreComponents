/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/InputControl>
#include <cc/Picture>

namespace cc {

/** \class Button cc/Button
  * \ingroup ui
  * \brief Floating action button (FAB)
  * \todo field definition or negative touch margins ("activeMargin"?-)
  */
class Button: public InputControl
{
public:
    /** Create a primordial button
      */
    Button();

    /** Create a new button
      */
    explicit Button(ButtonStyle flavor, const String &text = String{}, const Picture &icon = Picture{});

    /** Create a new button
      */
    Button(ButtonStyle flavor, const Picture &icon);

    /** Create a regular button
      */
    Button(const String &text, const Picture &icon = Picture{});

    /** Create a regular button
      */
    explicit Button(const Picture &icon);

    /** Get a weak reference in \a self
      */
    Button &associate(Out<Button> self);

    Button &icon(const Picture &newValue); ///< %Set icon

    Color color() const; ///< Get button fill color
    Button &color(Color newValue); ///< %Set button fill color
    Button &color(Definition<Color> &&f); ///< Define button fill color

    Color textColor() const; ///< Get foreground color
    Button &textColor(Color newValue); ///< %Set foreground color
    Button &textColor(Definition<Color> &&f); ///< Define foreground color

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
