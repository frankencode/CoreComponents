/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Action>
#include <cc/View>

namespace cc {

/** \class Dialog cc/Dialog
  * \ingroup ui
  * \brief Generic dialog
  * \todo Add support for Dialog::open() to open a modal dialog in a separate window on non-handheld systems.
  */
class Dialog: public View
{
public:
    /** Create a null dialog
      */
    Dialog() = default;

    /** Get a weak reference in \a self
      */
    Dialog &associate(Out<Dialog> self);

    /** Add an action to this dialog
      */
    Dialog &addAction(const Action &action);

    /** Open this dialog
      */
    Dialog &open();

    /** Close this dialog
      */
    void close();

protected:
    /** Internal state
      */
    struct State: public View::State
    {
        /** Create new internal state
          */
        State();

        /** Add action to the button area
          */
        void addAction(const Action &action);

        /** %Button area at the bottom
          */
        View buttonArea() const { return buttonArea_; }

        /** Close this dialog
          */
        void close();

    private:
        View buttonArea_;
    };

    /** Create a primordial dialog
      */
    explicit Dialog(CreateState onDemand):
        View{onDemand}
    {}

    /** Create new dialog
      */
    explicit Dialog(State *newState):
        View{newState}
    {}

    State &me();
    const State &me() const;
};

} // namespace cc
