/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/http/HttpServerSecurity>
#include <cc/http/DeliveryService>
#include <cc/http/LoggingInstance>
#include <cc/net/SocketAddress>

namespace cc {
namespace http {

using cc::net::SocketAddress;
using cc::net::SocketAddressList;

class DeliveryInstance;

class NodeConfig: public Object
{
public:
    static Ref<MetaObject> parse(const String &text);
    static Ref<NodeConfig> load(const MetaObject *config);
    static const MetaObject *prototype();

    static Ref<NodeConfig> load(const String &path);
    static Ref<NodeConfig> create();

    void addDirectoryInstance(const String &path);
    void addEchoInstance();

    const SocketAddressList *address() const { return address_; }

    bool forceSecureTransport() const { return forceSecureTransport_; }
    int securePort() const { return securePort_; }

    String user() const { return user_; }
    String group() const { return group_; }
    String version() const { return version_; }
    bool daemon() const { return daemon_; }
    String daemonName() const { return daemonName_; }
    String pidPath() const { return pidPath_; }
    int concurrency() const { return concurrency_; }
    int serviceWindow() const { return serviceWindow_; }
    int connectionLimit() const { return connectionLimit_; }
    double connectionTimeout() const { return connectionTimeout_; }

    const HttpServerSecurity *security() const { return securityConfig_; }

    const LoggingInstance *errorLoggingInstance() const { return errorLoggingInstance_; }
    const LoggingInstance *accessLoggingInstance() const { return accessLoggingInstance_; }

    DeliveryInstances deliveryInstances() const { return deliveryInstances_; }

    const DeliveryInstance *selectService(const String &host, const String &uri = "") const;

private:
    NodeConfig(const MetaObject *config);

    Ref<DeliveryInstance> createDeliveryInstance(const DeliveryService *service, const MetaObject *config) const;

    Ref<SocketAddressList> address_;
    bool forceSecureTransport_;
    int securePort_;
    String user_;
    String group_;
    String version_;
    bool daemon_;
    String daemonName_;
    String pidPath_;
    int concurrency_;
    int serviceWindow_;
    int connectionLimit_;
    double connectionTimeout_;

    Ref<const HttpServerSecurity> securityConfig_;

    Ref<const LoggingInstance> errorLoggingInstance_;
    Ref<const LoggingInstance> accessLoggingInstance_;

    DeliveryInstances deliveryInstances_;
};

}} // namespace cc::http
