/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/http/logging>
#include <cc/meta/MetaObject>
#include <cc/Stream>

namespace cc {
namespace http {

class HttpServerConnection;
class DispatchLoggingInstance;
class StatusLogStream;

using cc::meta::MetaObject;

class LoggingInstance: public Object
{
public:
    static Ref<LoggingInstance> load(const MetaObject *config);

    LoggingLevel verbosity() const;

    Stream errorStream() const { return errorStream_; }
    Stream warningStream() const { return warningStream_; }
    Stream noticeStream() const { return noticeStream_; }
    Stream infoStream() const { return infoStream_; }
    Stream debugStream() const { return debugStream_; }

    virtual void logDelivery(const HttpServerConnection *client, int statusCode, size_t bytesWritten = 0, const String &statusMessage = "") const = 0;
    virtual void logMessage(const String &message, LoggingLevel level = LoggingLevel::Default) const = 0;

protected:
    friend class StatusLogStream;

    LoggingInstance(const MetaObject *config);

private:
    LoggingLevel verbosity_;

    Stream errorStream_;
    Stream warningStream_;
    Stream noticeStream_;
    Stream infoStream_;
    Stream debugStream_;
};

using LoggingInstances = List< Ref<const LoggingInstance> >;

}} // namespace cc::http
