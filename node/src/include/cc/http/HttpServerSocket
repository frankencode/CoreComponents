/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/http/HttpSocket>

namespace cc {
namespace http {

using cc::net::StreamSocket;

class ClientHelloContext;
class HttpServerConnection;
class DeliveryInstance;
class NodeConfig;
class LoggingInstance;
class SecurityCache;

class HttpServerSocket: public HttpSocket
{
public:
    class Instance: public HttpSocket::Instance
    {
    public:
        bool isSecure() const { return mode_ & Secure; }
        void upgradeToSecureTransport();

    private:
        friend class HttpServerSocket;
        friend class ClientHelloContext;
        friend class HttpServerConnection;

        static int initialMode(const StreamSocket &socket, const NodeConfig *config);

        Instance(StreamSocket &listeningSocket, const NodeConfig *nodeConfig, SecurityCache *securityCache);
        ~Instance();

        const NodeConfig *nodeConfig() const { return nodeConfig_; }
        const LoggingInstance *errorLoggingInstance() const;

        static int onClientHello(gnutls_session_t session);
        const DeliveryInstance *handshake();

        void initSession();

        bool waitInput() override;
        void ioException(Exception &ex) const override;

        const NodeConfig *nodeConfig_;
        SecurityCache *securityCache_;
        double t0_;
        double te_;
    };

    HttpServerSocket(StreamSocket &listeningSocket, const NodeConfig *nodeConfig, SecurityCache *securityCache);

    Instance *operator->() const { return my<Instance>(); }
};


}} // namespace cc::http
