/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/http/HttpServerConnection>
#include <cc/http/LoggingInstance>
#include <cc/Thread>
#include <cc/PriorityChannel>
#include <cc/Channel>

namespace cc {
namespace http {

class DeliveryWorker;
class DeliveryInstance;
class DeliveryDelegate;
class HttpResponseGenerator;

typedef PriorityChannel< Ref<HttpServerConnection> > PendingConnections;
typedef Channel< Ref<ConnectionInfo> > ClosedConnections;

class DeliveryWorker: public Thread
{
public:
    static Ref<DeliveryWorker> create(const NodeConfig *nodeConfig, PendingConnections *pendingConnections, const ClosedConnections &closedConnections);

    const NodeConfig *nodeConfig() const { return nodeConfig_; }

    const DeliveryInstance *deliveryInstance() const { return deliveryInstance_; }
    HttpServerConnection *client() const { return client_; }

    HttpResponseGenerator *response() const;
    void autoSecureForwardings();
    void closeConnection();

private:
    DeliveryWorker(const NodeConfig *nodeConfig, PendingConnections *pendingConnections, const ClosedConnections &closedConnections);
    ~DeliveryWorker();

    const LoggingInstance *errorLoggingInstance() const;
    const LoggingInstance *accessLoggingInstance() const;

    void run() final;

    Ref<const DeliveryInstance> deliveryInstance_;
    Ref<DeliveryDelegate> deliveryDelegate_;

    const NodeConfig *nodeConfig_;
    Ref<PendingConnections> pendingConnections_;
    ClosedConnections closedConnections_;

    Ref<HttpServerConnection> client_;
    Ref<HttpResponseGenerator> response_;
};

}} // namespace cc::http
