/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/http/LoggingService>
#include <cc/meta/MetaProtocol>
#include <cc/MapValue>

namespace cc { template<class, class> class Map; }
namespace cc { template<class> class Singleton; }

namespace cc {
namespace http {

using meta::MetaProtocol;

class LoggingRegistry: public Object
{
public:
    static LoggingRegistry *instance();

    void registerService(LoggingService *service);

    LoggingService *serviceByName(const String &name) const;

    MetaProtocol *loggingProtocol() const;

private:
    friend class Singleton<LoggingRegistry>;

    LoggingRegistry();

    MapValue<String, Ref<LoggingService> > serviceByName_;
    Ref<MetaProtocol> loggingProtocol_;
};

}} // namespace cc::http
