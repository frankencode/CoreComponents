/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/meta/MetaProtocol>

namespace cc { template<class> class Singleton; }

namespace cc {
namespace node {

using cc::meta::MetaObject;
using cc::meta::MetaProtocol;

class NodeConfig;
class DeliveryRegistry;

class NodeConfigProtocol: public MetaProtocol
{
public:
    static NodeConfigProtocol *instance();

    const MetaObject *nodePrototype() const { return nodePrototype_; }

private:
    friend class Singleton<NodeConfigProtocol>;
    // friend class NodeConfig;
    friend class DeliveryRegistry;

    void registerService(const MetaObject *configPrototype);

    NodeConfigProtocol();
    Ref<MetaProtocol> nodeProtocol_;
    Ref<MetaObject> nodePrototype_;
};

}} // namespace cc::node
