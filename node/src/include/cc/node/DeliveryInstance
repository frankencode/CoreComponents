/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/node/HttpServerSecurity>
#include <cc/node/LoggingInstance>
#include <cc/meta/MetaObject>
#include <cc/glob/Pattern>
#include <cc/List>

namespace cc {
namespace node {

using cc::meta::MetaObject;
using cc::glob::Pattern;

class DeliveryDelegate;
class DeliveryWorker;
class MediaTypeDatabase;
class NodeConfig;

class DeliveryInstance: public Object
{
public:
    virtual Ref<DeliveryDelegate> createDelegate(DeliveryWorker *worker) const = 0;

    String serviceName() const { return serviceName_; }

    int requestLimit() const { return requestLimit_; }
    int requestPayloadLimit() const { return requestPayloadLimit_; }
    Pattern host() const { return host_; }
    Pattern uri() const { return uri_; }

    const HttpServerSecurity *security() const { return security_; }
    const MediaTypeDatabase *mediaTypeDatabase() const { return mediaTypeDatabase_; }

    const LoggingInstance *errorLoggingInstance() const { return errorLoggingInstance_; }
    const LoggingInstance *accessLoggingInstance() const { return accessLoggingInstance_; }

protected:
    friend class NodeConfig;

    DeliveryInstance(const MetaObject *config);
    ~DeliveryInstance();

    String serviceName_;

    int requestLimit_;
    int requestPayloadLimit_;
    Pattern host_;
    Pattern uri_;

    Ref<const HttpServerSecurity> security_;
    Ref<const MediaTypeDatabase> mediaTypeDatabase_;

    Ref<const LoggingInstance> errorLoggingInstance_;
    Ref<const LoggingInstance> accessLoggingInstance_;
};

typedef List< Ref<const DeliveryInstance> > DeliveryInstances;

}} // namespace cc::node
