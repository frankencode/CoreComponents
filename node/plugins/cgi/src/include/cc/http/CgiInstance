/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/net/SocketAddress>
#include <cc/http/DeliveryInstance>

namespace cc {
namespace http {

using cc::net::SocketAddressList;

class CgiInstance: public virtual DeliveryInstance
{
public:
    static Ref<CgiInstance> create(const MetaObject *config);

    Ref<DeliveryDelegate> createDelegate(DeliveryWorker *worker) const override;

    String script() const { return script_; }
    StringList server() const { return server_; }
    VariantMap environment() const { return static_cast<VariantMap::Instance *>(environment_); }

    SocketAddressList serverAddress() const { return serverAddress_; }

    int randomSeed() const { // FIXME: move to point of use
        static int counter = 0;
        return counter++;
    }

protected:
    CgiInstance(const MetaObject *config);

    String script_;
    StringList server_;
    Ref<MetaObject> environment_;

    SocketAddressList serverAddress_;
};

}} // namespace cc::http
