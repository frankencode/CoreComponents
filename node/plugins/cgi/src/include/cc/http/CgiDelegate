/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/FileStatus>
#include <cc/http/DeliveryDelegate>

namespace cc {
namespace http {

class CgiInstance;

class CgiDelegate: public DeliveryDelegate
{
public:
    static Ref<CgiDelegate> create(DeliveryWorker *worker);

    void process(const HttpRequest *request) override;
    bool process(const HttpRequest *request, const FileStatus *status, const string &documentRoot = "");
    void process(const HttpRequest *request, const string &script, const string &documentRoot = "");

private:
    CgiDelegate(DeliveryWorker *worker);

    typedef Map<string, string> EnvMap;

    Ref<EnvMap> makeEnv(const HttpRequest *request, CharArray *payload) const;
    void logEnv(EnvMap *env);
    string compileHeader(const HttpRequest *request, CharArray *payload) const;
    static string urlDecode(const HttpRequest *request, CharArray *payload);
    static string wrapHttp(const string &header);

    Ref<const CgiInstance> cgiInstance_;
    int nextPeer_;
};

}} // namespace cc::http
