/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <sys/types.h>
#include <cc/String>

namespace cc {
namespace tar {

class ArchiveReader;

class ArchiveEntry: public Object
{
public:
    enum Type {
        Regular     = '0',
        Link        = '1',
        Symlink     = '2',
        CharDevice  = '3',
        BlockDevive = '4',
        Directory   = '5',
        Fifo        = '6',
        MinType     = Regular,
        MaxType     = Fifo
    };

    static Ref<ArchiveEntry> create() {
        return new ArchiveEntry();
    }

    int type() const { return type_; }
    String path() const { return path_; }
    String linkPath() const { return linkPath_; }
    double lastModified() const { return lastModified_; }
    uid_t userId() const { return userId_; }
    gid_t groupId() const { return groupId_; }
    String userName() const { return userName_; }
    String groupName() const { return groupName_; }
    int mode() const { return mode_; }
    off_t offset() const { return offset_; }
    off_t size() const { return size_; }

    int type_;
    String path_;
    String linkPath_;
    double lastModified_;
    uid_t userId_;
    gid_t groupId_;
    String userName_;
    String groupName_;
    int mode_;
    off_t offset_;
    off_t size_;

private:
    ArchiveEntry():
        type_('0')
    {}
};

}} // namespace cc::tar
