/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/FileStatus>
#include <cc/Map>
#include <cc/tar/ArchiveWriter>

namespace cc {
namespace tar {

class TarWriter: public ArchiveWriter
{
public:
    static Ref<TarWriter> open(Stream *sink);

    void writeFile(const String &path) override;

private:
    TarWriter(Stream *sink);
    ~TarWriter();
    void writeFile(String path, const FileStatus *status);
    void writePadding(off_t unpaddedSize);

    Ref<Stream> sink_;

    class FileId {
    public:
        FileId()
        {}

        FileId(const FileStatus *status):
            deviceId_{status->deviceId()},
            inodeNumber_{status->inodeNumber()}
        {}

        bool operator<(const FileId &b) const {
            if (deviceId_ < b.deviceId_) return true;
            if (b.deviceId_ < deviceId_) return false;
            return inodeNumber_ < b.inodeNumber_;
        }

    private:
        dev_t deviceId_;
        ino_t inodeNumber_;
    };

    typedef Map<FileId, String> HardLinks;

    String zero_;
    Ref<HardLinks> hardLinks_;
    Ref<FileStatus> longPathStatus_;
    Ref<FileStatus> longLinkStatus_;
};

}} // namespace cc::tar
