#! /bin/bash

. $(dirname $0)/utility

function configure-variant() {
	CWD_SAVED=$PWD
	mkdir -p $BUILD_PREFIX/$PACKAGE_NAME/$1
	cd $BUILD_PREFIX/$PACKAGE_NAME/$1
	if [ $CONFIGURE -eq 0 ]; then
		if [ -e CMakeCache.txt ]; then
			return 0
		fi
	fi
	echo
	msg "Configuring $PWD..."
	echo "" > CMakeCacheInit.txt
	if [ "$DEPENDS_ON" != "" ]; then
		for d in "$DEPENDS_ON"; do
			$d/cmake/wizard/build cache >> CMakeCacheInit.txt
		done
	fi
	if echo $1|grep debug > /dev/null; then
		cat 1>>CMakeCacheInit.txt <<-FIN
			SET(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)
FIN
	else
		cat 1>>CMakeCacheInit.txt <<-FIN
			SET(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)
FIN
	fi
	if [ $CONTAINS_LIBRARIES -ne 0 ]; then
		if echo $1|grep static > /dev/null; then
			cat 1>>CMakeCacheInit.txt <<-FIN
				SET(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
FIN
		else
			cat 1>>CMakeCacheInit.txt <<-FIN
				SET(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
FIN
		fi
	fi
	if [ $(uname) == "Darwin" ]; then
		[ "$OSX_SYSROOT" == "" ] && OSX_SYSROOT="/Developer/SDKs/MacOSX10.5.sdk"
		[ "$OSX_TARGET" == "" ] && OSX_TARGET="10.5"
		[ "$OSX_ARCHS" == "" ] && OSX_ARCHS="x86_64;i386"
		cat 1>>CMakeCacheInit.txt <<-FIN
			SET(CMAKE_OSX_SYSROOT $OSX_SYSROOT CACHE PATH "" FORCE)
			SET(CMAKE_OSX_DEPLOYMENT_TARGET $OSX_TARGET CACHE STRING "" FORCE)
FIN
		if ! echo $1|grep debug > /dev/null; then
			cat 1>>CMakeCacheInit.txt <<-FIN
				SET(CMAKE_OSX_ARCHITECTURES $OSX_ARCHS CACHE STRING "" FORCE)
FIN
		fi
	fi
	# echo "CMakeCacheInit.txt:"
	# cat CMakeCacheInit.txt
	CMD="cmake -C CMakeCacheInit.txt $PACKAGE_PATH"
	echo $CMD
	$CMD || err
	cd $CWD_SAVED
}

function configure() {
	if [ $BUILD_DEBUG -ne 0 ]; then
		if [ $BUILD_SHARED -ne 0 ]; then configure-variant debug || err; fi
		if [ $BUILD_STATIC -ne 0 ]; then configure-variant debug-static || err; fi
	fi
	if [ $BUILD_RELEASE -ne 0 ]; then
		if [ $BUILD_SHARED -ne 0 ]; then configure-variant release || err; fi
		if [ $BUILD_STATIC -ne 0 ]; then configure-variant release-static || err; fi
	fi
}

function build-variant() {
	CWD_SAVED=$PWD
	cd $BUILD_PREFIX/$PACKAGE_NAME/$1
	echo
	msg "Building $PWD..."
	make $MAKEARGS
	ret=$?
	cd $CWD_SAVED
	return $ret
}

function build() {
	if [ $BUILD_DEBUG -ne 0 ]; then
		if [ $BUILD_SHARED -ne 0 ]; then build-variant debug || err; fi
		if [ $BUILD_STATIC -ne 0 ]; then build-variant debug-static || err; fi
	fi
	if [ $BUILD_RELEASE -ne 0 ]; then
		if [ $BUILD_SHARED -ne 0 ]; then build-variant release || err; fi
		if [ $BUILD_STATIC -ne 0 ]; then build-variant release-static || err; fi
	fi
}

function clean-configure() {
	PREFIX=$BUILD_PREFIX/$PACKAGE_NAME
	if [ -d $PREFIX ]; then
		echo
		msg "Cleaning configuration in $PREFIX..."
		DIRS="debug release debug-static release-static"
		for d in $DIRS; do
			p=$PREFIX/$d
			if [ -d $p ]; then
				for c in $(find $p -name CMakeCache.txt); do
					CMD="rm -rf $c"
					echo "$CMD"
					$CMD || err
				done
			fi
		done
	fi
}

function clean-build() {
	PREFIX=$BUILD_PREFIX/$PACKAGE_NAME
	if [ -d $PREFIX ]; then
		echo
		msg "Cleaning build files in $PREFIX..."
		DIRS="debug release debug-static release-static"
		for d in $DIRS; do
			p=$PREFIX/$d
			if [ -d $p ]; then
				#CWD_SAVED=$PWD
				#cd $p
				#CMD="make clean"
				CMD="rm -rf $p"
				echo "$CMD in $p"
				$CMD || err
				#cd $CWD_SAVED
			fi
		done
	fi
}

function build-cache() {
	PREFIX=$BUILD_PREFIX/$PACKAGE_NAME
	PROJECT_NAME=$(./project-name)
	LIBRARY_NAME=$(basename $(dirname $(egrep --ignore-case --files-with-matches --regexp='ADD_LIBRARY' $(find $PACKAGE_PATH -name CMakeLists.txt))))
	echo "SET(CMAKE_MODULE_PATH $PACKAGE_PATH/cmake CACHE PATH \"\" FORCE)"
	echo "SET($(echo $PROJECT_NAME)_INCLUDE_DIR $PACKAGE_PATH CACHE PATH \"\" FORCE)"
	
	BUILD_STATIC=$(echo $(basename $CWD_SAVED)|egrep --regexp='static' > /dev/null && echo 1 || echo 0)
	BUILD_RELEASE=$(echo $(basename $CWD_SAVED)|egrep --regexp='release' > /dev/null && echo 1 || echo 0)
	
	SHARED_SUFFIX=".so"
	STATIC_SUFFIX=".a"
	if [ $(uname) == "Darwin" ]; then SHARED_SUFFIX=".dylib"; fi
	[ $BUILD_STATIC -eq 0 ] && [ $BUILD_RELEASE -ne 0 ] && VARIANT="release" && LIBEXT="$SHARED_SUFFIX"
	[ $BUILD_STATIC -eq 0 ] && [ $BUILD_RELEASE -eq 0 ] && VARIANT="debug" && LIBEXT="$SHARED_SUFFIX"
	[ $BUILD_STATIC -ne 0 ] && [ $BUILD_RELEASE -ne 0 ] && VARIANT="release-static" && LIBEXT="$STATIC_SUFFIX"
	[ $BUILD_STATIC -ne 0 ] && [ $BUILD_RELEASE -eq 0 ] && VARIANT="debug-static" && LIBEXT="$STATIC_SUFFIX"
	
	echo "SET($(echo $PROJECT_NAME)_LIBRARY $PREFIX/$VARIANT/lib/lib$LIBRARY_NAME$LIBEXT CACHE PATH \"\" FORCE)"
}

CWD_SAVED=$PWD

if [ "$(dirname $0)" != "." ]; then
	cd $(dirname $0)
fi

CONFIGURE=0
CONFIGURE_CLEAN=0
PACKAGE_PATH=$(./canonical-path ../../..)
PACKAGE_NAME=$(basename $PACKAGE_PATH)
CONTAINS_LIBRARIES=$(./contains-libraries)
BUILD_PREFIX=$(./canonical-path ../../../..)

CLEAN_ONLY=0

. ../../make.conf

if [ $# -gt 0 ]; then
	OK=0
	if [ $# -eq 1 ]; then
		if [ "$1" == "conf-clean" ]; then CONFIGURE_CLEAN=1; CLEAN_ONLY=1; OK=1; fi
		if [ "$1" == "clean" ]; then BUILD_CLEAN=1; CLEAN_ONLY=1; OK=1; fi
		if [ "$1" == "cache" ]; then build-cache; succeed; fi
		if [ "$1" == "help" ]; then
			print-help $(basename $0)
			exit 0
		fi
	fi
	if [ $OK -ne 1 ]; then
		echo "Illegal option syntax, try \"$(basename $0) help\"."
		exit $?
	fi
fi

if [ $BUILD_CLEAN -ne 0 ]; then
	clean-build
elif [ $CONFIGURE_CLEAN -ne 0 ]; then
	clean-configure
fi

if [ $CLEAN_ONLY -eq 0 ]; then
	configure || err
	if [ $BUILD -ne 0 ]; then
		build || err
	fi
fi

succeed
