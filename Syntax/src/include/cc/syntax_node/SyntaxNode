/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/String>
#include <cc/Function>

namespace cc { class SyntaxRule; }
namespace cc { class Token; }

namespace cc::syntax {

/** \class SyntaxNode cc/syntax_node/SyntaxNode
  * \brief %Syntax definition node
  */
class SyntaxNode: public Object
{
public:
    /** Create an null syntax node
      */
    SyntaxNode() = default;

    SyntaxNode(char ch);

    SyntaxNode(const char *s);

    SyntaxNode(const SyntaxRule *rule);

    SyntaxNode(Function<bool(char)> &&match);

    /** Match \a text at \a offset against this node
      * \return End of match (offset of next character beyond the match), or -1 if match failed
      */
    long matchNext(const String &text, long offset, Token &production) const
    {
        return me().matchNext(text, offset, production);
    }

    /** Match length for this node (or -1 if variable)
      */
    long matchLength() const
    {
        return me().matchLength();
    }

    /** %Hint for generating syntax error messages (Expect failed)
      */
    String hint() const { return me().hint(); }

    /** Convert to a human-readable form
      */
    List<String> explain() const { return me().explain(); }

protected:
    friend class Object;
    friend class SyntaxDefinition;

    struct State: public Object::State
    {
        virtual long matchNext(const String &text, long offset, Token &production) const = 0;
        virtual long matchLength() const = 0;
        virtual String hint() const { return String{}; }
        virtual void decycle();

        virtual List<String> explain() const = 0;
    };

    explicit SyntaxNode(State *newState):
        Object{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::syntax
