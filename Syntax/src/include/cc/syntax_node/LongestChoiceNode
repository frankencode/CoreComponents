/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/syntax_node/SyntaxNode>
#include <cc/Array>

namespace cc::syntax {

/** \class LongestChoiceNode cc/syntax_node/LongestChoiceNode
  * \brief Try all sub-expression choices and produce the longest match (without considering the rest of the expression).
  * \note The ChoiceNode does not take into account the subsequent syntax nodes to resolve ambiguity in matching the entire text.
  */
class LongestChoiceNode final: public SyntaxNode
{
public:
    /** \param choices Sub-expresssion choices
      */
    explicit LongestChoiceNode(std::initializer_list<SyntaxNode> choices);

    /** \param choices Sub-expresssion choices
      */
    explicit LongestChoiceNode(const Array<SyntaxNode> &choices);

    Array<SyntaxNode> choices() const;

private:
    struct State;

    const State &me() const;
};

} // namespace cc::syntax
