/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/syntax/SyntaxNode>

namespace cc {

class Token;

/** \class SyntaxRule cc/SyntaxRule
  * \ingroup syntax
  * \brief Syntactic rule within a syntax definition.
  */
class SyntaxRule: public syntax::SyntaxNode
{
public:
    /** Create a null syntax rule
      */
    SyntaxRule() = default;

    /** Create a syntax rule
      */
    explicit SyntaxRule(const SyntaxNode &entry);

    /** Create a syntax rule
      */
    SyntaxRule(const String &name, const SyntaxNode &entry);

    String name() const; ///< Rule name
    void setName(const String &newName); ///< %Set the rule name

    SyntaxNode entry() const; ///< %Root node

    Object metaData() const; ///< %Application data associated with this rule
    void setMetaData(const Object &newValue); ///< %Set application data assocaited with this rule

protected:
    struct State;

    explicit SyntaxRule(State *newState);

    State &me();
    const State &me() const;
};

} // namespace cc
