/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/TextError>
#include <cc/Object>
#include <cc/Range>

namespace cc {

/** \class Pattern cc/Pattern
  * \ingroup glob
  * \brief Regular expression pattern
  * \exception TextError
  */
class Pattern final: public Object
{
public:
    /** Create a null pattern
      */
    Pattern() = default;

    /** Create a new pattern from a regular expression \a text
      */
    Pattern(const String &text);

    /** %Match \a text against this pattern
      * \param text %Candidate input text
      * \param captures Matching %Range for each matching grouped sub-expression (in brackets)
      * \return True if \a text matches
      */
    bool match(const String &text, Out< List<Range> > captures = None{}) const;

    /** Find the next occurrence of this pattern
      * \param text %Text to search in
      * \param offset Provide start offset and return final offset
      * \return Valid range if a match could be found in \a text
      */
    Range findIn(const String &text, InOut<long> offset = None{}) const;

    /** Break up \a text into the non-matching parts
      */
    List<String> breakUp(const String &text) const;

    /** Exact length of a match if not variable
      */
    long matchLength() const;

    /** %Return a textual representation of the compiled pattern expression
      */
    List<String> explain() const;

    /** The regular expression text this pattern was created from
      */
    String text() const;

private:
    struct State;

    const State &me() const;
};

} // namespace cc
