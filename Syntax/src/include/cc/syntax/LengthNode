/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/syntax/SyntaxNode>

namespace cc::syntax {

/** \class LengthNode cc/syntax/LengthNode
  * \brief Enforce a required minimum and maximum text length when matching a sub-expression
  */
class LengthNode final: public SyntaxNode
{
public:
    /** \param minLength Required minimum length of the sub-expression match
      * \param maxLength Required maximum length of the sub-expression match
      * \param entry Sub-expression to match
      */
    LengthNode(long minLength, long maxLength, const SyntaxNode &entry);

    /** \param minLength Required minimum length of the sub-expression match
      * \param entry Sub-expression to match
      */
    LengthNode(long minLength, const SyntaxNode &entry);

    long minLength() const;
    long maxLength() const;
    SyntaxNode entry() const;

private:
    struct State;

    const State &me() const;
};

} // namespace cc::syntax
