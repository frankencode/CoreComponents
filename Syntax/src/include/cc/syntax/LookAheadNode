/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/syntax/SyntaxNode>
#include <cc/Token>

namespace cc::syntax {

/** \class LookAheadNode cc/syntax/LookAheadNode
  * \brief Match a given sub-expression ahead of the current text position.
  * \tparam Invert %Invert the match (1) or keep it straight (0)
  */
template<int Invert = 0>
class LookAheadNode: public SyntaxNode
{
public:
    /** \param entry Sub-expression to match
      */
    explicit LookAheadNode(const SyntaxNode &entry):
        SyntaxNode{new State{entry}}
    {}

    SyntaxNode entry() const { return me().entry_; }

private:
    struct State: public SyntaxNode::State
    {
        State(const SyntaxNode &entry):
            entry_{entry}
        {}

        long matchNext(const String &text, long offset, Token &production) const override
        {
            auto transaction = production.children().transaction();

            long h = entry_.matchNext(text, offset, production);

            if ((h == -1) ^ Invert) offset = -1;

            transaction.rollback();

            return offset;
        }

        long matchLength() const override
        {
            return -1;
        }

        void decycle() override
        {
            entry_ = SyntaxNode{};
        }

        List<String> explain() const override
        {
            return List<String>{}
                << (Invert ? "Not{" : "Ahead{") << entry_.explain() << "}";
        }

        SyntaxNode entry_;
    };

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::syntax
