/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/syntax/SyntaxNode>

namespace cc::syntax {

/** \class RepeatNode cc/syntax/RepeatNode
  * \brief Repeatedly match a sub-expression
  * \note The RepeatNode does not take into account the subsequent syntax nodes to resolve ambiguity in matching the entire text.
  */
class RepeatNode final: public SyntaxNode
{
public:
    /** \param minRepeat Minimum number of consecutive matches
      * \param maxRepeat Maximum number of consecutive matches
      * \param entry Sub-expression used for matching
      */
    RepeatNode(long minRepeat, long maxRepeat, const SyntaxNode &entry);

    /** \param minRepeat Minimum number of consecutive matches
      * \param entry Sub-expression used for matching
      */
    RepeatNode(long minRepeat, const SyntaxNode &entry);

    /** \param entry Sub-expression used for matching
      */
    explicit RepeatNode(const SyntaxNode &entry);

    long minRepeat() const;
    long maxRepeat() const;
    SyntaxNode entry() const;

private:
    struct State;

    const State &me() const;
};

} // namespace cc::syntax
