/*
 * Copyright (C) 2007-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>
#include <cc/exceptions>

namespace cc {
namespace entropy {

class BitSink
{
public:
    class Instance
    {
    public:
        void writeBit(uint8_t x);
        void writeUInt8(uint8_t x);
        void writeUInt16(uint16_t x);
        void writeUInt32(uint32_t x);
        void writeUInt64(uint64_t x);

        template<int DigitSize = 4>
        void writeUIntVlc(unsigned x);

        template<int DigitSize = 4>
        void writeIntVlc(int x);

        template<int DigitSize = 4>
        static int bitsPerUIntVlc(unsigned x);

        template<int DigitSize = 4>
        static int bitsPerIntVlc(int x);

        template<int wordSize>
        void writeUInt(unsigned x);

        void writeUInt(int wordSize, unsigned x);

        template<int wordSize>
        void writeInt(int x);

        void writeInt(int wordSize, int x);

        off_t currentOffset() const;

    private:
        friend class BitSink;

        Instance(const Stream &sink, CharArray *buffer, ByteOrder endian):
            sink_{sink},
            buffer_{buffer},
            endian_{endian},
            i_{0},
            iBit_{0},
            nw_{0}
        {
            if (!buffer_) buffer_ = CharArray::allocate(0x1000);
            mutate(buffer_)->fill(0);
        }

        ~Instance()
        {
            if (sink_) flush(i_ + (iBit_ > 0));
        }

        void flush(int n);

        Stream sink_;
        String buffer_;
        ByteOrder endian_;
        int i_;       // byte offset within buf_
        int iBit_;    // bit offset within buf_[i_]
        off_t nw_;    // accumulated number of written bytes
    };

    BitSink(const Stream &sink, CharArray *buffer = nullptr, ByteOrder endian = ByteOrder::LittleEndian):
        instance_{sink, buffer, endian}
    {}

    BitSink(const CharArray *buffer, ByteOrder endian = ByteOrder::LittleEndian):
        instance_{Stream{}, const_cast<CharArray *>(buffer), endian}
    {}

    Instance *operator->() { return &instance_; }
    const Instance *operator->() const { return &instance_; }

private:
    Instance instance_;
};

void BitSink::Instance::flush(int n)
{
    if (!sink_) throw BufferOverflow{};

    if (n > 0) {
        sink_->write(buffer_->bytes(), n);
        mutate(buffer_)->fill(0, n);
        nw_ += n;
        i_ = 0;
        iBit_ = 0;
    }
}

inline void BitSink::Instance::writeBit(uint8_t x)
{
    if (iBit_ == 8) {
        iBit_ = 0;
        ++i_;
        if (i_ == buffer_->count()) flush(i_);
    }
    mutate(buffer_)->byteAt(i_) |= (x << iBit_);
    ++iBit_;
}

inline void BitSink::Instance::writeUInt8(uint8_t x)
{
    for (int i = 8; i > 0; --i) {
        writeBit(x & 1);
        x >>= 1;
    }
}

inline void BitSink::Instance::writeUInt16(uint16_t x)
{
    if (endian_ == ByteOrder::LittleEndian) {
        writeUInt8((uint8_t)x);
        writeUInt8((uint8_t)(x >> 8));
    }
    else {
        writeUInt8((uint8_t)(x >> 8));
        writeUInt8((uint8_t)x);
    }
}

inline void BitSink::Instance::writeUInt32(uint32_t x)
{
    if (endian_ == ByteOrder::LittleEndian) {
        writeUInt8((uint8_t)x);
        writeUInt8((uint8_t)(x >> 8));
        writeUInt8((uint8_t)(x >> 16));
        writeUInt8((uint8_t)(x >> 24));
    }
    else {
        writeUInt8((uint8_t)(x >> 24));
        writeUInt8((uint8_t)(x >> 16));
        writeUInt8((uint8_t)(x >> 8));
        writeUInt8((uint8_t)x);
    }
}

inline void BitSink::Instance::writeUInt64(uint64_t x)
{
    if (endian_ == ByteOrder::LittleEndian) {
        for (int i = 0; i <= 7*8; i += 8)
            writeUInt8((uint8_t)(x >> i));
    }
    else {
        for (int i = 7*8; i >= 0; i -= 8)
            writeUInt8((uint8_t)(x >> i));
    }
}

template<int DigitSize>
inline void BitSink::Instance::writeUIntVlc(unsigned x)
{
    do {
        for (int k = DigitSize; k > 0; --k) {
            writeBit(x & 1);
            x >>= 1;
        }
        writeBit(x > 0);
    } while (x > 0);
}

template<int DigitSize>
inline int BitSink::Instance::bitsPerUIntVlc(unsigned x)
{
    int i = (x == 0);
    for (unsigned y = x; y > 0; y >>= DigitSize) ++i;
    return i * (DigitSize + 1);
}

template<int DigitSize>
inline void BitSink::Instance::writeIntVlc(int x)
{
    writeBit(x < 0);
    if (x < 0) x = -x;
    writeUIntVlc<DigitSize>(x);
}

template<int DigitSize>
inline int BitSink::Instance::bitsPerIntVlc(int x)
{
    if (x < 0) x = -x;
    return bitsPerUIntVlc<DigitSize>(x) + 1;
}

template<int WordSize>
inline void BitSink::Instance::writeUInt(unsigned x)
{
    writeUInt(WordSize, x);
}

inline void BitSink::Instance::writeUInt(int wordSize, unsigned x)
{
    for (int i = wordSize; i > 0; --i) {
        writeBit(x & 1);
        x >>= 1;
    }
}

template<int WordSize>
inline void BitSink::Instance::writeInt(int x)
{
    writeUInt<WordSize>((unsigned)x);
}

inline void BitSink::Instance::writeInt(int wordSize, int x)
{
    writeUInt(wordSize, (unsigned)x);
}

inline off_t BitSink::Instance::currentOffset() const
{
    return nw_ + i_ + (i_ + iBit_ > 0);
}

}} // namespace cc::entropy
