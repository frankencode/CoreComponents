/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <functional>
#include <cc/net/Uri>
#include <cc/net/SocketAddress>
#include <cc/http/HttpClientSecurity>
#include <cc/http/HttpResponse>
#include <cc/http/HttpGenerator>

namespace cc {
namespace http {

class HttpClientConnection;
class HttpRequestGenerator;

using cc::net::SocketAddress;
using cc::net::Uri;

/** \class HttpClient cc/http/HttpClient
  * \brief HTTP(S) client
  */
class HttpClient: public Object
{
public:
    static Ref<HttpResponse> get(const Uri &uri);
    static Ref<HttpResponse> head(const Uri &uri);
    static Ref<HttpResponse> put(const Uri &uri, const string &payload);
    static Ref<HttpResponse> put(const Uri &uri, Stream *source);
    static Ref<HttpResponse> post(const Uri &uri, const string &payload);
    static Ref<HttpResponse> post(const Uri &uri, Stream *source);
    static Ref<HttpResponse> postForm(const Uri &uri, const Map<string> *form);

    static Ref<HttpClient> connect(const Uri &uri, const HttpClientSecurity *security = nullptr);

    typedef std::function<void(HttpGenerator *)> Generate;
    Ref<HttpResponse> query(const string &method, const string &path, const Generate &generate = &generateDefault);

    void pipeline(const string &method, const string &path, const Generate &generate = &generateDefault);
    Ref<HttpResponse> readResponse();

protected:
    virtual string userAgent() const;
    virtual bool retry(int i);

private:
    static void generateDefault(HttpGenerator *request);

    HttpClient(const Uri &uri, const HttpClientSecurity *security);
    void connect();
    Ref<HttpRequestGenerator> createRequest(const string &method, const string &path);

    SocketAddress address_;
    string host_;
    Ref<const HttpClientSecurity> security_;
    Ref<HttpClientConnection> connection_;
};

}} // namespace cc::http
