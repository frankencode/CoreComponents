/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/TransferLimiter>

namespace cc {
namespace http {

class HttpStream: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        bool isPayloadConsumed() const;

        void nextHeader();
        void nextPayload(int64_t length);
        void nextLine();
        void nextChunk();

        int read(CharArray *data) override;
        void write(const CharArray *data) override;
        void write(const StringList &parts) override;

    private:
        friend class HttpStream;

        Instance(const Stream &stream);

        CharArray *buffer();
        void discard();

        Stream stream_;
        TransferLimiter drainage_;
        String buffer_;
        String pending_;
        int pendingIndex_;
        int64_t payloadLeft_;
        int nlCount_, nlMax_;
        bool eoi_;
        bool chunked_;
    };

    HttpStream(const Stream &stream):
        Stream{new Instance{stream}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::http
