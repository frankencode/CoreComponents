/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/http/HttpSocket>
#include <cc/http/HttpClientSecurity>

namespace cc {
    class IoMonitor;
    class IoEvent;
}

namespace cc {
namespace http {

using namespace cc::net;

/** \brief HTTP(S) client-side socket
  */
class HttpClientSocket: public HttpSocket
{
public:
    class Instance: public HttpSocket::Instance
    {
    public:
        bool isSecure() const;
        void shutdown();

    private:
        friend class HttpClientSocket;

        Instance(const SocketAddress &serverAddress, const String &serverName, const HttpClientSecurity *security);

        void connect();
        void initSession();
        void handshake();

        bool waitInput() override;
        void ioException(Exception &ex) const override;

        String serverName_;
        Ref<const HttpClientSecurity> security_;
        StreamSocket controlMaster_, controlSlave_;
        const IoEvent *readyRead_;
    };

    HttpClientSocket(const SocketAddress &serverAddress, const String &serverName = "", const HttpClientSecurity *security = nullptr):
        HttpSocket{new Instance{serverAddress, serverName, security}}
    {
        my<Instance>()->connect();
    }

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::http
