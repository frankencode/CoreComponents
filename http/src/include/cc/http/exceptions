/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Exception>
#include <cc/net/SocketAddress>

namespace cc {
namespace http {

using namespace cc::net;

class CloseRequest {};

/** \brief HTTP request could not be successfully processed
  */
class HttpError: public Exception
{
public:
    HttpError(int statusCode, const string &message = "");

    int statusCode() const;
    string message() const;

    const HttpError *operator->() const { return this; }

private:
    int statusCode_;
    string message_;
};

class BadRequest: public HttpError
{
public:
    BadRequest(): HttpError{400, "Bad Request"} {}
};

class Forbidden: public HttpError
{
public:
    Forbidden(): HttpError{403, "Forbidden"} {}
};

class NotFound: public HttpError
{
public:
    NotFound(): HttpError{404, "Not Found"} {}
};

class RequestTimeout: public HttpError
{
public:
    enum { StatusCode = 408 };
    RequestTimeout(): HttpError{StatusCode, "Request Timeout"} {}
};

class PayloadTooLarge: public HttpError
{
public:
    enum { StatusCode = 413 };
    PayloadTooLarge(): HttpError{StatusCode, "Payload Too Large"} {}
};

class InternalServerError: public HttpError
{
public:
    InternalServerError(): HttpError{500, "Internal Server Error"} {}
};

class UnsupportedVersion: public HttpError
{
public:
    UnsupportedVersion(): HttpError{505, "HTTP Version not supported"} {}
};

class NotImplemented: public HttpError
{
public:
    NotImplemented(): HttpError{501, "Not implemented"} {}
};

class SecurityError: public Exception
{
public:
    SecurityError(int errorCode, const SocketAddress &peerAddress = SocketAddress{});
    string message() const;

private:
    int errorCode_;
    SocketAddress peerAddress_;
};

}} // namespace cc::http
