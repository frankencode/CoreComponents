/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/syntax/SyntaxDefinition>

namespace cc { template<class> class Singleton; }

namespace cc {
namespace syntax {

/** \brief Syntax of a floating point literal
  * \see IntegerSyntax
  */
class FloatSyntax: public SyntaxDefinition
{
public:
    static const FloatSyntax *instance();

    void read(float64_t *value, const CharArray *text, Token *token) const;
    Ref<Token> read(float64_t *value, const CharArray *text, int i = -1) const;

    inline int literal() const { return literal_; }

private:
    friend class Singleton<FloatSyntax>;

    FloatSyntax();

    int sign_;
    int integerPart_;
    int fractionPart_;
    int exponentSign_;
    int exponent_;
    int nan_;
    int infinite_;
    int literal_;
};

}} // namespace cc::syntax
