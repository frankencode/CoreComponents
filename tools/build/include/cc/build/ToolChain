/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/build/BuildPlan>
#include <cc/build/BuildOption>
#include <cc/build/BuildShell>
#include <cc/build/Module>
#include <cc/build/Job>
#include <cc/Version>
#include <functional>

namespace cc::build {

class DependencyCache;

class ToolChain: public Object
{
public:
    ToolChain() = default;

    String machine() const { return me().machine(); }
    String systemRoot() const { return me().systemRoot(); }

    String compiler(const String &source = "") const { return me().compiler(source); }
    String compiler(const BuildPlan &plan) const { return me().compiler(plan); }
    String machineCommand() const { return me().machineCommand(); }
    String defaultOptimization(BuildOption options) const { return me().defaultOptimization(options); }

    String analyseCommand(const BuildPlan &plan, const String &source) const { return me().analyseCommand(plan, source); }
    Job createAnalyseJob(const BuildPlan &plan, const String &source) const { return me().createAnalyseJob(plan, source); }
    Module finishAnalyseJob(const BuildPlan &plan, const Job &job) const { return me().finishAnalyseJob(plan, job); }

    Job createCompileJob(const BuildPlan &plan, const Module &module) const { return me().createCompileJob(plan, module); }
    Job createCompileLinkJob(const BuildPlan &plan, const Module &module) const { return me().createCompileLinkJob(plan, module); }
    Job createPreprocessJob(const BuildPlan &plan, const Module &module) const { return me().createPreprocessJob(plan, module); }

    String targetName(const BuildPlan &plan) const { return me().targetName(plan); }
    String linkName(const BuildPlan &plan) const { return me().linkName(plan); }
    String linkName(const Module &module) const { return me().linkName(module); }
    String linkCommand(const BuildPlan &plan) const { return me().linkCommand(plan); }
    Job createLinkJob(const BuildPlan &plan) const { return me().createLinkJob(plan); }
    bool link(const BuildPlan &plan) const { return me().link(plan); }

    String configureCompileCommand(const BuildPlan &plan, const String &sourcePath, const String &binPath) const { return me().configureCompileCommand(plan, sourcePath, binPath); }

    String installDirPath(const BuildPlan &plan) const { return me().installDirPath(plan); }
    String installedDirPath(const BuildPlan &plan) const { return me().installedDirPath(plan); }
    String includePrefix(const BuildPlan &plan) const { return me().includePrefix(plan); }
    String libIncludePrefix(const BuildPlan &plan) const { return me().libIncludePrefix(plan); }
    String bundlePrefix(const BuildPlan &plan) const { return me().bundlePrefix(plan); }

    bool createSymlinks(const BuildPlan &plan) const { return me().createSymlinks(plan); }

    void createLibrarySymlinks(const BuildPlan &plan, const String &libName) const { me().createLibrarySymlinks(plan, libName); }
    void cleanLibrarySymlinks(const BuildPlan &plan, const String &libName) const { me().cleanLibrarySymlinks(plan, libName); }

    void createPluginSymlinks(const BuildPlan &plan, const String &targetLibName, const String &pluginLibName) const { me().createPluginSymlinks(plan, targetLibName, pluginLibName); }
    void cleanPluginSymlinks(const BuildPlan &plan, const String &targetLibName, const String &pluginLibName) const { me().cleanPluginSymlinks(plan, targetLibName, pluginLibName); }
    void cleanPluginSymlinks(const BuildPlan &plan, const String &targetLibName) const { me().cleanPluginSymlinks(plan, targetLibName); }

    void createAliasSymlinks(const BuildPlan &plan, const String &appName) const { me().createAliasSymlinks(plan, appName); }
    void cleanAliasSymlinks(const BuildPlan &plan, const String &appName) const { me().cleanAliasSymlinks(plan, appName); }

    String pkgConfigName(const BuildPlan &plan) const { return me().pkgConfigName(plan); }
    String pkgConfigInstallDirPath(const BuildPlan &plan) const { return me().pkgConfigInstallDirPath(plan); }
    String pkgConfig(const BuildPlan &plan) const { return me().pkgConfig(plan); }
    void generatePkgConfig(const BuildPlan &plan) const { me().generatePkgConfig(plan); }

    bool refreshLinkerCache(const BuildPlan &plan) const { return me().refreshLinkerCache(plan); }

protected:
    struct State: public Object::State
    {
        virtual String machine() const = 0;
        virtual String systemRoot() const = 0;

        virtual String compiler(const String &source = "") const = 0;
        virtual String compiler(const BuildPlan &plan) const = 0;
        virtual String machineCommand() const = 0;
        virtual String defaultOptimization(BuildOption options) const = 0;

        virtual String analyseCommand(const BuildPlan &plan, const String &source) const = 0;
        virtual Job createAnalyseJob(const BuildPlan &plan, const String &source) const = 0;
        virtual Module finishAnalyseJob(const BuildPlan &plan, const Job &job) const = 0;

        virtual Job createCompileJob(const BuildPlan &plan, const Module &module) const = 0;
        virtual Job createCompileLinkJob(const BuildPlan &plan, const Module &module) const = 0;
        virtual Job createPreprocessJob(const BuildPlan &plan, const Module &module) const = 0;

        virtual String targetName(const BuildPlan &plan) const = 0;
        virtual String linkName(const BuildPlan &plan) const = 0;
        virtual String linkName(const Module &module) const = 0;
        virtual String linkCommand(const BuildPlan &plan) const = 0;
        virtual Job createLinkJob(const BuildPlan &plan) const = 0;
        virtual bool link(const BuildPlan &plan) const = 0;

        virtual String configureCompileCommand(const BuildPlan &plan, const String &sourcePath, const String &binPath) const = 0;

        virtual String installDirPath(const BuildPlan &plan) const = 0;
        virtual String installedDirPath(const BuildPlan &plan) const = 0;
        virtual String includePrefix(const BuildPlan &plan) const = 0;
        virtual String libIncludePrefix(const BuildPlan &plan) const = 0;
        virtual String bundlePrefix(const BuildPlan &plan) const = 0;

        virtual bool createSymlinks(const BuildPlan &plan) const = 0;

        virtual void createLibrarySymlinks(const BuildPlan &plan, const String &libName) const = 0;
        virtual void cleanLibrarySymlinks(const BuildPlan &plan, const String &libName) const = 0;

        virtual void createPluginSymlinks(const BuildPlan &plan, const String &targetLibName, const String &pluginLibName) const = 0;
        virtual void cleanPluginSymlinks(const BuildPlan &plan, const String &targetLibName, const String &pluginLibName) const = 0;
        virtual void cleanPluginSymlinks(const BuildPlan &plan, const String &targetLibName) const = 0;

        virtual void createAliasSymlinks(const BuildPlan &plan, const String &appName) const = 0;
        virtual void cleanAliasSymlinks(const BuildPlan &plan, const String &appName) const = 0;

        virtual String pkgConfigName(const BuildPlan &plan) const = 0;
        virtual String pkgConfigInstallDirPath(const BuildPlan &plan) const = 0;
        virtual String pkgConfig(const BuildPlan &plan) const = 0;
        virtual void generatePkgConfig(const BuildPlan &plan) const = 0;

        virtual bool refreshLinkerCache(const BuildPlan &plan) const = 0;
    };

    explicit ToolChain(State *newState):
        Object{newState}
    {}

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::build
