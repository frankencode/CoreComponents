/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>

struct zip_file;
typedef zip_file zip_file_t;

struct zip;
typedef struct zip zip_t;

namespace cc {
namespace zip {

class ZipArchive;

/** \class ZipFile cc/zip/ZipFile
  * \brief Read a file contained in a ZIP archive
  */
class ZipFile: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        virtual int read(CharArray *data) override;

    private:
        friend class ZipFile;
        friend class ZipArchive;

        Instance(const String &path): path_{path} {}
        String zipPath_;
        zip_t *archive_;
        zip_file_t *file_;
        String path_;
    };

    ZipFile(const String &path):
        Stream{new Instance{path}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::zip
