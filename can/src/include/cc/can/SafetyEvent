/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/Event>

namespace cc {
namespace can {

class SafetyEvent: public Event
{
public:
    static Ref<SafetyEvent> create(EventMonitor *monitor, int canId, int invCanId, double idleInterval, double validationInterval = -1);

protected:
    template<class EventType, class... Args>
    static Ref<EventType> make(EventMonitor *monitor, int canId, int invCanId, double idleInterval, double validationInterval, Args... args);

    SafetyEvent(int canId, double idleInterval);

    virtual void onError(CanMedia *media, SafetyError error);

private:
    bool isPrimaryEvent() const;
    bool autoStart() const { return isPrimaryEvent(); }

    void onIdle(CanMedia *media) final;
    void feed(CanMedia *media, const String &data) final;
    void timeAdvance(NextEvent *next, double now) final;

    SafetyEvent *primaryEvent_ { nullptr };
    Ref<SafetyEvent> inverseEvent_;
    double lastOccurrence_ { -1 };
    String lastData_;
    bool hasLastData_ { false };
};

template<class EventType, class... Args>
Ref<EventType> SafetyEvent::make(EventMonitor *monitor, int canId, int invCanId, double idleInterval, double validationInterval, Args... args)
{
    CC_ASSERT(idleInterval > 0);
    CC_ASSERT(validationInterval < idleInterval);

    if (validationInterval < 0) validationInterval = idleInterval * 0.5;

    Ref<EventType> primaryEvent = new EventType{canId, idleInterval, args...};
    Ref<SafetyEvent> inverseEvent = new SafetyEvent{invCanId, validationInterval};

    primaryEvent->inverseEvent_ = inverseEvent;
    inverseEvent->primaryEvent_ = primaryEvent;

    primaryEvent->init(monitor);
    inverseEvent->init(monitor);

    return primaryEvent;
}

}} // namespace cc::can
