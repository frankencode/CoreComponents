/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanMedia>
#include <cc/Channel>

namespace cc {
namespace can {

class CanFeed: public CanMedia
{
public:
    class Instance: public CanMedia::Instance
    {
    public:
        bool waitFrame(int timeout = -1) override;
        bool readFrame(CanFrame *frame) override;
        void feedFrame(const CanFrame &frame);
        void shutdown();

    protected:
        friend class CanFeed;

        Instance() = default;

        Channel<CanFrame> frameChannel_;
    };

    Instance *operator->() { return as<Instance>(self_); }

    CanFeed() = default;

protected:
    CanFeed(Instance *self):
        CanMedia{self}
    {}
};

}} // namespace cc::can
