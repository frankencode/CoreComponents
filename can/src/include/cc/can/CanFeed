/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanMedia>

namespace cc { template<class> class Channel; }

namespace cc {
namespace can {

class CanFeed: public CanMedia
{
public:
    class Instance: public CanMedia::Instance
    {
    public:
        bool waitFrame(int timeout = -1) override;
        bool readFrame(CanFrame *frame) override;
        void feedFrame(const CanFrame &frame);
        void shutdown();

    protected:
        friend class CanFeed;

        class FeedGuard {
        public:
            FeedGuard(Instance *instance):
                blocked_{instance->blocked_}
            {
                blocked_ = true;
            }
            ~FeedGuard()
            {
                blocked_ = false;
            }
        private:
            bool &blocked_;
        };

        Instance();
        ~Instance();

        typedef Channel<CanFrame> FrameChannel;
        Ref<FrameChannel> frameChannel_;

        bool blocked_ { false };
    };

    Instance *operator->() { return get<Instance>(); }

    CanFeed() = default;

    CanFeed(Instance *instance):
        CanMedia{instance}
    {}
};

}} // namespace cc::can
