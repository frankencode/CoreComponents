/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <linux/can.h> // can_frame
#include <cc/String>

namespace cc {
namespace can {

typedef struct can_frame StructCanFrame;

/** \todo value semantics and operator[]
  */
class CanFrame
{
public:
    class Instance: public StructCanFrame
    {
    public:
        bool isValid() const { return can_id != 0 || can_dlc != 0; }

        canid_t canId() const { return can_id & CAN_EFF_MASK; } /// \todo see below
        void setCanId(canid_t newValue) { can_id = newValue; }

        /// \todo
        // unsigned objectId() const { return can_id & CAN_EFF_MASK; }
        // void setObjectId(unsigned id) { can_id = static_cast<canid_t>(id) & CAN_EFF_MASK; }

        /// \todo
        // canid_t &id() { return can_id; }

        int payloadCount() const { return can_dlc; }
        void setPayloadCount(int newValue) {
            CC_ASSERT(0 <= newValue && newValue <= CAN_MAX_DLEN);
            can_dlc = newValue;
        }

        uint8_t payloadAt(int i) const {
            CC_ASSERT(0 <= i && i < can_dlc && i < CAN_MAX_DLEN);
            return data[i];
        }
        uint8_t &payloadAt(int i) {
            CC_ASSERT(0 <= i && i < can_dlc && i < CAN_MAX_DLEN);
            return data[i];
        }

        String payload() const;
        void setPayload(const String &data);

        void setValueUInt32(uint32_t value);
        void updateInverse(CanFrame *invFrame) const;

        String copy(int i0, int i1) const;

        /// \todo make obsolete
        template<class Word>
        Word word(int i0, int i1) const
        {
            if (i1 > payloadCount()) i1 = payloadCount();
            if (i0 < 0) i0 = 0;

            Word value = 0U;
            for (int i = i1 - 1; i >= i0; --i) {
                value <<= 8U;
                value |= payloadAt(i);
            }

            return value;
        }

        /// \todo make obsolete
        template<class Word>
        void setWord(int i0, int i1, Word value)
        {
            if (i1 > payloadCount()) i1 = payloadCount();
            if (i0 < 0) i0 = 0;

            for (int i = i0; i < i1; ++i) {
                payloadAt(i) = value;
                value >>= 8U;
            }
        }


        template<class Word = unsigned>
        Word payloadWord(unsigned i, unsigned j = sizeof(Word) - 1) const
        {
            unsigned i0 = i;
            unsigned i1 = j + 1;

            if (i1 > unsigned(payloadCount())) i1 = payloadCount();
            if (i0 < 0) i = 0;

            Word value = 0U;
            for (unsigned i = i1 - 1; i >= i0; --i) {
                value <<= 8U;
                value |= payloadAt(i);
            }

            return value;
        }

        template<class Word = unsigned>
        void setPayloadWord(unsigned i, unsigned j, Word value)
        {
            unsigned i0 = i;
            unsigned i1 = j + 1;

            if (i1 > unsigned(payloadCount())) i1 = payloadCount();
            if (i0 < 0) i0 = 0;

            for (unsigned i = i0; i < i1; ++i) {
                payloadAt(i) = value;
                value >>= 8U;
            }
        }

        bool isRemoteTransmissionRequest() const { return can_id & CAN_RTR_FLAG; }
        bool isError() const { return can_id & CAN_ERR_FLAG; }
        bool isExtended() const { return can_id & CAN_EFF_FLAG; }

        void setRemoteTransmissionRequest(bool on) {
            if (on) can_id |= CAN_RTR_FLAG;
            else    can_id &= ~CAN_RTR_FLAG;
        }

        String toString() const;

        StructCanFrame *toRaw() { return static_cast<StructCanFrame *>(this); }
        const StructCanFrame *toRaw() const { return static_cast<const StructCanFrame *>(this); }

    private:
        friend class CanFrame;

        Instance();
        Instance(canid_t canId);
        const Instance *instance() const { return this; }
        bool equals(const Instance *other) const;
    };

    CanFrame() = default;
    CanFrame(canid_t canId): instance_{canId} {}

    CanFrame(const CanFrame &) = default;
    CanFrame &operator=(const CanFrame &) = default;

    const Instance *operator->() const { return &instance_; }
    Instance *operator->() { return &instance_; }

    bool operator==(const CanFrame &other) const { return (*this)->equals(other->instance()); }
    bool operator!=(const CanFrame &other) const { return !(*this)->equals(other->instance()); }

private:
    explicit operator bool() const { return (*this)->isValid(); }

    Instance instance_;
};

String str(const CanFrame &frame);

}} // namespace cc::can
