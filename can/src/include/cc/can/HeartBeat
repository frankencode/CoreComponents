/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanFrame>
#include <cc/can/types>

namespace cc {
namespace can {

class HeartBeat
{
public:
    static Ref<CanFrame> createFrame(int sourceId, NodeState nodeState);

    class Instance {
    public:
        bool isValid() const {
            return
                0x701 <= frame_->canId() && frame_->canId() <= 0x77F &&
                frame_->payloadCount() == 1;
        }

        int sourceId() const { return frame_->canId() - 0x700; }

        NodeState nodeState() const { return static_cast<NodeState>(frame_->payloadAt(0) & 0x7F); }

        bool toggle() const { return frame_->payloadAt(0) & 0x80; }

        String toString() const;

    private:
        friend class HeartBeat;

        Instance(const CanFrame *frame):
            frame_{frame}
        {}

        const CanFrame *frame_;
    };

    HeartBeat(const CanFrame *frame):
        instance_{frame}
    {}

    explicit operator bool() const { return instance_.isValid(); }
    const Instance *operator->() const { return &instance_; }

    operator String() const { return instance_.toString(); }

private:
    const Instance instance_;
};

}} // namespace cc::can
