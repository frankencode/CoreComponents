/*
 * Copyright (C) 2019-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanMedia>
#include <cc/SystemStream>

namespace cc { class SystemStream; }

namespace cc {
namespace can {

class CanSocket: public CanMedia
{
public:
    class Instance: public CanMedia::Instance
    {
    public:
        void enableLoopback(bool on);
        void enableErrorFrames(bool on);

        bool waitFrame(int timeout = -1) override;
        bool readFrame(CanFrame *frame) override;
        void writeFrame(const CanFrame &frame) override;

    private:
        friend class CanSocket;

        Instance(const String &interface);
        ~Instance();

        static int lookupInterfaceIndex(int fd, const String &interface);

        SystemStream socket_;
    };

    CanSocket(const String &interface):
        CanMedia{new Instance{interface}}
    {}

    const Instance *operator->() const { return as<Instance>(self_); }
    Instance *operator->() { return as<Instance>(self_); }
};

}} // namespace cc::can
