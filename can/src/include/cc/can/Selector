/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>
#include <cstdint>

namespace cc {
namespace can {

/** \brief Object dictionary address (index, sub-index)
  */
class Selector
{
public:
    typedef std::uint_fast16_t Index;
    typedef std::uint_fast8_t SubIndex;
    typedef std::uint_fast32_t Key;

    class Instance {
    public:
        Index index() const { return index_; }
        SubIndex subIndex() const { return subIndex_; }
        Key key() const { return (Key(index_) << 8) | subIndex_; }

    private:
        friend class Selector;

        Instance():
            index_{0},
            subIndex_{0}
        {}

        Instance(Index index, SubIndex subIndex):
            index_{index},
            subIndex_{subIndex}
        {}

        Index index_;
        SubIndex subIndex_;
    };

    Selector()
    {}

    Selector(Index index, SubIndex subIndex = 0):
        instance_{index, subIndex}
    {}

    const Instance *operator->() const { return &instance_; }

    Key operator+() const { return self()->key(); }

    bool operator==(const Selector &other) const {
        return
            self()->index()    == other->index() &&
            self()->subIndex() == other->subIndex();
    }

    bool operator!=(const Selector &other) const {
        return !(self() == other);
    }

    bool operator<(const Selector &other) const {
        return
            self()->index() < other->index() || (
                self()->index() == other->index() &&
                self()->subIndex() < other->subIndex()
            );
    }

private:
    const Selector &self() const { return *this; }
    Instance instance_;
};

String str(Selector selector);

}} // namespace cc::can
