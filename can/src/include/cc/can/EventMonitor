/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/EventHandler>
#include <cc/can/SafetyEventHandler>
#include <cc/can/CanMedia>
#include <cc/map>

namespace cc { class Worker; }
namespace cc { class Mutex; }
namespace cc { class Semaphore; }

namespace cc {
namespace can {

class EventMonitor: public Object
{
public:
    static Ref<EventMonitor> create(CanMedia *media);

    void start();

private:
    friend class Event;

    EventMonitor(CanMedia *media);
    ~EventMonitor();

    void init();
    void registerEvent(Event *event);

    void shutdown();

    void run();

    Ref<CanMedia> media_;

    map< int, Ref<Event> > events_;

    Ref<Worker> worker_;
    Ref<Mutex> mutex_;
    Ref<Semaphore> start_;
    Ref<Semaphore> shutdown_;
};

}} // namespace cc::can
