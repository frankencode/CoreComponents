/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanFrame>

namespace cc {
namespace can {

class CanMedia
{
public:
    class Instance: public virtual Object
    {
    public:
        /** Wait for a frame to be received
          * \param timeout number of milliseconds to wait
          * \return true if a frame has become available before timeout
          */
        virtual bool waitFrame(int timeout = -1) = 0;

        /** Read frame
          * \param frame return next frame
          * \return true if a frame could be read
          */
        virtual bool readFrame(CanFrame *frame) = 0;

        /** Write frame
          * \param frame frame to write
          */
        virtual void writeFrame(const CanFrame &frame) = 0;
    };

    CanMedia() = default;

    operator const Instance *() const { return self_; }

    Instance *operator->() { return self_; }


protected:
    CanMedia(Instance *self):
        self_{self}
    {}

    Ref<Instance> self_;
};

}} // namespace cc::can
