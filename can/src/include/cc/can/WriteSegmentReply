/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/ServiceReply>

namespace cc {
namespace can {

class WriteSegmentReply
{
public:
    static Ref<CanFrame> createFrame(int serverId, int offset);

    class Instance {
    public:
        bool isValid() const {
            return
                ServiceReply{frame_}->isValid() &&
                ServiceReply{frame_}->specifier() == ServiceReply::Specifier::WriteSegment;
        }

        int serverId() const {
            return ServiceReply{frame_}->serverId();
        }

        bool toggle() const {
            return frame_->payloadAt(0) & 0x10;
        }

        const CanFrame *frame() const {
            return frame_;
        }

        String toString() const;

    private:
        friend class WriteSegmentReply;

        Instance(const CanFrame *frame):
            frame_{frame}
        {}

        const CanFrame *frame_;
    };

    WriteSegmentReply(const CanFrame *frame):
        instance_{frame}
    {}

    explicit operator bool() const { return instance_.isValid(); }
    const Instance *operator->() const { return &instance_; }

    operator String() const { return instance_.toString(); }

private:
    const Instance instance_;
};

}} // namespace cc::can
