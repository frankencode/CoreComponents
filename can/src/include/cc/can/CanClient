/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <functional>
#include <cc/can/exceptions>
#include <cc/can/CanMedia>

namespace cc {
namespace can {

/** \TODO make it put timeout aborts on the bus
  */
class CanClient: public Object
{
public:
    static Ref<CanClient> create(CanMedia *media, int nodeId, int timeout = -1);

    CanMedia *media() const { return media_; }
    int nodeId() const { return nodeId_; }
    int timeout() const { return timeout_; }

    String read(int peerId, Selector selector);
    void write(int peerId, Selector selector, const String &data, int switchThreshold = 84);

    String blockRead(int peerId, Selector selector, int blockSize = 127, int switchThreshold = 84);
    void blockWrite(int peerId, Selector selector, const String &data);

protected:
    CanClient(CanMedia *media, int nodeId, int timeout = -1);

    String segmentedReadTransfer(int peerId, Selector selector);

    void expeditedWrite(int peerId, Selector selector, const String &data);
    void segmentedWrite(int peerId, Selector selector, const String &data);

    void blockReadInitiate(int peerId, Selector selector, int blockSize, int switchThreshold, bool *crcSupport, std::function<String()> *fallback);
    String blockReadTransfer(int peerId, Selector selector, int blockSize);
    void blockReadEnd(int peerId, Selector selector, String *data, bool crcSupport);

    void blockWriteInitiate(int peerId, Selector selector, const String &data, int *blockSize, bool *crcSupport);
    void blockWriteTransfer(int peerId, Selector selector, const String &data, int *blockSize, int *offset);
    void blockWriteEnd(int peerId, Selector selector, const String &data, bool crcSupport);

private:
    Ref<CanFrame> getNextReply(int peerId, Selector selector);
    void canAbort(int peerId, Selector selector, Abort::Reason reason);

    Ref<CanMedia> media_;
    int nodeId_;
    int timeout_;
};

}} // namespace cc::can
