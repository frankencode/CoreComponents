/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <functional>
#include <cc/can/Event>

namespace cc {
namespace can {

class EventHandler: public Event
{
public:
    typedef std::function<void(const String &)> OnReceived;
    typedef std::function<void()> OnIdle;

    static Ref<EventHandler> create(
        EventMonitor *monitor, int canId, double idleInterval,
        const OnReceived &onReceived,
        const OnIdle &onIdle = std::function<void()>{}
    );

private:
    EventHandler(
        int canId, double idleInterval,
        const OnReceived &onReceived,
        const OnIdle &onIdle
    );

    void onReceived(CanMedia *media, const String &data) final;
    void onIdle(CanMedia *media) final;

    OnReceived onReceived_;
    OnIdle onIdle_;
};

}} // namespace cc::can
