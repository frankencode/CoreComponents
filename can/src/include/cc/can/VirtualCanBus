/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanFeed>
#include <cc/List>
#include <cc/Mutex>

namespace cc {
namespace can {

class VirtualCanMediaInstance;

/** \brief Purely virtual CAN bus
  * The VirtualCanBus allows to build a purely virtual CAN bus segment.
  * \see VirtualCanBridge
  */
class VirtualCanBus
{
public:
    class Instance: public Object
    {
    public:
        CanMedia connect();
        void shutdown();

    private:
        friend class VirtualCanBus;
        friend class VirtualCanMediaInstance;

        Instance() = default;
        void broadcast(const CanFrame &frame, CanFeed::Instance *source);

        List<CanFeed> connections_;
        Mutex mutex_;
    };

    VirtualCanBus():
        instance_{new Instance}
    {}

    Instance *operator->() { return instance_; }

private:
    Ref<Instance> instance_;
};

}} // namespace cc::can
