/*
 * Copyright (C) 2019-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>
#include <cc/can/CanMedia>

namespace cc { class SystemStream; }

namespace cc {
namespace can {

class CanSocket
{
public:
    class Instance: public CanMedia
    {
    public:
        void enableLoopback(bool on);
        void enableErrorFrames(bool on);

        bool waitFrame(int timeout = -1) override;
        bool readFrame(CanFrame *frame) override;
        void writeFrame(const CanFrame &frame) override;

    private:
        friend class CanSocket;

        Instance(const String &interface);
        ~Instance();

        static int lookupInterfaceIndex(int fd, const String &interface);

        Ref<SystemStream> socket_;
    };

    CanSocket(const String &interface):
        instance_{interface}
    {}

    const Instance *operator->() const { return &instance_; }
    Instance *operator->() { return &instance_; }

    operator CanMedia *() { return &instance_; }

private:
    Instance instance_;
};

}} // namespace cc::can
