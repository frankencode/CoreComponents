/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/ServiceReply>

namespace cc {
namespace can {

class BlockReply {
public:
    enum class Specifier: uint8_t {
        BlockWriteInit      = 0x50,
        BlockWriteEnd       = 0x51,
        BlockWriteAck       = 0x52,
        BlockReadStreamInit = 0x60,
        BlockReadInit       = 0x62,
        BlockReadEnd        = 0x61
    };

    class Instance {
    public:
        bool isValid() const {
            return
                ServiceReply{frame_}->isValid() && (
                    ServiceReply{frame_}->specifier() == ServiceReply::Specifier::BlockRead ||
                    ServiceReply{frame_}->specifier() == ServiceReply::Specifier::BlockWrite
                );
        }

        Specifier specifier() const {
            return
                static_cast<Specifier>(
                    ((frame_->payloadAt(0) & 0xE0U) >> 1) |
                    (frame_->payloadAt(0) & 0x3U)
                );
        }

        String toString() const;

    private:
        friend class BlockReply;

        Instance(const CanFrame *frame):
            frame_{frame}
        {}

        const CanFrame *frame_;
    };

    BlockReply(const CanFrame *frame):
        instance_{frame}
    {}

    explicit operator bool() const { return instance_.isValid(); }
    const Instance *operator->() const { return &instance_; }

    operator String() const { return instance_.toString(); }

private:
    Instance instance_;
};

}} // namespace cc::can
