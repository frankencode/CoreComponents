/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanFrame>
#include <cc/can/types>

namespace cc {
namespace can {

class EventMonitor;
class NextEvent;
class CanMedia;

class Event: public Object
{
public:
    static Ref<Event> create(EventMonitor *monitor, int canId, double idleInterval = 3);

    int canId() const { return canId_; }
    double idleInterval() const { return idleInterval_; }

protected:
    friend class EventMonitor;

    Event(int canId, double idleInterval);
    void init(EventMonitor *monitor);

    virtual bool autoStart() const { return true; }
    virtual double initialInterval() const { return idleInterval_; }

    virtual void onReceived(CanMedia *media, const String &data);
    virtual void onIdle(CanMedia *media);

    virtual void feed(CanMedia *media, const String &data);
    virtual void timeAdvance(NextEvent *next, double now);

private:
    int canId_;
    double idleInterval_;
    bool busy_;
};

}} // namespace cc::can
