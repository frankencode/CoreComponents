/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/math>
#include <cc/Range>
#include <cc/ui/ItemView>

namespace cc {
namespace ui {

class TextDocument;

class TextEdit: public ItemView
{
    friend class Object;

public:
    Property<Font> font;
    Property<Color> ink;

    Property<bool> showLineNumbers { false };
    Property<Font> lineNumberFont;
    Property<Color> lineNumberInk;
    Property<Color> lineNumberPaper;

    Property<Size> textMargin { Size{ std::ceil(dp(4)), 0 } };
    Property<Size> lineNumberMargin { Size{ std::ceil(dp(8)), 0 } };

private:
    friend class TextLine;

    Property<double> textWidth;
    Property<double> textWidthSansMargin;
    Property<double> lineNumberWidth;

    Property<Point> textPos;
    Property<Point> lineNumberPos;

    TextEdit(View *parent = 0);

    Ref<Item> initItemModel() override;

    View *addDelegate(View *parent, Item *item) override;
    void updateDelegateInView(View *delegate, int layoutIndex) override;

    Property<int> lineNumberDigitCount { [=] { return ilog<10>(lineCount()); } };
    Property<int> lineCount { 1 };

    Ref<TextDocument> document_;
};

}} // namespace cc::ui
