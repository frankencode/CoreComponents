/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/math>
#include <cc/Range>
#include <cc/ui/ItemView>

namespace cc {
namespace ui {

class TextDocument;

class TextEdit: public ItemView
{
public:
    class Instance: public ItemView::Instance
    {
    public:
        Property<bool> readonly { false };

        Property<Font> font;
        Property<Color> ink;

        Property<bool> showLineNumbers { false };
        Property<Font> lineNumberFont;
        Property<Color> lineNumberInk;
        Property<Color> lineNumberPaper;

        Property<Size> textMargin       { Size{ std::ceil(dp(4)), 0 } };
        Property<Size> lineNumberMargin { Size{ std::ceil(dp(8)), 0 } };

        void setText(const String &text);
        String getText() const;

    private:
        friend class TextEdit;
        friend class TextLine;
        friend class TextLineHandle;

        Property<double> textWidth;
        Property<double> textWidthSansMargin;
        Property<double> lineNumberWidth;

        Property<Point> textPos;
        Property<double> lineNumberAscender;

        Property<CursorShape> cursorShape { CursorShape::IBeam };

        Instance();

        Ref<Item> initItemModel() override;

        View createDelegate(Item *item) override;
        void updateDelegateInView(View &delegate, int layoutIndex) override;

        Property<int> lineNumberDigitCount { [=] { return ilog<10>(lineCount()); } };
        Property<int> lineCount { 1 };

        Ref<TextDocument> document_;
    };

    TextEdit(double width, double height):
        ItemView{new Instance}
    {
        (*this)->size = Size{width, height};
    }

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::ui
