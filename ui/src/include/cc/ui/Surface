/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Painter>

typedef struct _cairo_surface cairo_surface_t;

namespace cc {
namespace ui {

class Painter;

class SurfaceInstance;

class Surface
{
public:
    using Instance = SurfaceInstance;

    Surface() = default;

    Instance *operator->() { return instance_; }
    const Instance *operator->() const { return instance_; }

    explicit operator bool() const { return instance_; }

protected:
    Surface(Instance *instance):
        instance_{instance}
    {}

    template<class T>
    T *my() const { return as<T>(instance_); }

private:
    Ref<Instance> instance_;
};

class SurfaceInstance: public Object
{
public:
    bool isValid() const;

    void nextPage(bool clear = true);

    virtual cairo_surface_t *cairoSurface() const = 0;
};

}} // namespace cc::ui
