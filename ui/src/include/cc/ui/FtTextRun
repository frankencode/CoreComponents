/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/TextRun>
#include <cc/ui/FtGlyphRun>

namespace cc {
namespace ui {

class Painter;
class FtTextCursor;

class FtTextRun: public TextRun
{
public:
    static Ref<FtTextRun> create() {
        return new FtTextRun;
    }

    Ref<TextRun> copy() const override;

    void append(String text, const Font &font) override;

    Point advance() const override { return advance_; }
    Size size() const override { return size_; }
    int byteCount() const override { return byteCount_; }
    int lineCount() const override { return lineCount_; }

    TextAlign textAlign() const override { return textAlign_; }
    void setTextAlign(TextAlign textAlign) override { textAlign_ = textAlign; }

    Ref<TextRun> wrap(double maxWidth, double lineHeight = 0, const TextWrapBehind &wrapBehind = textWrapBehindDefault) const override;

    Ref< Source<const GlyphRun *> > getAllGlyphRuns() const override { return glyphRuns_->getAll<const GlyphRun *>(); }

    Ref<TextCursor> getTextCursor(int byteOffset = 0) const override;

private:
    friend class Object;
    friend class Painter;
    friend class FtTextCursor;

    typedef List< Ref<const FtGlyphRun> > FtGlyphRuns;

    static double maxLineHeight(const FtGlyphRuns *glyphRuns);
    static Ref<const FtGlyphRun> fold(const FtGlyphRuns *glyphRuns);
    static Ref<FtTextRun> unfold(const FtGlyphRun *metaBlock, const FtGlyphRuns *glyphRuns);

    FtTextRun();
    int moveTextCursor(FtTextCursor *cursor, int steps) const;

    Ref<FtGlyphRuns> glyphRuns_;
    Point advance_;
    double firstLineHeight_;
    Size size_;
    int byteCount_;
    int lineCount_;

    TextAlign textAlign_;
};

}} // namespace cc::ui
