/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/ui/Surface>
#include <cc/ui/UpdateRequest>
#include <cc/ui/Layout>
#include <cc/ui/PointerInput>
#include <cc/ui/KeyInput>

namespace cc {
namespace ui {

class Window;
class Image;
class TouchEvent;
class MouseEvent;
class MouseWheelEvent;
class KeyEvent;

/** \TODO allow direct method connection from any Signal to MyView::method() without explicit lambdarisation
  */
class View: public Surface
{
public:
    static Ref<View> create(View *parent = 0);

    Property<bool> visible { true };
    Property<Color> color;

    Signal exposed;

    Property<Point> pos;
    Property<Size> size;

    Property<Point> center { [=]{ return size() / 2; } };
    Property<double> angle { 0 };

    inline View *parent() const { return parent_; }

    Property<int> childCount { 0 };
    View *childAt(int i) const { return children_->valueAt(i); }

    inline Layout *layout() const { return layout_; }

    PointerInput *pointerInput() const { return pointerInput_; }
    KeyInput *keyInput() const { return keyInput_; }

    Point mapToGlobal(Point l) const;
    Point mapToLocal(Point g) const;
    bool containsGlobal(Point g) const;

    void centerInParent();
    void disband();

protected:
    friend class Object;
    friend class Window;
    friend class Application;
    friend class Layout;
    friend class PointerInput;
    friend class KeyInput;

    View(View *parent = 0);
    ~View();

    virtual bool isOpaque() const;
    virtual bool isPainted() const;
    virtual bool isStatic() const;

    virtual void clear();
    virtual void paint();

    void polish(Window *window);
    void update(UpdateReason reason = UpdateReason::Changed);

    virtual void touchEvent(const TouchEvent *event);
    virtual void mouseEvent(const MouseEvent *event);
    virtual void mouseWheelEvent(const MouseWheelEvent *event);
    virtual void keyEvent(const KeyEvent *event);

    void init();
    virtual void childReady(View *child);
    virtual void childDone(View *child);

    Window *window();
    Image *image();

    virtual void insertChild(View *child);
    virtual void removeChild(View *child);

    void adoptChild(View *parent, View *child);

private:
    uint64_t nextSerial() const;

    cairo_surface_t *cairoSurface() const override;

    uint64_t serial_;
    Window *window_;
    View *parent_;

    typedef Map<uint64_t, Ref<View> > Children;
    Ref<Children> children_;

    Ref<Image> image_;
    Ref<Object> context_;
    Ref<Layout> layout_;
    PointerInput *pointerInput_;
    KeyInput *keyInput_;
};

}} // namespace cc::ui
