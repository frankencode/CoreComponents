/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/ui/StylePlugin>
#include <cc/ui/Surface>
#include <cc/ui/UpdateRequest>
#include <cc/ui/Organizer>
#include <cc/ui/PointerEvent>
#include <cc/ui/MouseEvent>
#include <cc/ui/FingerEvent>
#include <cc/ui/WheelEvent>
#include <cc/ui/KeyEvent>
#include <cc/ui/Application>

namespace cc {
namespace ui {

class Window;
class Image;
class Control;

typedef std::function<Point()> AnchorPoint;

class View: public Surface
{
    friend class Object;

public:
    Property<bool> visible { true };
    Property<Color> paper;

    Property<Point> pos;
    Property<Size> size;
    Property<double> padding { 0 };

    Property<Point> center { [=]{ return size() / 2; } };
    Property<double> angle { 0 };
    Property<double> scale { 1 };

    inline View *parent() const { return parent_; }

    Property<int> childCount { 0 };
    View *childAt(int i) const { return children_->valueAt(i); }

    int visibleChildCount() const { return visibleChildren_->count(); }
    View *visibleChildAt(int i) const { return visibleChildren_->valueAt(i); }

    Point mapToGlobal(Point l) const;
    Point mapToLocal(Point g) const;
    bool containsLocal(Point l) const;
    bool containsGlobal(Point g) const;

    View *getTopViewAt(Point g);
    Control *getTopControlAt(Point g);
    bool isParentOfOrEqual(View *other) const;

    double top   () const { return pos()[1]; }
    double left  () const { return pos()[0]; }
    double bottom() const { return pos()[1] + size()[1]; }
    double right () const { return pos()[0] + size()[0]; }

    Point topLeft    () const { return pos(); }
    Point topRight   () const { return pos() + Step { size()[0], 0 }; }
    Point bottomLeft () const { return pos() + Step { 0, size()[1] }; }
    Point bottomRight() const { return pos() + size(); }
    Point centerLeft () const { return pos() + Step { 0, center()[1] }; }
    Point centerRight() const { return pos() + Step { size()[0], center()[1] }; }

    void anchorTopLeftTo    (const AnchorPoint &l) { pos->bind([=]{ return l(); }); }
    void anchorTopRightTo   (const AnchorPoint &l) { pos->bind([=]{ return l() - Step { size()[0], 0 }; }); }
    void anchorBottomLeftTo (const AnchorPoint &l) { pos->bind([=]{ return l() - Step { 0, size()[1] }; }); }
    void anchorBottomRighTo (const AnchorPoint &l) { pos->bind([=]{ return l() - size(); }); }
    void anchorCenterLeftTo (const AnchorPoint &l) { pos->bind([=]{ return l() - Step { 0, center()[1] }; }); }
    void anchorCenterRightTo(const AnchorPoint &l) { pos->bind([=]{ return l() - Step { size()[0], center()[1] }; }); }
    void anchorCenterTo     (const AnchorPoint &l) { pos->bind([=]{ return l() - center(); }); }
    void centerInParent();

    virtual Size preferredSize() const { return Size{}; }
    virtual Size minSize() const { return Size{}; }
    virtual Size maxSize() const { return Size{ std::numeric_limits<double>::max() }; }

    void inheritPaper();

    inline Organizer *organizer() const { return organizer_; }

    template<class T>
    T *organize() { return Object::create<T>(this); }

    template<class T, class... Args>
    T *add(Args... args) { return Object::create<T>(this, args...); }

protected:
    friend class Window;
    friend class Application;
    friend class Organizer;

    View(View *parent = 0);
    ~View();

    virtual bool isOpaque() const;
    virtual bool isPainted() const;
    virtual bool isStatic() const;

    void clear(Color color);

    virtual void clear();
    virtual void paint();

    virtual bool onPointerPressed(const PointerEvent *event);
    virtual bool onPointerReleased(const PointerEvent *event);
    virtual bool onPointerMoved(const PointerEvent *event);

    virtual bool onMousePressed(const MouseEvent *event);
    virtual bool onMouseReleased(const MouseEvent *event);
    virtual bool onMouseMoved(const MouseEvent *event);

    virtual bool onFingerPressed(const FingerEvent *event);
    virtual bool onFingerReleased(const FingerEvent *event);
    virtual bool onFingerMoved(const FingerEvent *event);

    virtual bool onWheelMoved(const WheelEvent *event);

    virtual bool onKeyPressed(const KeyEvent *event);
    virtual bool onKeyReleased(const KeyEvent *event);

    virtual bool onExposed();

    void update(UpdateReason reason = UpdateReason::Changed);

    virtual void childReady(View *child);
    virtual void childDone(View *child);

    Application *app() const;
    StylePlugin *style() const;
    const Theme *theme() const;

    Window *window() const;
    Image *image();

    virtual void insertChild(View *child);
    virtual void removeChild(View *child);

    void adoptChild(View *parent, View *child);

private:
    Property<void> picture { [=]{ clear(); paint(); } };

    virtual bool feedFingerEvent(FingerEvent *event);
    virtual bool feedMouseEvent(MouseEvent *event);
    virtual bool feedWheelEvent(WheelEvent *event);
    virtual bool feedKeyEvent(KeyEvent *event);
    virtual bool feedExposedEvent();

    void init();
    uint64_t nextSerial() const;

    void polish(Window *window);

    cairo_surface_t *cairoSurface() const override;

    uint64_t serial_;
    Window *window_;
    View *parent_;

    typedef Map<uint64_t, Ref<View> > Children;
    Ref<Children> children_;
    Ref<Children> visibleChildren_;

    Ref<Image> image_;
    Ref<Object> context_;
    Ref<Organizer> organizer_;
};

}} // namespace cc::ui
