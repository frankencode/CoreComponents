/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/ui/Surface>
#include <cc/ui/UpdateRequest>
#include <cc/ui/Key>

namespace cc {
namespace ui {

class Window;
class Image;
class TouchEvent;
class MouseEvent;
class MouseWheelEvent;
class KeyEvent;

class View: public Surface
{
public:
    Property<bool> visible;
    Property<Color> color;

    Signal exposed;

    Property<Point> pos;
    Property<Size> size;

    Property<Point> center { [=]{ return size() / 2; } };
    Property<double> angle { 0 };

    Property<Point> mousePos;
    Property<MouseButton> mouseButton;

    Signal pressed;
    Signal released;
    Signal clicked;

    Property<Key> key;

    Signal keyPressed;
    Signal keyReleased;

    inline Window *window() const { return window_; }
    inline View *parent() const { return parent_; }

    int childCount() const { return children_->count(); }
    View *childAt(int i) { return children_->valueAt(i); }

    Point mapToGlobal(Point l) const;
    Point mapToLocal(Point g) const;
    bool containsGlobal(Point g) const;

    virtual void touchEvent(const TouchEvent *event);
    virtual void mouseEvent(const MouseEvent *event);
    virtual void mouseWheelEvent(const MouseWheelEvent *event);
    virtual void keyEvent(const KeyEvent *event);

protected:
    friend class Window;

    View(View *parent = 0);
    ~View();

    virtual bool isOpaque() const;
    virtual bool isPainted() const;
    virtual bool isStatic() const;

    virtual void clear();
    virtual void paint();

    void polish();
    void update(UpdateReason reason = UpdateReason::Changed); // FIXME: obsolete
    void update(const UpdateRequest *request);

    Window *window();
    Image *image();

private:
    uint64_t nextSerial() const;
    void insertChild(View *child);
    void removeChild(View *child);

    cairo_surface_t *cairoSurface() const override;

    uint64_t serial_;
    Window *window_;
    View *parent_;

    typedef Map<uint64_t, Ref<View> > Children;
    Ref<Children> children_;

    Ref<Image> image_;
    Ref<Object> context_;
};

}} // namespace cc::ui
