/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Range>
#include <cc/ui/InputControl>

namespace cc {
namespace ui {

class TextRun;
class TextCursor;
class Timer;
class Editor;

class TextInput: public InputControl
{
    friend class Object;

public:
    String text() const override;
    Point textPos() const override;

    Property<Font> font;
    Property<Size> margin;

protected:
    TextInput(View *parent = 0, const String &initialText = String{});
    ~TextInput();

private:
    Property< Ref<const StringList> > imeChunks;
    Property< Ref<const TextRun> > textRun;
    Property< Ref<TextCursor> > textCursor;
    Property<bool> textCursorVisible;
    Property<Range> selection;

    void startBlink();
    void stopBlink();

    bool onPointerClicked(const PointerEvent *event) override;
    bool onPointerPressed(const PointerEvent *event) override;
    bool onPointerMoved(const PointerEvent *event) override;

    Rect textInputArea() const override;
    void onTextEdited(const String &chunk, int start, int length) override;
    void onTextInput(const String &chunk) override;

    bool onKeyPressed(const KeyEvent *event) override;
    bool onKeyReleased(const KeyEvent *event) override;

    void paste(const String &chunk);
    void paste(Range selection, const String &chunk);

    void paint() override;

    Ref<Editor> editor_;
    Ref<Timer> timer_;
    bool shiftKey_ { false };
};

}} // namespace cc::ui
