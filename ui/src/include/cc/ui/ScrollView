/*
 * Copyright (C) 2018-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Control>

namespace cc {
namespace ui {

class Timer;

class ScrollView: public Control
{
    friend class Object;

public:
    static Ref<ScrollView> create(View *parent = nullptr);

    Property<double> maxFlyTime { 1.5 };
    Property<double> maxSpeed { [=]{ return 3 * max(size()); } };
    Property<double> minHoldTime { 0.1 };
    Property<double> boundary { dp(60) };
    Property<double> maxBounceTime { 0.6 };
    Property<double> traverseTime { 0.5 };

    Property<double> wheelGranularity { 3 * std::ceil(style()->itemHeight2()) };
    Property<double> maxWheelTime { 0.1 };
    Property<bool> wheelInversion { style()->wheelInversion() };
    Property<bool> wheelBouncing { true };

    View *carrier() const { return carrier_; }

protected:
    ScrollView(View *parent = nullptr);
    ~ScrollView();
    void init();

    virtual View *addCarrier();
    virtual void preheat();

    virtual void positionCarrierOnResize();

    void resetCarrier();

    bool carrierAtRest() const { return carrierAtRest_; }

    bool onPointerClicked(const PointerEvent *event) override;
    bool onPointerPressed(const PointerEvent *event) override;
    bool onPointerReleased(const PointerEvent *event) override;
    bool onPointerMoved(const PointerEvent *event) override;
    bool onWheelMoved(const WheelEvent *event) override;
    bool onWindowLeft() override;

private:
    void insertChild(View *child) override;

    bool carrierInsideBoundary() const;
    Point carrierStep(Point p, double b = 0);

    void carrierFlyStart();
    void carrierBounceStart();
    void carrierTraverseStart(Step distance);
    void carrierStop();
    void timerStop();

    void carrierFly();
    void carrierBounce();
    void carrierTraverse();
    void carrierStopped();

    void keepFocusControlInView();

    Property<Control *> focusControl;

    View *carrier_;
    bool isDragged_;
    Point dragStart_;
    Point carrierOrigin_;

    Point lastDragPos_;
    double lastDragTime_;
    double releaseSpeedMagnitude_;
    Step speed_;

    enum class TimerMode { Stopped, Flying, Bouncing, Traversing };
    TimerMode timerMode_ { TimerMode::Stopped };

    Ref<Timer> timer_;
    double lastTime_;

    Point startPos_;
    Point finalPos_;

    bool wasFlying_ { false };
    bool carrierAtRest_ { true };
};

}} // namespace cc::ui
