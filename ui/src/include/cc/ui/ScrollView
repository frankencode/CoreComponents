/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>

namespace cc {
namespace ui {

class Timer;

class ScrollView: public View
{
    friend class Object;

public:
    static Ref<ScrollView> create(View *parent = 0);

    Property<double> minDragDistance { dp(6) };
    Property<double> maxFlyTime { 1.5 };
    Property<double> maxSpeed { [=]{ return 3 * max(size()); } };
    Property<double> minHoldTime { 0.1 };
    Property<double> boundary { dp(60) };
    Property<double> maxBounceTime { 0.6 };
    // Property<Easing> bounceEasing { easing::outBounce };

    View *carrier() const { return carrier_; }

protected:
    ScrollView(View *parent = 0);
    ~ScrollView();
    void init();

    virtual View *addCarrier();

    bool onPointerPressed(const PointerEvent *event) override;
    bool onPointerReleased(const PointerEvent *event) override;
    bool onPointerMoved(const PointerEvent *event) override;

private:
    void insertChild(View *child) override;

    bool carrierInsideBoundary() const;
    Point carrierStep(Point p, double b = 0);
    void carrierFly();
    void carrierBounce();
    void carrierBounceStart();
    void carrierStop();

    View *carrier_;
    bool isDragged_;
    Point dragStart_;
    Point carrierOrigin_;

    Point lastDragPos_;
    double lastDragTime_;
    double releaseSpeedMagnitude_;
    Step speed_;

    enum class TimerMode { Stopped, Flying, Bouncing };
    TimerMode timerMode_ { TimerMode::Stopped };

    Ref<Timer> timer_;
    double lastTime_;

    Point bounceStartPos_;
    Point bounceFinalPos_;
};

}} // namespace cc::ui
