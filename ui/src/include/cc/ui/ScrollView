/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>

namespace cc {
namespace ui {

class Timer;

class ScrollView: public View
{
    friend class Object;

public:
    static Ref<ScrollView> create(View *parent = 0);

    Property<double> minDragDistance { 4 };
    Property<double> maxFlyTime { 1.5 };
    Property<double> maxSpeed { [=]{ return 2 * max(size()); } };

    View *carrier() const { return carrier_; }

protected:
    ScrollView(View *parent = 0);

    void insertChild(View *child) override;

    bool hasPointerInput() const override;
    bool onPointerPressed(const PointerEvent *event) override;
    bool onPointerReleased(const PointerEvent *event) override;
    bool onPointerMoved(const PointerEvent *event) override;

    Point carrierStep(Point p);
    void animate();

    Ref<View> carrier_;
    bool isDragged_;
    Point dragStart_;
    Point carrierOrigin_;

    Point lastDragPos_;
    double lastDragTime_;
    double releaseSpeedMagnitude_;
    Step speed_;

    Ref<Timer> timer_;
    double lastTime_;
};

}} // namespace cc::ui
