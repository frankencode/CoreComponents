/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>

namespace cc::ui {

/** \class Padding cc/ui/Padding
  * \ingroup ui
  * \brief %Padding to be applied to a view within a Layout
  * \see View::padding()
  */
class Padding final: public Object
{
public:
    /** Create primordial paddings
      */
    Padding() = default;

    /** Create new paddings with all sides of equal padding value
      */
    Padding(double allSides):
        Object{new State{allSides}}
    {}

    double left() const { return Object::me ? me().left_ : 0.; } ///< Get left padding
    Padding &left(double newValue) { me().left_ = newValue; return *this; } ///< %Set left padding

    double right() const { return Object::me ? me().right_ : 0.; } ///< Get right padding
    Padding &right(double newValue) { me().right_ = newValue; return *this; } ///< %Set right padding

    double top() const { return Object::me ? me().top_ : 0.; } ///< Get top padding
    Padding &top(double newValue) { me().top_ = newValue; return *this; } ///< %Set top padding

    double bottom() const { return Object::me ? me().bottom_ : 0.; } ///< Get bottom padding
    Padding &bottom(double newValue) { me().bottom_ = newValue; return *this; } ///< %Set bottom padding

    double operator[](int i) { return (i == 0) ? (left() + right()) : (top() + bottom()); } ///< Get padding as size vector

    /** Compare for equality
      */
    bool operator==(const Padding &other) const
    {
        return
            left() == other.left() &&
            right() == other.right() &&
            top() == other.top() &&
            bottom() == other.bottom();
    }

    /** Compare for inequality
      */
    bool operator!=(const Padding &other) const
    {
        return
            left() != other.left() ||
            right() != other.right() ||
            top() != other.top() ||
            bottom() != other.bottom();
    }

private:
    struct State: public Object::State
    {
        explicit State(double allSides = 0.):
            left_{allSides},
            right_{allSides},
            top_{allSides},
            bottom_{allSides}
        {}

        double left_;
        double right_;
        double top_;
        double bottom_;
    };

    State &me() {
        if (!Object::me) Object::me = new State;
        return Object::me.as<State>();
    }

    const State &me() const {
        return Object::me.as<State>();
    }
};

} // namespace cc::ui
