/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Source>
#include <cc/ui/FontFamily>
#include <cc/ui/GlyphRun>
#include <cc/ui/TextRun>

namespace cc { template<class, class> class Map; }

namespace cc {
namespace ui {

class FontManager: public Object
{
public:
    static FontManager *instance();

    void addPath(String path);

    Ref< Source<const FontFamily *> > getFontFamilies() const;

    const FontFamily *selectFontFamily(String name) const;

    virtual Ref<ScaledFont> selectFont(
        String family,
        double size = 10,
        Weight weight = Weight::Normal,
        Slant slant = Slant::Normal,
        Stretch stretch = Stretch::Normal
    ) const = 0;

    virtual Ref<GlyphRun> typeSet(const String &text, const Font &font, const Point &origin = Point{}) const = 0;

    virtual Ref<TextRun> createTextRun() const = 0;

protected:
    FontManager();
    ~FontManager();

    virtual bool isFontFace(String path) const;
    virtual Ref<FontFace> openFontFace(String path) = 0;

    void addFontFace(const FontFace *fontFace);
    const FontFamily *selectNearestFontFamily(String name) const;

    static Ref<StringList> familySearchPattern(String name);

    typedef Map< String, Ref<FontFamily> > FontFamilies;
    Ref<FontFamilies> fontFamilies_;
};

}} // namespace cc::ui
