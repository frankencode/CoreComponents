/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Source>
#include <cc/ui/FontFamily>
#include <cc/ui/GlyphRun>
#include <cc/ui/TextRun>

namespace cc { template<class, class> class Map; }

namespace cc {
namespace ui {

class FontManager: public Object
{
public:
    static FontManager *instance();

    void addPath(const String &path);

    Ref< Source<const FontFamily *> > getFontFamilies() const;
    const FontFamily *selectFontFamily(const String &name) const;

    virtual Ref<const ScaledFont> selectFont(const Font &font) const = 0;
    virtual Ref<GlyphRun> typeset(const String &text, const Font &font, const Point &origin = Point{}) const = 0;

    virtual Ref<TextRun> createTextRun() const = 0;

    typedef std::function<void(const Font &font, int i0, int i1)> ReturnFontRange;
    virtual void selectFontRanges(const String &text, const Font &font, const ReturnFontRange &fontRange) const = 0;

protected:
    static Font fixup(const Font &font);

    FontManager();
    ~FontManager();

    virtual bool isFontFace(const String &path) const;
    virtual Ref<FontFace> openFontFace(const String &path) = 0;

    void addFontFace(const FontFace *fontFace);
    const FontFamily *selectNearestFontFamily(const String &name) const;

    static Ref<StringList> familySearchPattern(const String &name);

    typedef Map< String, Ref<FontFamily> > FontFamilies;
    Ref<FontFamilies> fontFamilies_;
};

}} // namespace cc::ui
