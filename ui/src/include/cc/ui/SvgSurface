/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Surface>
#include <cc/Stream>
#include <cairo/cairo.h>

namespace cc {
namespace ui {

class SvgSurface: public Surface
{
public:
    class Instance: public Surface::Instance
    {
    private:
        friend class SvgSurface;

        static cairo_status_t cairoWrite(void *closure, const unsigned char *data, unsigned int length);

        Instance(const Stream &stream, Size sizePt);
        ~Instance();

        cairo_surface_t *cairoSurface() const override;

        Stream stream_;
        cairo_surface_t *cairoSurface_;
    };

    SvgSurface() = default;

    SvgSurface(const Stream &stream, Size sizePt):
        Surface{new Instance{stream, sizePt}}
    {}
};

}} // namespace cc::ui
