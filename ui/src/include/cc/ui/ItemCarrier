/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Item>
#include <cc/ui/View>

namespace cc { template<class, class> class Pile; }

namespace cc {
namespace ui {

class ItemView;

class ItemCarrier: public View
{
public:
    class LayoutItem: public Object, public IndexTracking
    {
        friend class Object;

    public:
        LayoutItem(Item *item, const View &delegate):
            item_{item},
            delegate_{delegate}
        {}

        Item *item_;
        View delegate_;
    };

    class Instance: public View::Instance
    {
    private:
        friend class ItemCarrier;
        friend class ItemView;

        Property<double> layoutExtent;
        Property<double> cacheMargin;

        Instance(Item *rootItem);

        int generateLayout(Item *item, int itemIndex0, int itemIndex1, int layoutIndex = 0);
        void updateView(bool preheat);

        Item *rootItem_;

        typedef Pile< Ref<LayoutItem>, double > ItemLayout;
        Ref<ItemLayout> layout_;

        View highlight_;
    };

    ItemCarrier(Item *rootItem):
        View{new Instance{rootItem}}
    {}

    ItemCarrier(Instance *instance):
        View{instance}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::ui
