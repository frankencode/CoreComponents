/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/GlyphRun>
#include <cc/ui/TextCursor>

namespace cc {
namespace ui {

class TextRun: public Object
{
public:
    static Ref<TextRun> create();
    static Ref<TextRun> create(const String &text, const Font &font = Font());

    static Ref<TextRun> copy(const TextRun *other) { return other->copy(); }

    virtual Ref<TextRun> copy() const = 0;

    virtual void append(const String &text, const Font &font = Font()) = 0;
    void append(const TextRun *textRun);
    void appendHtml(const String &text, const Font &font = Font());

    virtual Point advance() const = 0;
    virtual Size size() const = 0;
    virtual double maxAscender() const = 0;
    virtual double minDescender() const = 0;
    virtual int byteCount() const = 0;
    virtual int lineCount() const = 0;
    double lineHeight() const;

    virtual TextAlign textAlign() const = 0;
    virtual void setTextAlign(TextAlign textAlign) = 0;

    virtual Ref<TextRun> wrap(double maxWidth, double lineHeight = 0, const TextWrapBehind &wrapBehind = textWrapBehindDefault) const = 0;

    virtual Ref< Source<const GlyphRun *> > getAllGlyphRuns() const = 0;

    virtual Ref<TextCursor> getTextCursor(int byteOffset = 0) const = 0;
    virtual Ref<TextCursor> getNearestTextCursor(Point pointerPos) const;
    virtual Ref<TextCursor> getNearestTextCursorBelow(const TextCursor *cursor) const;
    virtual Ref<TextCursor> getNearestTextCursorAbove(const TextCursor *cursor) const;

private:
    String replaceEntities(const String &text);
};

}} // namespace cc::ui
