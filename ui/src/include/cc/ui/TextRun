/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Font>
#include <cc/ui/TextCursor>

namespace cc::ui {

/** \class TextRun cc/ui/TextRun
  * \ingroup ui
  * \brief Richtext typeset sequence
  */
class TextRun: public Object
{
public:
    /** Typeset \a text with \a font (recognised HTML tags: u, b, i)
      */
    static TextRun fromHtml(const String &text, const Font &font = Font{});

    /** Create an empty text run
      */
    TextRun();

    /** Typeset \a text with \a font (text is interpreted as plain text)
      */
    TextRun(const String &text, const Font &font = Font{});

    /** Typeset \a text (plain text) with \a font and append glyphs to this text run
      */
    void append(const String &text, const Font &font = Font{})
    {
        me().append(text, font);
    }

    /** Typeset \a text (HTML text) with \a font and append glyphs to this text run
      */
    void appendHtml(const String &text, const Font &font = Font{});

    /** Wrap this text run
      * \param maxWidth Maximum width of the wrapped text run
      * \param textAlign %Alignment of the wrapped text
      * \param lineHeight %Line height
      * \param wrapBehind \copydoc TextWrapBehind
      * \return Wrapped text run
      */
    TextRun wrap(double maxWidth, TextAlign textAlign = TextAlign::Left, double lineHeight = 0, const TextWrapBehind &wrapBehind = textWrapBehindDefault) const
    {
        return me().wrap(maxWidth, textAlign, lineHeight, wrapBehind);
    }

    /** %Advance of this text run
      */
    Point advance() const { return me().advance_; }

    /** Height of the first line (in pixel)
      */
    double firstLineHeight() const { return me().firstLineHeight_; }

    /** %Size of this text run
      */
    Size size() const { return me().size_; }

    /** Highest ascender
      */
    double maxAscender() const { return me().maxAscender_; }

    /** Lowest descender
      */
    double minDescender() const { return me().minDescender_; }

    /** %Number of lines
      */
    int lineCount() const { return me().lineCount_; }

    /** %Number of bytes
      */
    int byteCount() const { return me().byteCount_; }

    /** Get a text cursor situated at \a byteOffset
      */
    TextCursor getTextCursor(int byteOffset = 0) const { return me().getTextCursor(byteOffset); }

    /** Get a text cursor located closest to \a pointerPos
      */
    TextCursor getNearestTextCursor(Point pointerPos) const;

    /** Get the nearest text cursor a line below the current line
      */
    TextCursor getNearestTextCursorBelow(const TextCursor &cursor) const;

    /** Get the nearest text cursor a line above the current line
      */
    TextCursor getNearestTextCursorAbove(const TextCursor &cursor) const;

    /** Get a text cursor located at the line start closest to \a pointerPos
      */
    TextCursor getNearestLineStart(Point pointerPos) const;

    /** Get a text cursor located closest to \a pointerPos within the same line
      */
    TextCursor getNearestTextCursorInLine(Point pointerPos) const;

protected:
    friend class Object;

    struct State: public Object::State
    {
        virtual void append(const String &text, const Font &font) = 0;
        virtual TextRun wrap(double maxWidth, TextAlign textAlign, double lineHeight, const TextWrapBehind &wrapBehind) const = 0;
        virtual TextCursor getTextCursor(int byteOffset) const = 0;

        Point advance_;
        double firstLineHeight_ { 0 };
        Size size_;
        double maxAscender_ { 0 };
        double minDescender_ { 0 };
        int lineCount_ { 1 };
        long byteCount_ { 0 };
        TextAlign textAlign_ { TextAlign::Left };
    };

    explicit TextRun(State *newState):
        Object{newState}
    {}

    static String replaceEntities(String text);

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::ui
