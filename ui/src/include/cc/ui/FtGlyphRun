/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cairo/cairo.h>
#include <cairo/cairo-ft.h>
#include <cc/Array>
#include <cc/ui/FtScaledFont>
#include <cc/ui/GlyphRun>

namespace cc {
namespace ui {

class FtFontManager;
class FtTextRun;

typedef Array<cairo_glyph_t> CairoGlyphs;
typedef Array<cairo_text_cluster_t> CairoTextClusters;

class FtGlyphRun: public GlyphRun
{
public:
    String text() const override { return text_; }
    Font font() const override { return font_; }

    Point origin() const override { return origin_; }
    Point advance() const override { return advance_; }
    Size size() const override { return size_ ; }
    double maxAscender() const override { return maxAscender_; }
    double minDescender() const override { return minDescender_; }

    int byteCount() const override { return text_->count(); }
    int lineCount() const override { return lineCount_; }

    Ref<GlyphRun> wrap(double maxWidth, TextAlign textAlign = TextAlign::Left, double lineHeight = 0, const TextWrapBehind &wrapBehind = textWrapBehindDefault) const override;
    Ref<GlyphRun> elide(double maxWidth) const override;

    Ref<GlyphRun> copy() const override;

    const FtScaledFont *ftScaledFont() const { return Object::cast<const FtScaledFont *>(font_->getScaledFont()); }

    CairoGlyphs *cairoGlyphs() const { return cairoGlyphs_; }
    CairoTextClusters *cairoTextClusters() const { return cairoTextClusters_; }

private:
    friend class Object;
    friend class FtFontManager;
    friend class FtTextRun;

    FtGlyphRun(): lineCount_(1) {}
    FtGlyphRun(const String &text, const Font &font, const Point &origin);

    Ref<FtGlyphRun> ftCopy() const;

    static void lineJustify(
        FtGlyphRun *ftGlyphRun, double spaceDelta,
        int byteOffset0, int glyphOffset0, int clusterIndex0,
        int byteOffset1, int glyphOffset1, int clusterIndex1
    );

    static void lineShift(
        FtGlyphRun *ftGlyphRun,
        int glyphOffset0,
        int glyphOffset1,
        double shiftX
    );

    static void lineShift(FtGlyphRun *ftGlyphRun, double shiftX);

    String text_;
    Font font_;

    Point origin_;
    Point advance_;
    Size size_;
    double maxAscender_ { 0 };
    double minDescender_ { 0 };
    int lineCount_ { 1 };

    Ref<CairoGlyphs> cairoGlyphs_;
    Ref<CairoTextClusters> cairoTextClusters_;
    Step finalGlyphAdvance_;
};

}} // namespace cc::ui
