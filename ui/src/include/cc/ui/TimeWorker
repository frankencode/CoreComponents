/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Thread>
#include <cc/Channel>
#include <cc/Semaphore>
#include <cc/Map>
#include <cc/ui/Timer>

namespace cc {
namespace ui {

class TimeMaster;

class TimeWorker: public Thread
{
public:
    static Ref<TimeWorker> create(TimeMaster *master);
    void startTimer(Timer *timer);
    void ack();
    void shutdown();

protected:
    TimeWorker(TimeMaster *master);

    void run() override;

    class TimeoutOrder;

    class Timeout: public Object {
    public:
        static Ref<Timeout> create(Timer *timer) {
            return new Timeout(timer);
        }

        inline bool isActive() const {
            return timer_->isActive_ && timer_->timeout_ == static_cast<const void *>(this);
        }

        Ref<const Timer> timer_;
        double nextTime_;
        double interval_;

    private:
        Timeout(Timer *timer):
            timer_(timer),
            nextTime_(timer->firstTime()),
            interval_(timer->interval())
        {
            timer->timeout_ = this;
        }
    };

    class TimeKey {
    public:
        TimeKey():
            nextTime_(0),
            serial_(0)
        {}

        TimeKey(double nextTime, uint64_t serial):
            nextTime_(nextTime),
            serial_(serial)
        {}

        inline bool operator<(const TimeKey &b) const {
            return
                (nextTime_ < b.nextTime_) ||
                (nextTime_ == b.nextTime_ && serial_ < b.serial_);
        }

    private:
        double nextTime_;
        uint64_t serial_;
    };

    TimeMaster *master_;

    typedef Channel< Ref<Timeout> > StartRequests;
    Ref<StartRequests> startRequests_;

    typedef Map<TimeKey, Ref<Timeout> > Timeouts;
    Ref<Timeouts> timeouts_;

    Ref<Semaphore> ack_;
};

}} // namespace cc::ui
