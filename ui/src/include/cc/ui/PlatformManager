/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/PlatformPlugin>
#include <cc/Map>

namespace cc { template<typename> class Singleton; }

namespace cc {
namespace ui {

class PlatformManager: public Object
{
public:
    static PlatformManager *instance();

    bool getPlugin(const String &name, PlatformPlugin **plugin) const;
    Ref< Source<PlatformPlugin *> > getAllPlugins() const;

    PlatformPlugin *activePlugin() const;
    void activatePlugin(PlatformPlugin *plugin);

private:
    friend class Singleton<PlatformManager>;
    friend class PlatformPlugin;

    PlatformManager();

    void registerPlugin(PlatformPlugin *plugin);

    using Plugins = Map< String, Ref<PlatformPlugin> >;
    Plugins plugins_;

    Ref<PlatformPlugin> activePlugin_;
};

}} // namespace cc::ui
