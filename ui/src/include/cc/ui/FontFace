/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/Object>

namespace cc::ui {

/** \class FontFace cc/ui/FontFace
  * \ingroup ui
  * \brief Individual font face within a font family
  */
class FontFace: public Object
{
public:
    /** Create a null font face
      */
    FontFace() = default;

    /** %File path this face was loaded from
      */
    String path() const { return me().path_; }

    /** Name of font family
      */
    String family() const { return me().family_; }

    /** \copydoc Weight
      */
    Weight weight() const { return me().weight_; }

    /** \copydoc Slant
      */
    Slant slant() const { return me().slant_; }

    /** \copydoc Stretch
      */
    Stretch stretch() const { return me().stretch_; }

    /** \copydoc Pitch
      */
    Pitch pitch() const { return me().pitch_; }

    String toString() const
    {
        return Format{}
            << "FontFace {" << nl
            << "  family:  " << family() << nl
            << "  weight:  " << weight() << nl
            << "  slant:   " << slant() << nl
            << "  stretch: " << stretch() << nl
            << "  pitch:   " << pitch() << nl
            << "  path:    " << path() << nl
            << "}";
    }

protected:
    struct State: public Object::State
    {
        State(const String &path):
            path_{path}
        {}

        String path_;
        String family_;
        Weight weight_;
        Slant slant_;
        Stretch stretch_;
        Pitch pitch_;
    };

    explicit FontFace(State *newState):
        Object{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::ui
