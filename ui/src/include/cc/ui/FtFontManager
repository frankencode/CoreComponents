/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/FontManager>

namespace cc { template<class> class ThreadLocalSingleton; }

namespace cc {
namespace ui {

class FtGlyphRun;

class FtFontManager: public FontManager
{
public:
    static FtFontManager *instance();

    Ref<ScaledFont> selectFont(const Font &font) const override;

    Ref<GlyphRun> typeSet(const String &text, const Font &font, const Point &origin = Point{}) const override;
    Ref<FtGlyphRun> ftTypeSet(const String &text, const Font &font, const Point &origin = Point{}) const;

    Ref<TextRun> createTextRun() const override;

private:
    friend class ThreadLocalSingleton<FtFontManager>;

    FtFontManager() {}

    Ref<FontFace> openFontFace(const String &path) override;
};

}} // namespace cc::ui
