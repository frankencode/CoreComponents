/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/ui/UpdateRequest>
#include <cc/ui/Image>

namespace cc { template<class> class Queue; }

namespace cc {
namespace ui {

typedef Queue< Ref<const UpdateRequest> > Frame;

enum class WindowMode: unsigned int {
    Default           = 0,
    Fullscreen        = 1,
    FullscreenDesktop = 2,
    OpenGl            = 4,
    Hidden            = 8,
    Borderless        = 16,
    FixedSize         = 32,
    Minimized         = 64,
    Maximized         = 128,
    InputGrabbed      = 256,
    InputFocus        = 512,
    MouseFocus        = 1024,
    Foreign           = 2048,
    AllowHighDpi      = 4096,
    MouseCapture      = 8192,
    AlwaysOnTop       = 16384,
    SkipTaskBar       = 32768,
    Utility           = 65536,
    Tooltip           = 131072,
    PopupMenu         = 262144,
    VSync             = 524288,
    Accelerated       = 1048576
};

CC_BITMASK(WindowMode, unsigned int)

class View;
class Control;
class FingerEvent;
class MouseEvent;
class WheelEvent;
class KeyEvent;

class Window: public Object
{
public:
    static Window *open(View *view, String title = String{}, WindowMode mode = WindowMode::Default);

    View *view() const { return view_; }

    Property<bool> visible { true };
    Property<String> title;
    Property<Point> pos;
    Property<Size> size;

protected:
    friend class Application;
    friend class View;
    friend class Control;

    Window(View *view, String title);
    ~Window();

    static Object *getContext(View *view);
    static void setContext(View *view, Object *context);

    static bool isOpaque(View *view);
    static bool isPainted(View *view);
    static bool isStatic(View *view);
    static Image *image(View *view);

    void addToFrame(const UpdateRequest *request);
    void commitFrame();

    virtual void renderFrame(Frame *frame) = 0;

    Ref<View> view_;
    Ref<Frame> nextFrame_;

    const Control *cursorControl_ { nullptr };
};

}} // namespace cc::ui
