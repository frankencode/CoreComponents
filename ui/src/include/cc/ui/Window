/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>

namespace cc { template<class> class Queue; }

namespace cc {
namespace ui {

typedef Queue< Ref<const UpdateRequest> > Frame;

enum class WindowMode: unsigned int {
    Fullscreen         = 1,
    FullscreenDesktop  = 2,
    OpenGl             = 4,
    Shown              = 8,
    Hidden             = 16,
    Borderless         = 32,
    Resizable          = 64,
    Minimized          = 128,
    Maximized          = 256,
    InputGrabbed       = 512,
    InputFocus         = 1024,
    MouseFocus         = 2048,
    Foreign            = 4096,
    AllowHighDpi       = 8192,
    MouseCapture       = 16384,
    AlwaysOnTop        = 32768,
    SkipTaskBar        = 65536,
    Utility            = 131072,
    Tooltip            = 262144,
    PopupMenu          = 524288,
    VSync              = 1048576,
    Accelerated        = 2097152,
    Default            = Shown|Resizable
};

CC_BITMASK(WindowMode, unsigned int)

class Window: public Object
{
public:
    static Window *open(View *view, String title = String{}, WindowMode mode = WindowMode::Default);

    View *view() const { return view_; }

    Property<bool> visible { true };
    Property<String> title;
    Property<Point> pos;
    Property<Size> size;

protected:
    friend class View;

    Window(View *view, String title);
    ~Window();

    static Object *getContext(View *view) { return view->context_; }
    static void setContext(View *view, Object *context) { view->context_ = context; }

    static bool isOpaque(View *view) { return view->isOpaque(); }
    static bool isPainted(View *view) { return view->isPainted(); }
    static bool isStatic(View *view) { return view->isStatic(); }
    static Image *image(View *view) { return view->image(); }
    static void update(View *view, Ref<UpdateRequest> request = 0) { view->update(request); }

    void addToFrame(const UpdateRequest *request);
    void commitFrame();

    virtual void renderFrame(Frame *frame) = 0;

    Ref<View> view_;
    Ref<Frame> nextFrame_;

    Ref<View> pointerTarget_;

    typedef Map<TouchFingerId, Ref<View> > TouchTargets;
    Ref<TouchTargets> touchTargets_;
};

}} // namespace cc::ui
