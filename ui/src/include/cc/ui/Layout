/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>

namespace cc {
namespace ui {

class View;

class Layout
{
public:
    class Instance: public Object
    {
    protected:
        friend class View;

        Instance(View &view);

        virtual void childReady(View child) = 0;
        virtual void childDone(View child) = 0;

        View &view() const { return view_; }
        void updateView();

        View &view_;
    };

    Layout() = default;

    Instance *operator->() { return instance_; }

    operator bool() const { return instance_; }

protected:
    Layout(Instance *instance):
        instance_{instance}
    {}

    template<class T>
    T *my() const { return as<T>(instance_); }

private:
    Ref<Instance> instance_;
};

}} // namespace cc::ui
