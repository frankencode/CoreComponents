/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/ItemVisual>

namespace cc { template<class, class> class Pile; }

namespace cc {
namespace ui {

class ItemLayout: public Object
{
public:
    static Ref<ItemLayout> create(Item *root, double maxWidth = 0);

    Item *root() const { return root_; }
    double maxWidth() const { return maxWidth_; }

    double extent() const { return visuals_->extent(); }
    int count() const { return visuals_->count(); }
    ItemVisual *at(int i) { return visuals_->at(i); }
    double getPosAt(int i) { return visuals_->getPosAt(i); }

    void getView(double pos0, double pos1, int *index0, int *index1, double *itemPos0) const {
        return visuals_->getView(pos0, pos1, index0, index1, itemPos0);
    }

    Signal changed;

private:
    ItemLayout(Item *root, double maxWidth);

    int generateLayout(Item *item, int itemIndex0, int itemIndex1, int layoutIndex = 0);

    Item *root_;
    double maxWidth_;

    typedef Pile< Ref<ItemVisual>, double > Visuals;
    Ref<Visuals> visuals_;
};

}} // namespace cc::ui
