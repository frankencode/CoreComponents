/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>
#include <cc/ui/Visual>

namespace cc {
namespace ui {

class SingleLineItemDelegate: public View
{
public:
    class Instance: public View::Instance
    {
    public:
        Property< Ref<Visual> > icon;
        Property<String> text;

        bool isPainted() const override { return false; }

        Size preferredSize() const override;
        Size minSize() const override;

    private:
        friend class SingleLineItemDelegate;

        Property<Size> preferredSize_;

        Instance(const String &text, Visual *icon);
    };

    SingleLineItemDelegate(const String &text = String{}, Visual *icon = nullptr):
        View{new Instance{text, icon}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::ui
