/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/ScaledFont>

namespace cc {
namespace ui {

class StylePlugin;

/** Text styling
  */
class Font
{
public:
    class Instance {
    public:
        String family() const { return family_; }
        void setFamily(const String &newValue) { family_ = newValue; }

        double size() const { return size_; }
        void setSize(double newValue) { size_ = newValue; }

        Slant slant() const { return slant_; }
        void setSlant(Slant newValue) { slant_ = newValue; }

        Weight weight() const { return weight_; }
        void setWeight(Weight newValue) { weight_ = newValue; }

        Stretch stretch() const { return stretch_; }
        void setStretch(Stretch newValue) { stretch_ = newValue; }

        Decoration decoration() const { return decoration_; }
        void setDecoration(Decoration newValue) { decoration_ = newValue; }

        Color ink() const { return ink_; }
        void setInk(Color newValue) { ink_ = newValue; }

        Color paper() const { return paper_; }
        void setPaper(Color newValue) { paper_ = newValue; }

        bool isValid() const { return size_ > 0; }

        const ScaledFont *getScaledFont() const;
        const FontMetrics *getMetrics() const;

    private:
        friend class Font;
        friend class FontManager;

        inline static StylePlugin *style() { return Font::style(); }

        Instance(): size_{-1} {}
        Instance(double size): size_{float(size)} {}
        Instance(String family, double size): family_{family}, size_{float(size)} {}

        String family_;
        float size_;
        Slant slant_ { Slant::Normal };
        Weight weight_ { Weight::Normal };
        Stretch stretch_ { Stretch::Normal };
        Decoration decoration_ { Decoration::None };
        Color ink_;
        Color paper_;

        mutable Ref<const ScaledFont> scaledFont_;
    };

    Font(double size = -1): instance_{size} {}
    Font(String family, double size = -1): instance_{family, size} {}

    Font &operator<<(Slant slant) {
        (*this)->setSlant(slant);
        return *this;
    }

    Font &operator<<(Weight weight) {
        (*this)->setWeight(weight);
        return *this;
    }

    Font &operator<<(Stretch stretch) {
        (*this)->setStretch(stretch);
        return *this;
    }

    Font &operator<<(Decoration decoration) {
        (*this)->setDecoration(decoration);
        return *this;
    }

    Font &operator<<(Pitch pitch);

    Font &operator<<(Color color) {
        (*this)->setInk(color);
        return *this;
    }

    Font &operator*=(double scale);

    const Instance *operator->() const { return &instance_; }
    Instance *operator->() { return &instance_; }

    bool operator==(const Font &b) const { return !differ(*this, b); }
    bool operator!=(const Font &b) const { return differ(*this, b); }

    explicit operator bool() const { return (*this)->isValid(); }

private:
    friend class Instance;

    static StylePlugin *style();
    static bool differ(const Font &a, const Font &b);

    Instance instance_;
};

inline Font operator*(const Font &font, double scale) { Font f = font; return f *= scale; }
inline Font operator*(double scale, const Font &font) { return font * scale; }

String str(const Font &font);

}} // namespace cc::ui
