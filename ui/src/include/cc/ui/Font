/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#include <cc/Variable>
#include <cc/ui/ScaledFont>

namespace cc {
namespace ui {

class ScaledFont;

/** Text styling
  */
class Font
{
public:
    class Instance {
    public:
        Variable<String> family;
        Variable<double> size;
        Variable<Slant> slant;
        Variable<Weight> weight;
        Variable<Stretch> stretch;
        Variable<Decoration> decoration;
        Variable<Color> color;

        const ScaledFont *getScaledFont();

    private:
        friend class Font;
        friend class FontManager;

        Instance(): size{-1} {}
        Instance(double size_): size{size_} {}
        Instance(String family_, double size_): family{family_}, size{size_} {}

        Ref<const ScaledFont> scaledFont_;
    };

    Font(double size = -1): instance_{size} {}
    Font(String family, double size): instance_{family, size} {}

    const Instance *operator->() const { return &instance_; }
    Instance *operator->() { return &instance_; }

    bool operator==(const Font &b) const { return !differ(*this, b); }
    bool operator!=(const Font &b) const { return differ(*this, b); }

private:
    static bool differ(const Font &a, const Font &b);

    Instance instance_;
};

}} // namespace cc::ui
