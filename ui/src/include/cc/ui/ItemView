/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Item>
#include <cc/ui/ScrollView>

namespace cc {
namespace ui {

class ItemCarrier;

class ItemView: public ScrollView
{
    friend class Object;

public:
    Property<double> cacheRatio { 2 };
    Signal clicked;

    int currentRow() const;
    int rowCount() const;

    Item *currentItem() const;
    Item *itemAt(int row) const;

protected:
    ItemView(View *parent, Item *rootItem);

    Item *rootItem() { return rootItem_; }

    virtual View *addDelegate(View *parent, Item *item);
    virtual void updateDelegateInView(View *delegate, int layoutIndex) {}

    View *delegateAt(int row) const;

private:
    friend class ItemCarrier;

    Property<int> currentRow_ { -1 };
    Property<View *> currentDelegate_ { nullptr };

    View *addCarrier() override;
    void preheat() override;

    bool onPointerClicked(const PointerEvent *event) override;
    bool onPointerPressed(const PointerEvent *event) override;
    bool onPointerReleased(const PointerEvent *event) override;
    bool onWheelMoved(const WheelEvent *event) override;
    bool onWindowLeft() override;

    ItemCarrier *itemCarrier() const;

    Ref<Item> rootItem_;
    Color delegatePaperSaved_;
};

}} // namespace cc::ui
