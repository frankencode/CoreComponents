/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/ScrollView>
#include <cc/ui/Item>

namespace cc {
namespace ui {

class ItemCarrier;

class ItemView: public ScrollView
{
public:
    class Instance: public ScrollView::Instance
    {
    public:
        Property<double> cacheRatio { 2 };
        Signal clicked;

        int currentRow() const;
        int rowCount() const;

        Item *currentItem() const;
        Item *itemAt(int row) const;

    protected:
        Instance(Item *rootItem = nullptr);

        virtual Ref<Item> initItemModel();
        void resetItemModel();

        Item *rootItem() { return rootItem_; }

        virtual View createDelegate(Item *item);
        virtual void updateDelegateInView(View &delegate, int layoutIndex) {}

        View delegateAt(int row) const;

    private:
        friend class ItemView;
        friend class ItemCarrier;

        Property<int> currentRow_ { -1 };
        Property<View> currentDelegate_;

        View createCarrier() override;
        void preheat() override;

        ItemCarrier itemCarrier() const;

        Ref<Item> rootItem_;
        Color delegatePaperSaved_;
        bool hasSavedDelegatePaper_ { false };
    };

    ItemView(double width, double height):
        ScrollView{new Instance}
    {
        (*this)->size = Size{width, height};
    }

    ItemView(Instance *instance):
        ScrollView{instance}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::ui
