/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/TextEditorWithHistory>
#include <cc/ui/TextItem>

namespace cc { template<class, class> class Pile; }

namespace cc {
namespace ui {

class TextEdit;

class TextDocument: public TextEditorWithHistory
{
    friend class Object;

public:
    int byteCount() const override { return byteCount_(); }
    int lineCount() const { return lineCount_(); }

    void load(const string &text);

    string copy(Range range) const override;
    Range paste(Range range, const string &newChunk);

private:
    friend class TextEdit;

    TextDocument(const string &initialText = "");

    Item *rootItem() const { return rootItem_; }

    string filterChunk(const string &newChunk) const override;
    void pasteChunk(Range range, const string &newChunk) override;

    void cut(Range range);
    void pasteFragment(int targetOffset, const string &fragment);
    void breakLine(int targetOffset);

    Property<int> byteCount_ { 0 };
    Property<int> lineCount_ { 1 };

    Ref<Item> rootItem_;

    typedef Pile<TextItem *, int> Lines;
    Ref<Lines> lines_;
};

}} // namespace cc::ui
