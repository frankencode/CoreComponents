/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Property>
#include <cc/System>
#include <cc/ui/easing>
#include <cc/ui/Timer>

namespace cc {
namespace ui {

template<class T>
class Transition: public Object, private PropertyMutator<T>
{
public:
    typedef std::function<double(double)> Easing;

    static Transition *setup(Property<T> &property, double duration, const Easing &easing = easing::linear)
    {
        Ref<Transition> transition = new Transition(property, duration, easing);
        Transition *self = transition;
        property->restrict([transition, self](T &newValue, T oldValue){
            if (self->isActive()) return false;
            self->start(oldValue, newValue);
            return false;
        });
        return transition;
    }

    void start(T oldValue, T newValue)
    {
        if (oldValue == newValue || timer_->isActive()) return;
        oldValue_ = oldValue;
        newValue_ = newValue;
        timer_->start();
    }

    bool isActive() const { return timer_->isActive(); }

private:
    Transition(Property<T> &property, double duration, const Easing &easing):
        alias_(alias(property)),
        duration_(duration),
        easing_(easing),
        timer_(Timer::create(1./60.))
    {
        timer_->triggered->connect([this]{timeout();});
    }

    void timeout()
    {
        const double t0 = timer_->startTime();
        const double t1 = t0 + duration_;
        const double t = System::now();

        if (t >= t1) {
            PropertyMutator<T>::store(alias_, newValue_);
            timer_->stop();
        }
        else {
            const T &a = oldValue_;
            const T &b = newValue_;
            double s = easing_((t - t0) / (t1 - t0));
            PropertyMutator<T>::store(
                alias_,
                (1 - s) * a + s * b
            );
        }
    }

    Property<T> alias_;
    double duration_;
    Easing easing_;
    Ref<Timer> timer_;
    T oldValue_;
    T newValue_;
};

template<class T>
Transition<T> *easeOn(Property<T> &property, double duration, const typename Transition<T>::Easing &easing = easing::linear)
{
    return Transition<T>::setup(property, duration, easing);
}

}} // namespace cc::ui
