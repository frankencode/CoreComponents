/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>
#include <cc/Color>
#include <cc/Vector>
#include <cc/Property>
#include <cc/bitmask>

namespace cc {
namespace ui {

using cc::str;

/** font slant
  */
enum class Slant: uint8_t {
    Normal,
    Italic,
    Oblique = Italic
};

String str(Slant slant);

/** font width to height ratio
  */
enum class Stretch: uint8_t {
    UltraCondensed = 1,
    ExtraCondensed = 2,
    Condensed      = 3,
    SemiCondensed  = 4,
    Normal         = 5,
    SemiExpanded   = 6,
    Expanded       = 7,
    ExtraExpanded  = 8,
    UltraExpanded  = 9
};

String str(Stretch stretch);

/** visual thickness of a font
  */
enum class Weight: uint8_t {
    Thin       = 1,
    ExtraLight = 2,
    Light      = 3,
    Normal     = 4,
    Medium     = 5,
    SemiBold   = 6,
    Bold       = 7,
    ExtraBold  = 8,
    Black      = 9
};

String str(Weight weight);

/** font pitch
  */
enum class Pitch {
    Fixed,   ///< monospace font
    Variable ///< variable-width font
};

String str(Pitch pitch);

/** text alignment
  */
enum class TextAlign {
    Left,   ///< align left
    Right,  ///< align right
    Center, ///< align center
    Justify ///< align justify
};

String str(TextAlign align);

/** text decoration
  */
enum class TextDecoration: unsigned int {
    None      = 0,
    Underline = 1,
    StrikeOut = 2
};

CC_BITMASK(TextDecoration, unsigned int)

String str(TextDecoration decoration);

/** alignment within a Column
  */
enum class ColumnAlign {
    Auto,  ///< align according to language preference
    Left,  ///< align left
    Right, ///< align right
    Center ///< align center
};

String str(ColumnAlign align);

/** alignment within a Row
  */
enum class RowAlign {
    Top,    ///< align top
    Bottom, ///< align bottom
    Center  ///< align center
};

String str(RowAlign align);

/** mouse button flags
  */
enum class MouseButton: unsigned int {
    None   = 0,
    Left   = 1,
    Right  = 2,
    Middle = 4,
    X1     = 8,
    X2     = 16
};

CC_BITMASK(MouseButton, unsigned int);

String str(MouseButton mask);

/** event type of touch, mouse or pen input
  */
enum class PointerAction {
    Moved,
    Pressed,
    Released
};

String str(PointerAction action);

enum class KeyAction {
    Pressed,
    Released
};

String str(KeyAction action);

typedef Vector<double, 2> Point;
typedef Vector<double, 2> Pos;
typedef Vector<double, 2> Size;
typedef Vector<double, 2> Step;
typedef Vector<double, 2> Ratio;
typedef Vector<double, 2> Extent;

typedef std::function<bool(String /*text*/, int /*byteOffset*/, int /*byteCount*/)> TextWrapBehind;
bool textWrapBehindDefault(String text, int byteOffset, int byteCount);

/// translate \a angle in to degrees (0..360) to radians (0..2*M_PI)
double degrees(double angle);

typedef int64_t TouchDeviceId;
typedef int64_t TouchFingerId;

}} // namespace cc::ui
