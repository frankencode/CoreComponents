/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>

namespace cc::ui {

/** \class Box cc/ui/Box
  * \ingroup ui
  * \brief Filled rectangle with rounded corners
  */
class Box final: public View
{
public:
    /** Create a primordial box
      */
    Box():
        View{onDemand<Box::State>}
    {}

    /** Create a box and return a copy of itself
      */
    explicit Box(Out<Box> self):
        View{new State}
    {
        self = *this;
    }

    /** Create a box of size (\a width, \a height)
      */
    explicit Box(double width, double height):
        View{new State}
    {
        size(Size{width, height});
    }

    double radius() const { return me().radius(); } ///< Get radius
    Box &radius(double newValue) { me().radius(newValue); return *this; } ///< %Set radius
    Box &radius(Definition<double> &&f) { me().radius(std::move(f)); return *this; } ///< %Define radius

    Color color() const { return me().color(); } ///< Get color
    Box &color(Color newValue) { me().color(newValue); return *this; } ///< %Set color
    Box &color(Definition<Color> &&f) { me().color(std::move(f)); return *this; } ///< %Define color

protected:
    struct State: public View::State
    {
        State();

        bool isPainted() const override { return color().isValid() && width() > 0 && height() > 0; }

        Property<double> radius;
        Property<Color> color;
    };

    explicit Box(State *newState):
        View{newState}
    {}

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc::ui
