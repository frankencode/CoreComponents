/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/List>
#include <cc/Pile>
#include <cc/Signal>

namespace cc {
namespace ui {

class Item;

typedef List< Ref<Item> > ItemList;
typedef List<int> IndexPath;

class ItemDelta
{
public:
    const IndexPath *indexPath() const { return indexPath_; }
    int removedCount() const { return removedCount_; }
    int insertedCount() const { return insertedCount_; }

private:
    friend class Item;

    ItemDelta():
        removedCount_(0),
        insertedCount_(0)
    {}

    ItemDelta *operator->() { return this; }

    Ref<IndexPath> indexPath_;
    int removedCount_;
    int insertedCount_;
};

class ItemCarrier;

class Item: public virtual Object, public IndexTracking
{
    friend class Object;

public:
    static Ref<Item> create() { return Object::create<Item>(); }

    Item *parent() const { return parent_; }

    int count() const { return children_->count(); }
    const Item *at(int i) const { return children_->at(i); }
    Item *at(int i) { return children_->at(i); }

    int totalCount() const { return children_->extent(); }

    void insertAt(int i, Item *item);
    void removeAt(int i);
    void append(Item *item) { return insertAt(count(), item); }

    template<class T, class... Args>
    T *add(Args... args) {
        auto item = Object::create<T>(args...);
        append(item);
        return item;
    }

    void paste(int i0, int i1, const ItemList *items = 0);

    const ItemDelta *delta() const { return &delta_; }

    Signal changed;

protected:
    friend class ItemCarrier;

    Item();

    int getLayoutIndex(int i) const;

private:
    void updateExtents(int deltaCount);
    void emit();

    Item *parent_;

    typedef Pile< Ref<Item>, int > Children;
    Ref<Children> children_;

    ItemDelta delta_;
};

}} // namespace cc::ui
