/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>
#include <cc/ui/Font>

namespace cc {
namespace ui {

class TextRun;

class Label: public View
{
    friend class Object;

public:
    Property<String> text;
    Property<Font> font;
    Property<Color> ink;
    Property<Size> margin;

    Point textPos(double relativeHeight = 0) const;
    Point textCenterLeft() const { return textPos(0.5); }

    void anchorBaselineStartTo(const AnchorPoint &l)  { pos->bind([=]{ return l() - textPos(); }); }
    void anchorTextCenterLeftTo(const AnchorPoint &l) { pos->bind([=]{ return l() - textCenterLeft(); }); }

    static Size preferredSize(const String &text, const Font &font = Font{}, Size margin = Size{});
    static Size preferredSize(const TextRun *textRun, Size margin = Size{});
    Size preferredSize() const override;
    Size minSize() const override;

protected:
    Label(View *parent, const String &text = String{}, const Font &font = Font{});
    ~Label();

private:
    void paint() override;

    static Size effectiveMargin(Size margin);

    Property< Ref<const TextRun> > textRun;
};

}} // namespace cc::ui
