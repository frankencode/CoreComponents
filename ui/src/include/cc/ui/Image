/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/ui/Surface>

namespace cc {
namespace ui {

/** \brief RGBA image
  */
class Image: public Surface
{
    friend class Object;

public:
    /** Create an invalid image
      * \see isValid()
      */
    static Ref<Image> create()
    {
        return Object::create<Image>();
    }

    /** Allocate image of given size
      * \param width number of pixels per image row
      * \param height number of pixel rows per image
      * \return new object instance
      */
    static Ref<Image> create(int width, int height)
    {
        return Object::create<Image>(width, height);
    }

    /** Return true if this image is valid (of non-null size)
      */
    bool isValid() const { return w_ > 0 && h_ > 0; }

    /// Number of pixels per image row
    int width() const { return w_; }

    /// Number of pixel rows per image
    int height() const { return h_; }

    /// Total number of pixels per image
    int count() const { return data_->itemCount<Color>(); }

    /** Check if raster position (x, y) is within range
      */
    bool hasPixel(int x, int y) const {
        return
            0 <= x && x < w_ &&
            0 <= y && y < h_;
    }

    /** Access pixel at raster position (x, y)
      */
    Color &pixel(int x, int y) {
        return mutate(data_)->item<Color>(y * w_ + x);
    }

    /** Access pixel at index \arg i
      */
    Color &pixel(int i) {
        return mutate(data_)->item<Color>(i);
    }

    /** Clear the entire image with color \a c
      */
    void clear(Color c);

    /** Convert the entire image from pre-multiplied alpha to non-premultiplied alpha
      */
    void normalize();

    void shadowBlur(int radius, Color shadowColor);

    const CharArray *data() const { return data_; }
    int pitch() const { return w_ * sizeof(Color); }

private:
    friend class View;

    Image()
    {}

    Image(int width, int height):
        w_{width},
        h_{height}
    {
        if (w_ <= 0) width = 1;
        if (h_ <= 0) height = 1;
    }

    ~Image();

    void init();

    cairo_surface_t *cairoSurface() const override;

    int w_ { 0 };
    int h_ { 0 };
    String data_;

    mutable cairo_surface_t *cairoSurface_ { nullptr };
};

}} // namespace cc::ui
