/*
 * Copyright (C) 2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/types>
#include <cc/ui/Surface>

namespace cc {
namespace ui {

class Image: public Surface
{
public:
    static Ref<Image> create(Size size);

    inline Size size() const { return Size{ double(w_), double(h_) }; }
    inline int count() const { return data_->itemCount<Color>(); }

    inline bool hasPixel(int x, int y) const {
        return
            0 <= x && x < w_ &&
            0 <= y && y < h_;
    }

    inline Color &pixel(int x, int y) {
        return mutate(data_)->item<Color>(y * w_ + x);
    }

    /** Clear the entire image with color \a c
      */
    void clear(Color c);

    /** Convert the entire image from pre-multiplied alpha to non-premultiplied alpha
      */
    void normalize();

    inline const CharArray *data() const { return data_; }
    inline int pitch() const { return w_ * sizeof(Color); }

private:
    friend class View;

    Image(Size size);
    ~Image();

    cairo_surface_t *cairoSurface() const override;

    int w_, h_;
    String data_;

    mutable cairo_surface_t *cairoSurface_;
};

}} // namespace cc::ui
