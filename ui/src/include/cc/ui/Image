/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/Surface>
#include <cc/ui/types>

namespace cc {
namespace ui {

/** \brief RGBA image
  */
class Image: public Surface
{
public:
    class Instance: public Surface::Instance
    {
    public:
        /// Number of pixels per image row
        int width() const { return w_; }

        /// Number of pixel rows per image
        int height() const { return h_; }

        /// Total number of pixels per image
        int count() const { return data_->itemCount<Color>(); }

        /** Check if raster position (x, y) is within range
          */
        bool hasPixel(int x, int y) const {
            return
                0 <= x && x < w_ &&
                0 <= y && y < h_;
        }

        /** Access pixel at raster position (x, y)
          */
        Color &pixel(int x, int y) {
            return mutate(data_)->item<Color>(y * w_ + x);
        }

        /** Access pixel at index \arg i
          */
        Color &pixel(int i) {
            return mutate(data_)->item<Color>(i);
        }

        /** Clear the entire image with Color \a c
          */
        void clear(Color c);

        /** Convert the entire image from pre-multiplied alpha to non-premultiplied alpha
          */
        void normalize();

        void shadowBlur(int radius, Color shadowColor);

        const CharArray *data() const { return data_; }
        int pitch() const { return w_ * sizeof(Color); }

    private:
        friend class Image;
        friend class View;

        Instance(int width, int height);
        ~Instance();

        cairo_surface_t *cairoSurface() const override;

        int w_ { 0 };
        int h_ { 0 };
        String data_;

        mutable cairo_surface_t *cairoSurface_ { nullptr };
    };

    /** Create an invalid image
      * \todo make it actually create a zero sized image and introduce Image(Instance *)
      */
    Image() = default;

    /** Allocate image of given size
      * \param width number of pixels per image row
      * \param height number of pixel rows per image
      */
    Image(int width, int height):
        Surface{new Instance{width, height}}
    {}

    Instance *operator->() const { return my<Instance>(); }
    operator Instance *() const { return my<Instance>(); }
};

}} // namespace cc::ui
