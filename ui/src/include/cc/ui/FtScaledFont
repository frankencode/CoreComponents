/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <atomic>
#include <memory>
#include <cairo/cairo.h>
#include <cairo/cairo-ft.h>
#include <cc/ui/ScaledFont>
#include <cc/ui/Font>
#include <cc/ui/FtFontFace>
#include <cc/ui/FtFontMetrics>

namespace cc {
namespace ui {

class FtScaledFont: public ScaledFont
{
public:
    Font font() const override { return font_; }
    double size() const { return font_->size(); }

    const FontMetrics *getMetrics() const override;

    cairo_scaled_font_t *cairoScaledFont() const { return cairoScaledFont_; }

private:
    friend class Object;

    FtScaledFont(const FtFontFace *ftFontFace, const Font &font);
    ~FtScaledFont();

    Font font_;
    Ref<const FtFontFace> ftFontFace_;
    mutable Ref<const FtFontMetrics> ftFontMetrics_;
    cairo_font_face_t *cairoFontFace_;
    cairo_scaled_font_t *cairoScaledFont_;
};

class FtFaceGuard {
public:
    FtFaceGuard(const FtScaledFont *ftScaledFont):
        ftScaledFont_(ftScaledFont),
        ftFace_(cairo_ft_scaled_font_lock_face(ftScaledFont_->cairoScaledFont()))
    {}
    ~FtFaceGuard() {
        cairo_ft_scaled_font_unlock_face(ftScaledFont_->cairoScaledFont());
    }
    inline const FtFaceGuard *operator->() const { return this; }
    inline FT_Face ftFace() const { return ftFace_; }
private:
    const FtScaledFont *ftScaledFont_;
    FT_Face ftFace_;
};

}} // namespace cc::ui
