/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/TextEdit>

namespace cc {
namespace ui {

class TextItem;
class TextRun;
class TextLineHandle;

class TextLine: public Control
{
public:
    class Instance: public Control::Instance
    {
    public:
        Property<int> lineNumber { -1 };

    private:
        friend class TextLine;
        friend class TextLineHandle;

        Property< Ref<TextRun> > lineNumberRun;
        Property< Ref<TextRun> > textRun;
        Property< Ref<TextRun> > wrappedTextRun;

        Instance(TextEdit::Instance *textEdit, TextItem *textItem);

        bool withinBounds(Point l) const override;
        bool onPointerPressed(const PointerEvent *event) override;

        TextEdit::Instance *textEdit_;
        TextItem *textItem_;
    };

    TextLine(TextEdit::Instance *textEdit, TextItem *textItem):
        Control{new Instance{textEdit, textItem}}
    {}

    TextLine(Instance *instance):
        Control{instance}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::ui
