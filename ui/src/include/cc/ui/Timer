/*
 * Copyright (C) 2017-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <atomic>
#include <memory>
#include <cc/Notifier>

namespace cc {
namespace ui {

class TimeWorker;

class Timer: public Object
{
public:
    static void start(double interval, const std::function<void()> &handler);
    static void startAt(double startTime, double interval, const std::function<void()> &handler);
    static void startIn(double delayTime, const std::function<void()> &handler);
    static Ref<Timer> create(double interval = 0);

    void start();
    void startAt(double startTime);
    void startIn(double delayTime);
    void stop();

    bool isActive() const { return isActive_; }
    double firstTime() const { return firstTime_; }
    double startTime() const { return startTime_; }
    double interval() const { return interval_; }

    Notifier triggered;

private:
    friend class TimeWorker;
    friend class Application;

    Timer(double interval);

    mutable std::atomic_bool isActive_ { false };
    double firstTime_ { 0 };
    double startTime_ { 0 };
    double interval_;
    std::atomic<void *> timeout_ { nullptr };
};

}} // namespace cc::ui
