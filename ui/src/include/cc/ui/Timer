/*
 * Copyright (C) 2017-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Signal>
#include <atomic>
#include <memory>

namespace cc {
namespace ui {

class TimeWorker;

/** \class Timer cc/ui/Timer
  * \brief Periodic interval timer
  */
class Timer
{
public:
    class Instance: public Object
    {
    public:
        /// Start timer, now.
        void start();

        /// Start timer at a later \a startTime
        void startAt(double startTime);

        /// Start timer after a giving \a delayTime
        void startIn(double delayTime);

        /// Stop the timer
        void stop();

        /// Timer is active an generates timeout signals
        bool isActive() const { return isActive_; }

        /// The first time the timer emits the timeout signal
        double firstTime() const { return firstTime_; }

        /// Beginning of the first timeout interval
        double startTime() const { return startTime_; }

        /// Time between two timeout signal emissions
        double interval() const { return interval_; }

        /// Generated after an interval has timed out
        Signal timeout;

    private:
        friend class Timer;
        friend class TimeWorker;
        friend class ApplicationInstance;

        Instance(double interval = 0);

        mutable std::atomic_bool isActive_ { false };
        double firstTime_ { 0 };
        double startTime_ { 0 };
        double interval_;
        std::atomic<void *> timeout_ { nullptr };
    };

    /** Create a single-shot timer.
      */
    Timer():
        instance_{new Instance}
    {}

    /** Create a repeating interval timer.
      * \param interval interval in which the timeout signal is triggered
      */
    Timer(double interval):
        instance_{new Instance{interval}}
    {}

    /** Create a repeating interval timer.
      * \param interval interval in which the timeout signal is triggered
      * \param onTimeout handler to be called on timeout
      */
    Timer(double interval, const std::function<void()> &onTimeout):
        instance_{new Instance{interval}}
    {
        (*this)->timeout->connect(onTimeout);
    }

    /** Create a single-shot timer.
      * \param onTimeout handler to be called on timeout
      */
    Timer(const std::function<void()> &onTimeout):
        instance_{new Instance}
    {
        (*this)->timeout->connect(onTimeout);
    }

    Instance *operator->() { return instance_; }
    const Instance *operator->() const { return instance_; }

private:
    Ref<Instance> instance_;
};

}} // namespace
