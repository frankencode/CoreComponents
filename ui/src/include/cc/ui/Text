/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/View>
#include <cc/ui/FontMetrics>

namespace cc::ui {

/** \class Text cc/ui/Text
  * \ingroup ui
  * \brief %Descriptive text displays
  * \see Label, TextView
  *
  * A text view shows descriptive texts, which might be wrapped into multiple lines.
  * When maxWidth() is set the text will be automatically wrapped if necessary.
  * \todo create a specialized HtmlText
  * \internal
  * The text() property supports basic HTML tags (&lt;b&gt;, &lt;i&gt;, &lt;u&gt; and &lt;strike&gt;).
  */
class Text final: public View
{
public:
    /** Create a primordial text
      */
    Text();

    /** Create a new text
      * \param self %Reference to newly created object
      */
    explicit Text(Out<Text> self);

    /** Create a new text
      * \param text Initial text
      * \param self %Reference to newly created object
      */
    explicit Text(const String &text, Out<Text> self = None{});

    /** Create a new text
      * \param text Initial text
      * \param font Initial font
      * \param self %Reference to newly created object
      */
    explicit Text(const String &text, Font font, Out<Text> self = None{});

    String text() const; ///< Get text
    Text &text(const String &newValue); ///< %Set text
    Text &text(Definition<String> &&f); ///< Define text

    Font font() const; ///< Get font
    Text &font(Font newValue); ///< %Set font
    Text &font(Definition<Font> &&f); ///< Define font

    Color color() const; ///< Get text color
    Text &color(Color newValue); ///< %Set text color
    Text &color(Definition<Color> &&f); ///< Define text color

    Size margin() const; ///< Get inside margins
    Text &margin(Size newValue); ///< %Set inside margins
    Text &margin(Definition<Size> &&f); ///< Define inside margins

    double maxWidth() const; ///< Get maximum width
    Text &maxWidth(double newValue); ///< %Set maximum width
    Text &maxWidth(Definition<double> &&f); ///< Define maximum width

    TextAlign textAlign() const; ///< Get text alignment
    Text &textAlign(TextAlign newValue); ///< %Set text alignment
    Text &textAlign(Definition<TextAlign> &&f); ///< Define text alignment

    Text &baselineStart(Definition<Point> &&a); ///< %Anchor the text with its first baseline start to \a a
    FontMetrics fontMetrics() const; ///< %Current font metrics

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc::ui
