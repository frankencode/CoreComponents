/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/FontFamily>
#include <cc/ScaledFont>
#include <cc/GlyphRun>
#include <cc/TextRun>
#include <cc/ThreadLocalSingleton>
#include <cc/Set>

namespace cc {

/** \class FontManager cc/FontManager
  * \ingroup ui
  * \brief Keep track of application fonts
  * \exception FontError
  */
class FontManager: public ThreadLocalSingleton
{
public:
    /** Get access to the platform's font manager
      */
    FontManager();

    /** Make font directory known to the font manager
      */
    void addPath(const String &dirPath, const String &namePrefix = "");

    /** %Return set of all available font families
      */
    Set<FontFamily> fontFamilies() const { return me().fontFamilies_; }

    /** Select font family which matches best giving \a name
      */
    FontFamily selectFontFamily(const String &name) const
    {
        return me().selectFontFamily(name);
    }

    /** Select font which matches best giving font selector \a font
      */
    ScaledFont selectFont(const Font &font) const
    {
        return me().selectFont(font);
    }

    /** Typeset a text and return the resulting glyph run
      * \param text %Text to typeset
      * \param font %Font to use
      * \param origin Starting position
      */
    GlyphRun typeset(const String &text, const Font &font, const Point &origin = Point{}) const
    {
        return me().typeset(text, font, origin);
    }

    /** Create a new text run
      */
    TextRun createTextRun() const
    {
        return me().createTextRun();
    }

    /** Inform about fonts covering ranges of text
      */
    using FontRange = std::function<void(const Font &font, long i0, long i1)> ;

    /** Select a proper font for each range of \a text
      * \param text %Text to find covering fonts for
      * \param font %Default font to use
      * \param fontRange %Function to call for each font range
      */
    void selectFontRanges(const String &text, const Font &font, const FontRange &fontRange) const
    {
        return me().selectFontRanges(text, font, fontRange);
    }

protected:
    struct State: public Object::State
    {
        static Font fixup(Font font);
        static List<String> familySearchPattern(const String &name);

        FontFamily selectFontFamily(const String &name) const;
        FontFamily selectNearestFontFamily(const String &name) const;

        virtual bool isFontFace(const String &path) const;
        virtual FontFace openFontFace(const String &path) = 0;
        virtual ScaledFont selectFont(const Font &font) const = 0;
        virtual GlyphRun typeset(const String &text, const Font &font, const Point &origin = Point{}) const = 0;

        virtual TextRun createTextRun() const = 0;

        virtual void selectFontRanges(const String &text, const Font &font, const FontRange &fontRange) const = 0;

        Set<FontFamily> fontFamilies_;
    };

    explicit FontManager(State *state):
        ThreadLocalSingleton{state}
    {}

    void addFontFace(const FontFace &fontFace);

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
