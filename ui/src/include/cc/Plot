/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/View>
#include <cc/Call>

namespace cc {

/** \class Plot cc/Plot
  * \ingroup ui
  * \brief 2D plot
  */
class Plot final: public View
{
public:
    /** Create a primordial plot
      */
    Plot():
        View{onDemand<State>}
    {}

    /** Create a new plot
      * \param self Reference to newly created object
      */
    explicit Plot(Out<Plot> self):
        View{new State}
    {
        self = weak<Plot>();
    }

    /** Create a new plot of size (\a width, \a height)
      */
    Plot(double width, double height, Out<Plot> self = None{}):
        View{new State}
    {
        size(Size{width, height});
        self = weak<Plot>();
    }

    Rect scope() const { return me().scope(); } ///< %Get plot extents
    Plot &scope(const Rect &newValue) { me().scope(newValue); return *this; } ///< %Set plot extents
    Plot &scope(Definition<Rect> &&f) { me().scope(std::move(f)); return *this; } ///< %Define plot extents

    Plot &points(const Array<Point> &newValue) { return points<Array>(newValue); } ///< %Set points of the plot

    /** \brief %Set points of the plot
      * \tparam Array %Custom point container type (e.g. std::vector)
      */
    template<template<class> class Array>
    Plot &points(const Array<Point> &newValue) { me().retrieval(PointArrayRetrieval<Array>{newValue}); return *this; }

    Plot &xScaling(const Call<double(double)> &scaleX) { me().scaling(PointScaling{scaleX, Call<double(double)>{}}); return *this; }
    Plot &yScaling(const Call<double(double)> &scaleY) { me().scaling(PointScaling{Call<double(double)>{}, scaleY}); return *this; }
    Plot &scaling(const Call<double(double)> &scaleY) { me().scaling(PointScaling{Call<double(double)>{}, scaleY}); return *this; }
    Plot &scaling(const Call<double(double)> &scaleX, const Call<double(double)> &scaleY) { me().scaling(PointScaling{scaleX, scaleY}); return *this; }

    static double symLog(double x);
    static double log10(double x);

    Pen pen() const { return me().pen(); } ///< %Get pen style
    Plot &pen(const Pen &newValue) { me().pen(newValue); return *this; } ///< %Set pen style
    Plot &pen(Definition<Pen> &&f) { me().pen(std::move(f)); return *this; } ///< %Define pen style

private:
    class PointRetrieval: public Object
    {
    public:
        PointRetrieval() = default;

        Point pointAt(long i) const { return me().pointAt(i); } ///< %Get point at index \a i
        long pointCount() const { return me().pointCount(); } ///< %Get number of points

    protected:
        struct State: public Object::State
        {
            virtual Point pointAt(long i) const = 0; ///< \copydoc PointRetrieval::pointAt()
            virtual long pointCount() const = 0; ///< \copydoc PointRetrieval::pointCount()
        };

        /** Initialize with \a newState
          */
        explicit PointRetrieval(State *newState):
            Object{newState}
        {}

        const State &me() const { return Object::me.as<State>(); }
    };

    template<template<class> class Array>
    class PointArrayRetrieval final: public PointRetrieval
    {
    public:
        explicit PointArrayRetrieval(const Array<Point> &points):
            PointRetrieval{new State{points}}
        {}

    private:
        struct State final: public PointRetrieval::State
        {
            explicit State(const Array<Point> &points):
                points_{points}
            {}
            Point pointAt(long i) const override { return points_.at(i); }
            long pointCount() const override { return points_.size(); }
            Array<Point> points_;
        };
    };

    class PointScaling final: public Object
    {
    public:
        PointScaling() = default;

        PointScaling(const Call<double(double)> &scaleX, const Call<double(double)> &scaleY):
            Object{new State{scaleX, scaleY}}
        {}

        Point scale(const Point &a) const { return me().scale(a); }

    private:
        struct State final: public Object::State
        {
            State(const Call<double(double)> &scaleX, const Call<double(double)> &scaleY):
                scaleX_{scaleX},
                scaleY_{scaleY}
            {}

            Point scale(const Point &a) const
            {
                if (scaleX_ && scaleY_) return Point{scaleX_(a.x()), scaleY_(a.y())};
                else if (scaleX_) return Point{scaleX_(a.x()), a.y()};
                else if (scaleY_) return Point{a.x(), scaleY_(a.y())};
                return a;
            }

            Call<double(double)> scaleX_;
            Call<double(double)> scaleY_;
        };

        const State &me() const { return Object::me.as<State>(); }
    };

    struct State: public View::State
    {
        State();

        Property<Rect> scope;
        Property<PointRetrieval> retrieval;
        Property<PointScaling> scaling;
        Property<Pen> pen;
    };

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc
