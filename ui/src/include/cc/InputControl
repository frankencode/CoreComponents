/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Control>

namespace cc {

/** \class InputControl cc/InputControl
  * \ingroup ui
  * \brief Keyboard navigable input control
  */
class InputControl: public Control
{
public:
    /** Create a null input control
      */
    InputControl() = default;

    InputControl &onAccepted(Call<void()> &&f) { me().onAccepted(std::move(f)); return *this; } ///< %Input accepted
    InputControl &onRejected(Call<void()> &&f) { me().onRejected(std::move(f)); return *this; } ///< %Input rejected

protected:
    friend class Object;

    struct State: public Control::State
    {
        State();

        virtual bool accept() const { return true; }

        void gotoNext();
        void gotoPrevious();

        Trigger onAccepted; ///< \copydoc InputControl::accepted()
        Trigger onRejected; ///< \copydoc InputControl::rejected()
    };

    explicit InputControl(State *state):
        Control{state}
    {}

    explicit InputControl(CreateState onDemand):
        Control{onDemand}
    {}

    State &me() { return View::me().as<State>(); }
    const State &me() const { return View::me().as<State>(); }
};

} // namespace cc
