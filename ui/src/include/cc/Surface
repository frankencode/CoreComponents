/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>

typedef struct _cairo_surface cairo_surface_t;

namespace cc {

class Painter;

/** \class Surface cc/Surface
  * \ingroup ui
  * \brief Painting surface
  */
class Surface: public Object
{
public:
    /** Create a null surface
      */
    Surface() = default;

    /** Open next page
      * \param clear Open a clean page (clear = true) or a copy of this current page (clear = false)
      */
    void nextPage(bool clear = true);

    /** Get a pointer to the underlying Cairo surface
      */
    cairo_surface_t *cairoSurface() { return me().cairoSurface(); }

    /** Prepare surface before start painting
      */
    void polish() { me().polish(); }

protected:
    friend class Object;
    friend class Painter;

    struct State: public Object::State
    {
        virtual cairo_surface_t *cairoSurface() = 0;
        virtual void polish();
    };

    #ifndef NDEBUG
    static State *paintTarget(State *newTarget = nullptr);
    #endif

    explicit Surface(State *newState):
        Object{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
