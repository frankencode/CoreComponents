/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/TextEditor>
#include <cc/TextDelta>
#include <cc/Queue>

namespace cc {

/** \class TextEditorWithHistory cc/TextEditorWithHistory
  * \ingroup ui
  * \brief Abstract text editor with history
  */
class TextEditorWithHistory: public TextEditor
{
protected:
    struct State: public TextEditor::State
    {
        virtual String filterChunk(const String &chunk) const; ///< Filter chunk before pasting it
        virtual void pasteChunk(Range range, const String &chunk) = 0; ///< Paste filtered chunk

    private:
        Range paste(Range range, const String &chunk) override;

        bool canUndo() const override;
        bool canRedo() const override;;
        Range undo() override;
        Range redo() override;

        Queue<TextDelta> past_;
        Queue<TextDelta> future_;
    };

    explicit TextEditorWithHistory(State *state):
        TextEditor{state}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
