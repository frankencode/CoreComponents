/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ui/ApplicationInstance>
#include <SDL2/SDL.h>

namespace cc { template<class> class Singleton; }

namespace cc {
namespace ui {

class SdlWindow;
class SdlTimeMaster;

class SdlApplicationInstance: public ApplicationInstance
{
public:
    static SdlApplicationInstance *instance();

    Window *openWindow(const View &view, const String &title = "", WindowMode mode = WindowMode::Default) override;

    Ref<Cursor> createCursor(CursorShape shape) override;

    void setCursor(const Cursor *cursor) override;
    void unsetCursor() override;

    String getClipboardText() const override;
    void setClipboardText(const String &text) override;

    int run() override;

private:
    friend class Singleton<SdlApplicationInstance>;
    friend class SdlTimeMaster;

    SdlApplicationInstance();
    ~SdlApplicationInstance();

    void handleFingerEvent(const SDL_TouchFingerEvent *e);
    void handleMouseMotionEvent(const SDL_MouseMotionEvent *e);
    void handleMouseButtonEvent(const SDL_MouseButtonEvent *e);
    void handleMouseWheelEvent(const SDL_MouseWheelEvent *e);
    void handleKeyboardEvent(const SDL_KeyboardEvent *e);
    void handleTextEditingEvent(const SDL_TextEditingEvent *e);
    void handleTextInputEvent(const SDL_TextInputEvent *e);

    static String windowEventToString(const SDL_WindowEvent *e);
    void handleWindowEvent(const SDL_WindowEvent *e);

    void startTextInput(const Window *window) override;
    void setTextInputArea(const Rect &inputArea) override;
    void stopTextInput() override;

    void triggerTimer(const Timer::Instance *timer);

    Map<uint32_t, Ref<SdlWindow> > windows_;

    SDL_Event *event_;
    Uint32 timerEvent_;
};

}} // namespace cc::ui
