/*
 * Copyright (C) 2017-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <SDL2/SDL.h>
#include <cc/ui/Window>

namespace cc {
namespace ui {

class SdlApplicationInstance;
class SdlContext;

class SdlWindow: public Window
{
private:
    friend class SdlApplicationInstance;

    static Ref<SdlWindow> open(const View &view, const String &title = String{}, WindowMode mode = WindowMode::Default);

    SdlWindow(const View &view, const String &title);
    ~SdlWindow();

    SdlWindow *open(WindowMode mode = WindowMode::Default);

    void onWindowResized(Size newSize);
    void onWindowMoved(Point newPos);
    void onWindowShown();
    void onWindowHidden();

    void renderFrame(Frame *frame) override;

    static void updateTexture(SDL_Renderer *sdlRenderer, View::Instance *view);
    void renderCascade(SDL_Renderer *sdlRenderer, View::Instance *view);
    void renderTexture(SDL_Renderer *sdlRenderer, View::Instance *view);

    static SdlContext *sdlContext(View::Instance *view);

    uint32_t id_;
    SDL_Window *sdlWindow_;
    SDL_Renderer *sdlRenderer_;
    Size currentSize_;
    Point currentPos_;
};

}} // namespace cc::ui
