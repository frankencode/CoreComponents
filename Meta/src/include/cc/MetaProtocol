/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/MetaObject>

namespace cc {

class MetaPrototype;

/** \class MetaProtocol cc/MetaProtocol
  * \ingroup meta
  * \brief Duck-typed protocol
  */
class MetaProtocol: public Object
{
public:
    /** Create a primordial meta-protocol
      */
    MetaProtocol() = default;

    /** Create a meta-protocol
      */
    MetaProtocol(New);

    /** Define a new type of meta-object that is allowed to appear
      */
    void define(const MetaPrototype &prototype);

    /** Get the set of meta-objects types that are defined by this protocol (sans the parent's protocols types)
      */
    const Map<String, MetaPrototype> &prototypes() const;

    long minCount() const; ///< %Minimum number of objects allowed by the protocol
    long maxCount() const; ///< %Maximum number of objects allowed by the protocol
    void setMinCount(long newValue); ///< %Set the minimum number of objects allowed by the protocol to \a newValue
    void setMaxCount(long newValue); ///< %Set the maximum number of objects allowed by the protocol to \a newValue

    /** %Search for prototype by its class name within this protocol
      */
    bool lookup(const String &className, Out<MetaPrototype> prototype) const;

    /** %Default meta-object
      */
    MetaObject defaultObject() const;

    /** %Set the default meta-object to \a object
      */
    void setDefaultObject(const MetaObject &object);

protected:
    struct State;

    explicit MetaProtocol(State *newState);

    /** Inherit the definitions of protocol \a parent
      */
    void inherit(const MetaProtocol &parent);

    const State &me() const;
    State &me();
};

template<>
struct VariantType<MetaProtocol>
{
    static const TypeInfo info;

    static void store(void *bytes, const MetaProtocol &x)
    {
        static_assert(sizeof(MetaProtocol) <= 8);

        new(bytes)MetaProtocol{x};
    }

    static MetaProtocol retrieve(const void *bytes, const TypeInfo &typeInfo = info)
    {
        assert(&typeInfo == &VariantType<MetaProtocol>::info); // expected type 'MetaProtocol'

        return *static_cast<const MetaProtocol *>(bytes);
    }
};

} // namespace cc
