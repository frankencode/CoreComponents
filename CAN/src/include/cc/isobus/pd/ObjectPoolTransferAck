/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/pd/DeviceDescriptionMessage>
#include <cc/bitmask>

namespace cc::isobus::pd {

/** \class ObjectPoolTransferAck cc/isobus/pd/ObjectPoolTransferAck
  * \brief Object pool transfer request
  */
class ObjectPoolTransferAck final: public DeviceDescriptionMessage
{
public:
    /** Create an interpretation of \a frame
      */
    explicit ObjectPoolTransferAck(const CanFrame &frame):
        DeviceDescriptionMessage{frame}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return
            DeviceDescriptionMessage::isValid() &&
            DeviceDescriptionMessage::type() == Type::ObjectPoolTransferAck;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** %Error flags
      */
    enum class Errors: uint8_t
    {
        OutOfMemory = 1, ///< Task controller ran out of memory during transfer
        OtherError  = 2  ///< Some other error
    };

    /** Get error flags
      */
    Errors errors() const
    {
        return static_cast<Errors>(frame_.at(1));
    }

private:
    void printValue(Format &f) const override;
};

CC_BITMASK(ObjectPoolTransferAck::Errors)

String str(ObjectPoolTransferAck::Errors);

} // namespace cc::isobus::pd
