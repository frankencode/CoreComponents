/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/types>
#include <cc/String>
#include <cc/bits>

namespace cc::isobus::pd {

/** \class CondensedWorkState cc/isobus/pd/CondensedWorkState
  * \brief Condensed work state value
  */
class CondensedWorkState final
{
public:
    explicit CondensedWorkState(uint32_t value, uint8_t sectionOffset = 0, uint8_t elementId = 0xFF):
        value_{value},
        sectionOffset_{sectionOffset},
        elementId_{elementId}
    {}

    SwitchState operator()(int sectionIndex) const
    {
        return sectionState(sectionIndex);
    }

    SwitchState sectionState(int sectionIndex) const
    {
        const int i = sectionIndex * 4;
        return static_cast<SwitchState>(bit(i + 1, i, value_));
    }

    uint8_t sectionOffset() const
    {
        return sectionOffset_;
    }

    uint8_t elementId() const
    {
        return elementId_;
    }

    String toString() const;

private:
    uint32_t value_;
    uint8_t sectionOffset_;
    uint8_t elementId_;
};

} // namespace cc::isobus::pd
