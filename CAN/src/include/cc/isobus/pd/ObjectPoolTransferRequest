/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/pd/DeviceDescriptionMessage>

namespace cc::isobus::pd {

/** \class ObjectPoolTransferRequest cc/isobus/pd/ObjectPoolTransferRequest
  * \brief Object pool transfer request
  */
class ObjectPoolTransferRequest final: public DeviceDescriptionMessage
{
public:
    /** Create an interpretation of \a frame
      */
    explicit ObjectPoolTransferRequest(const CanFrame &frame):
        DeviceDescriptionMessage{frame}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return
            DeviceDescriptionMessage::isValid() &&
            DeviceDescriptionMessage::type() == Type::ObjectPoolTransferRequest;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Requested transfer size
      */
    uint32_t requestedTransferSize() const
    {
        return frame_.data<uint32_t>(1, 4);
    }

private:
    void printValue(Format &f) const;
};

} // namespace cc::isobus::pd
