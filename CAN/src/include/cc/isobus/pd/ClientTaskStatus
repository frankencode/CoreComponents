/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/pd/Message>
#include <cc/bitmask>

namespace cc::isobus::pd {

/** \class ClientTaskStatus cc/isobus/pd/ClientTaskStatus
  * \brief Client task status
  */
class ClientTaskStatus final: public Message
{
public:
    /** Create an interpretation of \a frame
      */
    explicit ClientTaskStatus(const CanFrame &frame):
        Message{frame}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return
            Message::isValid() &&
            Message::type() == Type::ClientTaskStatus;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Task controller (TC) and data logger (DL) status flags
      */
    enum class Mask: uint8_t {
        Active = 1
    };

    /** \copydoc Mask
      */
    uint8_t status() const
    {
        return frame_.at(4);
    }

    /** Stringify to JSON
      */
    String toString() const;
};

/** Stringify \a message
  */
inline String str(const ClientTaskStatus &message) { return message.toString(); }

CC_BITMASK(ClientTaskStatus::Mask);

} // namespace cc::isobus::pd
