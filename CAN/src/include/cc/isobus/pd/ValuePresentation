/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/String>
#include <cc/Binary>

namespace cc::isobus::pd {

/** \class ValuePresentation cc/isobus/pd/ValuePresentation
  * \brief Binary representation of a device value presentation object
  */
class ValuePresentation final
{
public:
    /** %Object type name
      */
    static constexpr const char *shortName() { return "isobus.device.object.value_presentation"; }

    /** Create an interpretation of \a data
      */
    explicit ValuePresentation(const String &data):
        data_{data}
    {}

    /** Check for validity
      */
    bool isValid() const
    {
        return data_.startsWith("DVP");
    }

    /** Check for validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** %Object ID
      */
    uint16_t objectId() const
    {
        return Binary{data_}.value<uint16_t, 3>();
    }

    /** %Offset to be applied for value presentation
      */
    int32_t offset() const
    {
        return Binary{data_}.value<int32_t, 5>();
    }

    /** %Scale to be applied for value presentation
      */
    float scale() const
    {
        static_assert(sizeof(float) == 4);
        return union_cast<float>(Binary{data_}.value<uint32_t, 9>());
    }

    /** %Number of decimal digits to display of the fractional part of the number
      */
    uint8_t fractionDecimals() const
    {
        return data_.asBytes().at(13);
    }

    /** %Unit designator for value presentation
      */
    String unitDesignator() const
    {
        return data_.copy(15, 15 + n());
    }

    /** %Size in bytes
      */
    long byteSize() const
    {
        return 15 + n();
    }

    /** Stringify to JSON
      */
    String toString() const;

private:
    long n() const
    {
        return data_.asBytes().at(14);
    }

    String data_;
};

inline String str(const ValuePresentation &object) { return object.toString(); }

} // namespace cc::isobus::pd
