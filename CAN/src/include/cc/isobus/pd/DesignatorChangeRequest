/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/pd/DeviceDescriptionDatagram>
#include <cc/Binary>

namespace cc::isobus::pd {

/** \class DesignatorChangeRequest cc/isobus/pd/DesignatorChangeRequest
  * \brief Change the designator of an object
  */
class DesignatorChangeRequest final: public DeviceDescriptionDatagram
{
public:
    /** Create an interpretation of datagram \a message
      */
    explicit DesignatorChangeRequest(const j1939::Datagram &message):
        DeviceDescriptionDatagram{message}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return
            DeviceDescriptionDatagram::isValid() &&
            DeviceDescriptionDatagram::type() == DeviceDescriptionDatagram::Type::DesignatorChangeRequest;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** %Object ID
      */
    uint16_t objectId() const
    {
        return Binary{data()}.value<uint16_t, 1, 2>();
    }

    /** %New object designator
      */
    String designator() const
    {
        return data().copy(4, data().count());
    }

private:
    void printValue(Format &f) const override;
};

} // namespace cc::isobus::pd
