/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/pd/DeviceDescriptionMessage>

namespace cc::isobus::pd {

/** \class ObjectPoolActivationRequest cc/isobus/pd/ObjectPoolActivationRequest
  * \brief Object pool activation request
  */
class ObjectPoolActivationRequest final: public DeviceDescriptionMessage
{
public:
    /** Create an interpretation of \a frame
      */
    explicit ObjectPoolActivationRequest(const CanFrame &frame):
        DeviceDescriptionMessage{frame}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return
            DeviceDescriptionMessage::isValid() &&
            DeviceDescriptionMessage::type() == Type::ObjectPoolActivationRequest;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Activation command
      */
    enum class Command: uint8_t
    {
        Activate   = 0xFFu,
        Deactivate = 0
    };

    /** Get activation command
      */
    Command command() const
    {
        return static_cast<Command>(frame_.at(1));
    }

private:
    void printValue(Format &f) const override;
};

} // namespace cc::isobus::pd
