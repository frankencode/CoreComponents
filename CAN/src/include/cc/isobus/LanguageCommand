/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/isobus/Locale>
#include <cc/j1939/Message>

namespace cc::isobus {

/** \class LanguageCommand cc/isobus/LanguageCommand
  * \brief Localisation settings
  */
class LanguageCommand final: public j1939::Message
{
public:
    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.language_command"; }

    /** PDU group number (PGN) of this message type
      */
    static constexpr uint32_t pgn() { return 0xFE0Fu; }

    /** Create an interpretation of \a frame
      */
    explicit LanguageCommand(const CanFrame &frame):
        Message{frame}
    {}

    /** Produce a new LanguageCommand message
      * \param src %Address of sender
      * \param locale %Locale information to include
      */
    static CanFrame produce(uint8_t src, Locale locale);

    /** Check validity
      */
    bool isValid() const
    {
        return
            Message::isValid() &&
            Message::pgn() == LanguageCommand::pgn();
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Get locale information
      */
    Locale locale() const
    {
        return Locale{frame_.data(0, 5)};
    }

    /** Stringify to JSON
      */
    String toString() const;
};

inline String str(const LanguageCommand &message) { return message.toString(); }

} // namespace cc::isobus
