/*
 * Copyright (C) 2019-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/CanMedia>
#include <cc/Channel>
#include <cc/System>

namespace cc {

/** \internal
  * \class CanFrameFeed cc/CanFrameFeed
  * \ingroup can
  * \brief CAN frame feed buffer
  */
class CanFrameFeed: public CanMedia
{
public:
    /** Create a null CAN feed
      */
    CanFrameFeed() = default;

    void feedFrame(const CanFrame &frame)
    {
        me().feedFrame(frame);
    }

    void shutdown()
    {
        me().shutdown();
    }

protected:
    struct State: public CanMedia::State
    {
        bool wait(int timeout) override
        {
            if (timeout <= 0) return channel_.wait();
            return channel_.waitUntil(System::now() + 0.001 * timeout);
        }

        bool read(Out<CanFrame> frame) override
        {
            return channel_.read(frame);
        }

        void feedFrame(const CanFrame &frame)
        {
            channel_.write(frame);
        }

        void shutdown()
        {
            channel_.close();
        }

        Channel<CanFrame> channel_;
    };

    explicit CanFrameFeed(State *newState):
        CanMedia{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
