/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/tp/ConnectionManagement>

namespace cc::j1939::tp {

/** \class DataTransfer cc/j1939/tp/DataPacket
  * \brief Data packet of a multi-packet message
  */
class DataPacket final: public Message
{
public:
    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.tp.dt"; }

    /** Protocol Data Unit Format (PF) of this message type
      */
    static constexpr uint8_t pf() { return 0xEBu; }

    /** Create interpretation of \a frame
      */
    explicit DataPacket(const CanFrame &frame):
        Message{frame}
    {}

    /** Create a new data packet
      * \param message Full message
      * \param packetNumber Number identifying the sub-sequence to send (starting with 1)
      * \param src Source address
      * \param dst Destination address (defaults to 0xFF for broadcast)
      */
    static CanFrame produce(const Bytes &message, uint8_t packetNumber, uint8_t src, uint8_t dst = 0xFFu);

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Check validity
      */
    bool isValid() const
    {
        return
            Message::isValid() &&
            CanId{frame_.canId()}.pf() == DataPacket::pf();
    }

    /** Return the packet number
      */
    uint8_t packetNumber() const { return frame_[0]; }

    /** Get the payload data at byte index \a i (0 <= i <= 6)
      */
    uint8_t payloadAt(int i) const { return frame_[i + 1]; }

    /** Stringify to JSON
      */
    String toString() const;
};

inline String str(const DataPacket &message) { return message.toString(); }

} // namespace cc::j1939::tp
