/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/tp/ConnectionManagement>

namespace cc::j1939::tp {

/** \class BroadcastAnnounce cc/j1939/tp/BroadcastAnnounce
  * \brief Broadcast announcement message (BAM)
  * \todo add toString(const MessageDictionary &)
  */
class BroadcastAnnounce final: public ConnectionManagement
{
public:
    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.tp.bam"; }

    /** Create an interpretation of \a frame
      */
    explicit BroadcastAnnounce(const CanFrame &frame):
        ConnectionManagement{frame}
    {}

    /** Create a Broadcast Announcement Message (BAM) frame for \a message of type \a payloadPgn
      */
    static CanFrame produce(uint32_t payloadPgn, const Bytes &message, uint8_t src = 0xFEu);

    /** Check validity
      */
    bool isValid() const
    {
        return
            ConnectionManagement::isValid() &&
            messageType() == ConnectionManagement::Type::BroadcastAnnounce;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Total number of bytes to be transferred
      */
    uint16_t totalSize() const
    {
        return frame_.data<uint16_t>(1, 2);
    }

    /** Total number of packets to be transferred
      */
    uint8_t packetCount() const
    {
        return frame_[3];
    }

    /** Stringify to JSON
      */
    String toString() const;
};

inline String str(const BroadcastAnnounce &message) { return message.toString(); }

} // namespace cc::j1939::tp
