/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/tp/ConnectionManagement>

namespace cc::j1939::tp {

class RequestToSend;

/** \class ClearToSend cc/j1939/tp/ClearToSend
  * \brief Clear to send message
  * \todo add toString(const MessageDictionary &)
  */
class ClearToSend final: public ConnectionManagement
{
public:
    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.tp.cts"; }

    /** Create an interpretation of \a frame
      */
    explicit ClearToSend(const CanFrame &frame):
        ConnectionManagement{frame}
    {}

    /** Create a reply to \a request clearing packages to be sent starting with \a nextPacket
      */
    static CanFrame produce(const RequestToSend &request, uint8_t nextPacket = 1);

    /** Check validity
      */
    bool isValid() const
    {
        return
            ConnectionManagement::isValid() &&
            messageType() == ConnectionManagement::Type::ClearToSend &&
            1 <= nextPacketNumber();
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Number of packets that are cleared to be sent
      */
    uint8_t clearedPacketCount() const
    {
        return frame_[1];
    }

    /** Next packet number expected to be sent
      */
    uint8_t nextPacketNumber() const
    {
        return frame_[2];
    }

    /** Stringify to JSON
      */
    String toString() const;
};

inline String str(const ClearToSend &message) { return message.toString(); }

} // namespace cc::j1939::tp
