/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/CanId>
#include <cc/CanFrame>
#include <cassert>

namespace cc::j1939 {

constexpr uint8_t BroadcastAddress = 0xFFu;
constexpr uint8_t NullAddress = 0xFEu;

/** \class Message cc/j1939/Message
  * \brief Generic J1939 message
  * \todo implement toString()
  */
class Message
{
public:
    /** Create an interpretation of \a frame
      */
    explicit Message(const CanFrame &frame):
        frame_{frame}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return frame_.eff() && !frame_.err();
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Check if the message is directed at a particular host
      * \see dst()
      */
    bool isDirected() const
    {
        return CanId{frame_}.isDirected();
    }

    /** Message type identifier
      */
    uint32_t pgn() const
    {
        return CanId{frame_}.pgn();
    }

    /** Process Data Unit Format (PF)
      */
    uint8_t pf() const
    {
        return CanId{frame_}.pf();
    }

    /** Source address
      */
    uint8_t src() const
    {
        return CanId{frame_}.src();
    }

    /** Destination address
      */
    uint8_t dst() const
    {
        assert(isDirected());
        return CanId{frame_}.dst();
    }

    /** Message priority (from 0 for highest to 7 for lowest)
      */
    uint8_t prio() const
    {
        return CanId{frame_}.prio();
    }

    /** Stringify to JSON
      */
    String toString() const;

protected:
    const CanFrame &frame_;
};

inline String str(const Message &message) { return message.toString(); }

} // namespace cc::j1939
