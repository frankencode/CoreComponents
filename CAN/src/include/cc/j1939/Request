/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/Message>

namespace cc::j1939 {

/** \class Request cc/j1939/Request
  * \brief Request information
  */
class Request final: public Message
{
public:
    /** Short name of this message type
      */
    static constexpr const char *shortName() { return "j1939.request"; }

    /** Protocol Data Unit Format (PF) of this message type
      */
    static constexpr uint8_t pf() { return 0xEAu; }

    /** Create an interpretation of \a frame
      */
    explicit Request(const CanFrame &frame):
        Message{frame}
    {}

    /** Check validity
      */
    bool isValid() const
    {
        return
            Message::isValid() &&
            Message::pf() == Request::pf() &&
            requestedPgn() != 0;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Parameter Group Number (PGN) of the requested information
      */
    uint32_t requestedPgn() const
    {
        return frame_.data<uint32_t>(0, 2);
    }

    /** Stringify to JSON
      */
    String toString() const;
};

inline String str(const Request &message) { return message.toString(); }

} // namespace cc::j1939
