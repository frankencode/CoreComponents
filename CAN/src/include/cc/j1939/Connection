/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/CanFrame>
#include <compare>

namespace cc::j1939 {

/** \internal
  * \class Connection cc/j1939/Connection
  * \brief Information about a J1939 multi-packet message in transit
  */
class Connection final: public Object
{
public:
    Connection() = default;

    Connection(uint32_t pgn, uint8_t src, uint8_t dst, uint32_t totalSize);

    uint32_t pgn() const;
    uint8_t src() const;
    uint8_t dst() const;
    uint32_t totalSize() const;
    uint32_t packetCount() const;

    void setPacketOffset(uint32_t packetNumber);

    bool deposit(uint8_t packetNumber, const CanFrame &packet);
    bool collect(Out<String> message) const;

    using Id = uint16_t;
    static Id id(uint8_t src, uint8_t dst);
    Id id() const;

    std::strong_ordering operator<=>(const Connection &other) const;

private:
    struct State;

    State &me();
    const State &me() const;
};

inline std::strong_ordering operator<=>(const Connection &connection, Connection::Id other) { return connection.id() <=> other; }
inline std::strong_ordering operator<=>(Connection::Id other, const Connection &connection) { return other <=> connection.id(); }

} // namespace cc::j1939
