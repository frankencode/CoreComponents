/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/IndustryInfo>
#include <cc/Map>

namespace cc::j1939 {

/** \class IndustryDictionary cc/j1939/IndustryDictionary
  * \brief Industry group information dictionary
  */
class IndustryDictionary: public Object
{
public:
    /** Create a null object
      */
    IndustryDictionary() = default;

    bool lookup(int industry, Out<IndustryInfo> info) const
    {
        return me().lookup(industry, info);
    }

    const Map<int, IndustryInfo> &industryInfos() const
    {
        return me().industryInfos();
    }

protected:
    struct State: public Object::State
    {
        virtual bool lookup(int industry, Out<IndustryInfo> info) const
        {
            return industryInfos().lookup(industry, info);
        }

        virtual const Map<int, IndustryInfo> &industryInfos() const = 0;
    };

    explicit IndustryDictionary(State *newState):
        Object{newState}
    {}

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::j1939
