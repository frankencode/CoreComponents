/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/etp/ConnectionManagement>

namespace cc::j1939::etp {

class RequestToSend;

/** \class EndOfMessage cc/j1939/etp/EndOfMessage
  * \brief Confirmation of full reception of a message
  * \todo add toString(const MessageDictionary &)
  */
class EndOfMessage final: public ConnectionManagement
{
public:
    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.etp.eoma"; }

    /** Interpret \a frame as a confirmation for the full reception of a multi-packet data transfer
      */
    explicit EndOfMessage(const CanFrame &frame):
        ConnectionManagement{frame}
    {}

    /** Create a confirmation message for the full reception of a multi-packet data transfer
      */
    static CanFrame produce(const RequestToSend &request);

    /** Check validity
      */
    bool isValid() const
    {
        return
            ConnectionManagement::isValid() &&
            messageType() == ConnectionManagement::Type::EndOfMessage;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Total number of bytes received
      */
    uint32_t totalSize() const
    {
        return frame_.data<uint32_t>(1, 4);
    }

    /** Stringify to JSON
      */
    String toString() const;
};

inline String str(const EndOfMessage &message) { return message.toString(); }

} // namespace cc::j1939::etp
