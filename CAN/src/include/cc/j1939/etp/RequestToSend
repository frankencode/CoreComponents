/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/etp/ConnectionManagement>

namespace cc::j1939::etp {

/** \class RequestToSend cc/j1939/etp/RequestToSend
  * \brief Request to send message
  */
class RequestToSend final: public ConnectionManagement
{
public:
    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.etp.rts"; }

    /** Create an interpretation of \a frame
      */
    explicit RequestToSend(const CanFrame &frame):
        ConnectionManagement{frame}
    {}

    /** Create a Request to Send (RTS) for \a message of type \a payloadPgn originating from \a src and being directed at \a dst
      */
    static CanFrame produce(uint32_t payloadPgn, uint8_t src, uint8_t dst, const Bytes &message);

    /** Check if the frame is indeed a multi-packet data broadcast announcement
      */
    bool isValid() const
    {
        return
            ConnectionManagement::isValid() &&
            messageType() == ConnectionManagement::Type::RequestToSend &&
            1786 <= totalSize() && totalSize() <= 117440505;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Total number of bytes to be transferred
      */
    uint32_t totalSize() const
    {
        return frame_.data<uint32_t>(1, 4);
    }

    /** Stringify to JSON
      */
    String toString() const;
};


inline String str(const RequestToSend &message) { return message.toString(); }

} // namespace cc::j1939::etp
