/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/j1939/etp/ConnectionManagement>

namespace cc::j1939::etp {

class RequestToSend;

/** \class Abort cc/j1939/etp/Abort
  * \brief Connection abort message
  * \todo add toString(const MessageDictionary &)
  */
class Abort final: public ConnectionManagement
{
public:
    /** Connection abort reason
      */
    enum class Reason: uint8_t
    {
        MaxConnectionsExceeded      = 1u,
        ResourceCompetition         = 2u,
        Timeout                     = 3u,
        AmbiguousClearToSend        = 4u,
        MaxRetransmissionsExceeded  = 5u,
        UnexpectedDataPacket        = 6u,
        BadSequenceNumber           = 7u,
        DuplicateSequenceNumber     = 8u,
        UnexpectedDataPacketOffset  = 9u,
        BadWindowPayloadTypeId      = 10u,
        DataPacketWindowSizeOverrun = 11u,
        BadPacketOffset             = 12u,
        BadClearToSendPayloadTypeId = 14u,
        Other                       = 250u
    };

    /** Short name of this message
      */
    static constexpr const char *shortName() { return "j1939.etp.abrt"; }

    /** Create an interpretation of \a frame
      */
    explicit Abort(const CanFrame &frame):
        ConnectionManagement{frame}
    {}

    /** Create a reply to \a request rejecting the connection
      */
    static CanFrame produce(const RequestToSend &request, Reason reason = Reason::ResourceCompetition);

    /** Check validity
      */
    bool isValid() const
    {
        return
            ConnectionManagement::isValid() &&
            messageType() == ConnectionManagement::Type::Abort;
    }

    /** Check validity
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Connection abort reason
      */
    Reason reason() const
    {
        return static_cast<Reason>(frame_[1]);
    }

    /** Stringify to JSON
      */
    String toString() const;
};

inline uint8_t operator+(Abort::Reason reason) { return static_cast<uint8_t>(reason); }

inline String str(const Abort &message) { return message.toString(); }

} // namespace cc::j1939::etp
