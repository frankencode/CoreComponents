/*
 * Copyright (C) 2019-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/String>
#include <compare>
#include <cstdint>

namespace cc::can_open {

/** \class Selector cc/can_open/Selector
  * \ingroup can_open
  * \brief %Object dictionary address (index, sub-index)
  */
class Selector
{
public:
    static constexpr uint32_t DeviceType    { 0x100000u }; ///< Default dictionary key of the device type
    static constexpr uint32_t ErrorRegister { 0x100100u }; ///< Default dictionary key of the error register (\sa ErrorRegister)
    static constexpr uint32_t HeartBeatTime { 0x101700u }; ///< Default dictionary key of the heart beat time

    /** Default dictionary entries of the device identity record
      */
    struct DeviceIdentity {
        static constexpr uint32_t NumberOfEntries { 0x101800u }; ///< Default dictionary key of the number of entries of the device identity record
        static constexpr uint32_t VendorId        { 0x101801u }; ///< Default dictionary key of the vendor identifier
        static constexpr uint32_t ProductCode     { 0x101802u }; ///< Default dictionary key of the product code
        static constexpr uint32_t RevisionNumber  { 0x101803u }; ///< Default dictionary key of the revision number
    };

    /** Create a zero selector (object index and sub-index equal zero)
      */
    Selector():
        key_{0}
    {}

    /** Create a selector for \a key
      */
    Selector(uint32_t key):
        key_{key}
    {}

    /** Create a selector for object \a index and \a subIndex
      */
    Selector(uint32_t index, uint32_t subIndex):
        key_{index << 8 | subIndex}
    {}

    /** %Object index
      */
    uint32_t index() const { return key_ >> 8; }

    /** %Objcet sub-index
      */
    uint32_t subIndex() const { return key_ & 0xFF; }

    /** Combinded object index and sub-index
      */
    uint32_t key() const { return key_; }

    /** %Syntax sugar for key()
      */
    uint32_t operator+() const { return key_; }

    /** Equal to operator
      */
    bool operator==(const Selector &other) const
    {
        return key_ == other.key_;
    }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Selector &other) const
    {
        return key_ <=> other.key_;
    }

private:
    uint32_t key_;
};

String str(Selector selector);

} // namespace cc::can_open
