/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/types>
#include <cc/CanFrame>

namespace cc::can_open {

/** \class Emergency cc/can_open/Emergency
  * \ingroup can_open
  * \brief %Emergency messages
  */
class Emergency
{
public:
    /** %Type of emergency
      */
    enum class Type: uint16_t {
        None                = 0x0000, ///< No error or error reset
        Generic             = 0x1000, ///< Generic error
        Current             = 0x2000, ///< Current error
        InputCurrent        = 0x2100, ///< Current error: device input side
        InsideCurrent       = 0x2200, ///< Current error: inside the device
        OutputCurrent       = 0x2300, ///< Current error: device output side
        Voltage             = 0x3000, ///< Voltage error
        InputVoltage        = 0x3100, ///< Mains voltage error
        InsideVoltage       = 0x3200, ///< Voltage error: inside the device
        OutputVoltage       = 0x3300, ///< Voltage error: device output side
        Temperature         = 0x4000, ///< Temperature out-of-range
        AmbientTemperature  = 0x4100, ///< Ambient temperature out of range
        DeviceTemperature   = 0x4200, ///< Device temperature out of range
        Hardware            = 0x5000, ///< Hardware failure
        Software            = 0x6000, ///< Software failure
        InternalSoftware    = 0x6100, ///< Internal software failure
        UserSoftware        = 0x6200, ///< User software failure (e.g. PLC code)
        DataSet             = 0x6300, ///< Data set invalid
        AdditionalModules   = 0x7000, ///< Add-on module(s) failure
        Monitoring          = 0x8000, ///< Monitoring error
        Communication       = 0x8100, ///< Data communication error
        CanOverrun          = 0x8110, ///< CAN buffer overflow (object(s) lost)
        CanPassiveMode      = 0x8120, ///< CAN interface switched to error passive mode (interference?)
        CanKeepAlive        = 0x8130, ///< Life guarding or heart beat error
        CanBusOff           = 0x8140, ///< Device recovered from bus-off
        CanIdCollision      = 0x8150, ///< CAN ID collision
        ProtocolError       = 0x8200, ///< Protocol error
        ProcessDataLength   = 0x8210, ///< Failed to process PDO: invalid number of data bytes
        ProcessDataOverhang = 0x8220, ///< Failed to process PDO: to many data bytes
        NoSuchObject        = 0x8230, ///< Failed to process DAM MPDO: destination object not available
        SyncOverhang        = 0x8240, ///< Invalid SYNC: number of data bytes greater than zero
        ProcessDataTimeout  = 0x8250, ///< RPDO timed out
        External            = 0x9000, ///< External error
        AdditionalFunctions = 0xF000, ///< Add-on function failed
        DeviceSpecific      = 0xFF00, ///< Device specific error
        CanKeepAliveForNode = 0x8F00  ///< Node guarding or heart beat error monitoring a specific node being monitored
    };

    /** Unique message type name
      */
    static const char *typeName() { return "can_open.emergency"; }

    /** Create a new emergency frame
      */
    static CanFrame createFrame(int nodeId, Emergency::Type type, ErrorRegister errorRegister, uint64_t deviceError, int monitoredNodeId = 0);

    /** Interpret \a frame as emergency
      */
    explicit Emergency(const CanFrame &frame):
        frame_{frame}
    {}

    /** Interpretation is valid
      */
    bool isValid() const
    {
        return
            0x81 <= frame_.canId() && frame_.canId() <= 0xFF &&
            frame_.size() == 8;
    }

    /** Interpretation is valid
      */
    explicit operator bool() const { return isValid(); }

    /** CANopen node ID of the originator of the emergency
      */
    int nodeId() const
    {
        return frame_.canId() - 0x80;
    }

    /** Type of emergency
      */
    uint16_t typeCode() const
    {
        return frame_.data<uint16_t>(0, 1);
    }

    /** Type of emergency
      */
    Type type() const
    {
        uint16_t value = typeCode();
        if (0x8F01 <= value && value <= 0x8F7F) return Type::CanKeepAliveForNode;
        return static_cast<Type>(value);
    }

    /** Copy of the node's error register
      */
    ErrorRegister errorRegister() const
    {
        return static_cast<ErrorRegister>(frame_(2));
    }

    /** Vendor-specific error code
      */
    uint64_t vendorError() const
    {
        return frame_.data<uint64_t>(3, 7);
    }

    /** CANopen node ID of the monitored node (if any)
      */
    int monitoredNodeId() const
    {
        return (type() == Type::CanKeepAliveForNode) ? static_cast<uint16_t>(type()) - 0x8F00 : 0;
    }

    /** Stringify this interpretation of a frame
      */
    String toString() const;

private:
    const CanFrame &frame_;
};

inline uint16_t operator+(Emergency::Type type) { return static_cast<uint16_t>(type); }

inline String str(const Emergency &message) { return message.toString(); }

} // namespace cc::can_open
