/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/BlockRequest>

namespace cc::can_open::sdo {

class BlockReadInitRequest final: public BlockRequest
{
public:
    static constexpr const char *typeName() { return "can_open.sdo.block_read_init_request"; }

    static CanFrame createFrame(int serverId, Selector selector, int blockSize, int switchThreshold);

    explicit BlockReadInitRequest(const CanFrame &frame):
        BlockRequest{frame}
    {}

    explicit operator bool() const { return isValid(); }

    bool isValid() const
    {
        return
            BlockRequest::isValid() &&
            BlockRequest::specifier() == BlockRequest::Specifier::BlockReadInit &&
            frame_.size() >= 5;
    }

    bool crcSupport() const
    {
        return frame_(0) & 4U;
    }

    uint16_t index() const
    {
        return frame_.data<uint16_t>(1, 2);
    }

    uint8_t subIndex() const
    {
        return frame_(3);
    }

    Selector selector() const
    {
        return (static_cast<uint32_t>(index()) << 8) | subIndex();
    }

    int blockSize() const
    {
        return frame_(4);
    }

    int switchThreshold() const
    {
        return frame_(5);
    }

    String toString() const;
};

} // namespace cc::can_open::sdo
