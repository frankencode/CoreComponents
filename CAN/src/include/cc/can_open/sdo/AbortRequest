/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/Request>
#include <cc/can_open/sdo/ErrorCode>
#include <cassert>

namespace cc::can_open::sdo {

/** \brief SDO data transfer abort initiated by SDO client
  */
class AbortRequest final: public Request
{
public:
    static constexpr const char *typeName() { return "can_open.sdo.abort_request"; }

    static CanFrame createFrame(int serverId, Selector selector, ErrorCode ErrorCode);

    explicit AbortRequest(const CanFrame &frame):
        Request{frame}
    {}

    bool isValid() const
    {
        return
            Request{frame_}.isValid() &&
            Request{frame_}.specifier() == Request::Specifier::Abort &&
            frame_.size() == 8;
    }

    explicit operator bool() const { return isValid(); }

    uint16_t index() const
    {
        return frame_.data<uint16_t>(1, 2);
    }

    uint8_t subIndex() const
    {
        return frame_(3);
    }

    Selector selector() const
    {
        return (static_cast<uint32_t>(index()) << 8) | subIndex();
    }

    ErrorCode error() const
    {
        return static_cast<ErrorCode>(frame_.data<uint32_t>(4, 7));
    }

    String toString() const;
};

String str(const AbortRequest &message);

} // namespace cc::can_open::sdo
