/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/BlockRequest>

namespace cc::can_open::sdo {

class BlockWriteEndRequest final: public BlockRequest
{
public:
    static constexpr const char *typeName() { return "can_open.sdo.block_write_end_request"; }

    static CanFrame createFrame(int serverId, const Bytes &data, bool crcSupport);

    explicit BlockWriteEndRequest(const CanFrame &frame):
        BlockRequest{frame}
    {}

    bool isValid() const
    {
        return
            BlockRequest::isValid() &&
            BlockRequest::specifier() == BlockRequest::Specifier::BlockWriteEnd &&
            frame_.size() >= 3;
    }

    explicit operator bool() const { return isValid(); }

    int lastSegmentDataCount() const
    {
        return 7 - ((frame_(0) & 0xCU) >> 2);
    }

    uint16_t crc() const
    {
        return frame_.data<uint16_t>(1, 2);
    }

    String toString() const;
};

} // namespace cc::can_open::sdo
