/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/BlockReply>

namespace cc::can_open::sdo {

class BlockReadInitReply final: public BlockReply
{
public:
    static const char *typeName() { return "can_open.sdo.block_read_init_reply"; }

    static CanFrame createFrame(int serverId, Selector selector, const Bytes &data);

    explicit BlockReadInitReply(const CanFrame &frame):
        BlockReply{frame}
    {}

    bool isValid() const
    {
        return
            BlockReply::isValid() &&
            BlockReply::specifier() == BlockReply::Specifier::BlockReadInit &&
            frame_.size() >= 4;
    }

    explicit operator bool() const { return isValid(); }

    bool crcSupport() const
    {
        return frame_(0) & 4U;
    }

    uint16_t index() const
    {
        return frame_.data<uint16_t>(1, 2);
    }

    uint8_t subIndex() const
    {
        return frame_(3);
    }

    Selector selector() const
    {
        return (static_cast<uint32_t>(index()) << 8) | subIndex();
    }

    uint32_t totalSize() const
    {
        return hasIndicatedSize() ? frame_.data<uint32_t>(4, 7) : 0;
    }

    String toString() const;

private:
    bool hasIndicatedSize() const
    {
        return frame_(0) & 2U;
    }
};

} // namespace cc::can_open::sdo
