/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/types>
#include <cc/CanFrame>

namespace cc::can_open::sdo {

/** \brief SDO request
  */
class Request
{
public:
    /** \brief Client Command Specifier (CCS)
      */
    enum class Specifier: uint8_t {
        WriteSegment = 0,
        Write        = 1,
        Read         = 2,
        ReadSegment  = 3,
        Abort        = 4,
        BlockRead    = 5,
        BlockWrite   = 6
    };

    explicit Request(const CanFrame &frame):
        frame_{frame}
    {}

    bool isValid() const
    {
        return
            0x601 <= frame_.canId() && frame_.canId() <= 0x67F &&
            frame_.size() > 0;
    }

    explicit operator bool() const { return isValid(); }

    int serverId() const { return static_cast<int>(frame_.canId() - 0x600); }

    Specifier specifier() const { return static_cast<Specifier>((frame_(0) & 0xE0U) >> 5U); }

    String toString() const;

protected:
    const CanFrame &frame_;
};

inline uint8_t operator+(Request::Specifier specifier) { return static_cast<uint8_t>(specifier); }

String str(const Request &message);

} // namespace cc::can_open::sdo
