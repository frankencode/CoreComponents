/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/Reply>

namespace cc::can_open::sdo {

class BlockReply: public Reply
{
public:
    enum class Specifier: uint8_t {
        BlockWriteInit      = 0x50,
        BlockWriteEnd       = 0x51,
        BlockWriteAck       = 0x52,
        BlockReadStreamInit = 0x60,
        BlockReadInit       = 0x62,
        BlockReadEnd        = 0x61
    };

    explicit BlockReply(const CanFrame &frame):
        Reply{frame}
    {}

    explicit operator bool() const { return isValid(); }

    bool isValid() const
    {
        return
            Reply::isValid() && (
                Reply::specifier() == Reply::Specifier::BlockRead ||
                Reply::specifier() == Reply::Specifier::BlockWrite
            );
    }

    Specifier specifier() const
    {
        return
            static_cast<Specifier>(
                ((frame_(0) & 0xE0U) >> 1) |
                (frame_(0) & 0x3U)
            );
    }

    String toString() const;
};

} // namespace cc::can_open::sdo
