/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/types>
#include <cc/CanFrame>

namespace cc::can_open::sdo {

/** \brief SDO reply
  */
class Reply
{
public:
    /** Server Command Specifier (SCS)
      */
    enum class Specifier: uint8_t {
        ReadSegment  = 0,
        WriteSegment = 1,
        Read         = 2,
        Write        = 3,
        Abort        = 4,
        BlockWrite   = 5,
        BlockRead    = 6
    };

    explicit Reply(const CanFrame &frame):
        frame_{frame}
    {}

    explicit operator bool() const
    {
        return isValid();
    }

    bool isValid() const
    {
        return
            0x581 <= frame_.canId() && frame_.canId() <= 0x5FF &&
            frame_.size() > 0;
    }

    int serverId() const
    {
        return static_cast<int>(frame_.canId()) - 0x580;
    }

    Specifier specifier() const
    {
        return static_cast<Specifier>((frame_(0) & 0xE0U) >> 5);
    }

    String toString() const;

protected:
    const CanFrame &frame_;
};

inline uint8_t operator+(Reply::Specifier specifier) { return static_cast<uint8_t>(specifier); }

String str(const Reply &message);

} // namespace cc::can_open::sdo
