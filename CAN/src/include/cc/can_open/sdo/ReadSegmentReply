/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/Reply>

namespace cc::can_open::sdo {

class ReadSegmentReply final: public Reply
{
public:
    static const char *typeName() { return "can_open.sdo.read_segment_reply"; }

    static CanFrame createFrame(int serverId, const Bytes &data, int fill, int offset);

    explicit ReadSegmentReply(const CanFrame &frame):
        Reply{frame}
    {}

    bool isValid() const
    {
        return
            Reply::isValid() &&
            Reply::specifier() == Reply::Specifier::ReadSegment;
    }

    int dataCount() const
    {
        return 7 - ((frame_(0) & 0xE) >> 1);
    }

    uint8_t dataAt(int i) const
    {
        return frame_(i + 1);
    }

    Bytes data() const
    {
        Bytes chunk { Dim<>{dataCount()} };
        for (int i = 0; i < chunk.count(); ++i) {
            chunk[i] = frame_(i + 1);
        }
        return chunk;
    }

    bool toggle() const
    {
        return frame_(0) & 0x10;
    }

    bool isLast() const
    {
        return frame_(0) & 1;
    }

    String toString() const;
};

} // namespace cc::can_open::sdo
