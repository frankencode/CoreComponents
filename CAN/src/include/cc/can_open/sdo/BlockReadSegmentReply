/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/Reply>

namespace cc::can_open::sdo {

class BlockReadSegmentReply final: public Reply
{
public:
    static const char *typeName() { return "can_open.sdo.block_read_segment_reply"; }

    static CanFrame createFrame(int serverId, const Bytes &data, int offset, int sequenceNumber);

    explicit BlockReadSegmentReply(const CanFrame &frame):
        Reply{frame}
    {}

    bool isValid() const
    {
        return
            Reply::isValid() &&
            frame_.size() == 8 &&
            sequenceNumber() != 0;
    }

    explicit operator bool() const
    {
        return isValid();
    }

    bool isLast() const
    {
        return frame_(0) & 0x80;
    }

    int sequenceNumber() const
    {
        return frame_(0) & 0x7F;
    }

    uint8_t segmentDataAt(int i) const
    {
        return frame_(1 + i);
    }

    Bytes segmentData() const
    {
        return frame_.data(1, 7);
    }

    String toString() const;
};

} // namespace cc::can_open::sdo
