/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/types>
#include <cc/CanFrame>
#include <cc/String>

namespace cc::can_open {

/** \brief CANopen node status signal
  */
class HeartBeat
{
public:
    static const char *typeName() { return "can_open.heart_beat"; }

    static CanFrame createFrame(int sourceId, NodeState nodeState);

    explicit HeartBeat(const CanFrame &frame):
        frame_{frame}
    {}

    bool isValid() const
    {
        return
            0x701 <= frame_.canId() && frame_.canId() <= 0x77F &&
            frame_.size() == 1;
    }

    explicit operator bool() const
    {
        return isValid();
    }

    int sourceId() const
    {
        return frame_.canId() - 0x700;
    }

    NodeState nodeState() const
    {
        return static_cast<NodeState>(frame_(0) & 0x7F);
    }

    bool toggle() const
    {
        return frame_(0) & 0x80;
    }

    String toString() const;

private:
    const CanFrame &frame_;
};

String str(const HeartBeat &message);

} // namespace cc::can_open
