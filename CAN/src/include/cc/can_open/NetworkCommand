/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#include <cc/CanFrame>

namespace cc::can_open {

/** \class NetworkCommand cc/can_open/NetworkCommand
  * \ingroup can_open
  * \brief %Node state transition request
  */
class NetworkCommand final
{
public:
    /** Unique message type name
      */
    static constexpr const char *typeName() { return "can_open.network_command"; }

    /** Command specifier
      */
    enum class Specifier: uint8_t {
        Start  = 1,   ///< Request slave node(s) to enter Operational state
        Stop   = 2,   ///< Request slave node(s) to enter Stopped state
        Halt   = 128, ///< Request slave node(s) to return to Pre-Operational state
        Reboot = 129, ///< Request slave node(s) to return to Power-On Reset state (cold reset)
        Reset  = 130  ///< Request slave node(s) to return to Initialization state (warm reset)
    };

    /** Create a new node state transition request frame
      */
    static CanFrame createFrame(Specifier command, int targetId = 0);

    /** Create an interpreation of \a frame as network command
      */
    explicit NetworkCommand(const CanFrame &frame):
        frame_{frame}
    {}

    /** Interpretation is valid
      */
    bool isValid() const
    {
        return frame_.canId() == 0 && frame_.size() == 2;
    }

    /** Interpretation is valid
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** Command specifier
      */
    Specifier specifier() const
    {
        return static_cast<Specifier>(frame_(0));
    }

    /** Target node that is issued to transition its state
      */
    int targetId() const
    {
        return frame_(1);
    }

    /** Stringify this interpretation of a frame
      */
    String toString() const;

private:
    const CanFrame &frame_;
};

inline uint8_t operator+(NetworkCommand::Specifier specifier) { return static_cast<uint8_t>(specifier); }

String str(NetworkCommand::Specifier commandSpecifier);

inline String str(const NetworkCommand &message) { return message.toString(); }

} // namespace cc::can_open
