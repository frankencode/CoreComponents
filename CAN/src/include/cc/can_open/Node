/*
 * Copyright (C) 2019-2024 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/can_open/sdo/ErrorCode>
#include <cc/can_open/HeartBeatGenerator>
#include <cc/can_open/Emergency>
#include <cc/can_open/NetworkCommand>
#include <cc/can_open/types>
#include <cc/Thread>

namespace cc::can_open {

/** \class Node cc/can_open/Node
  * \ingroup can_open
  * \brief Abstract CANopen bus node
  * \todo Add support for process data
  */
class Node: public Object
{
public:
    /** Create a null object
      */
    Node() = default;

    /** Start the node
      */
    void start()
    {
        me().start();
    }

protected:
    struct State: public Object::State
    {
        friend class Node;

    protected:
        State(const CanMedia &media, int nodeId, int timeout = -1);
        ~State();

        virtual void initSettings();
        // virtual void initEventHandlers();

        NodeState nodeState() const;
        CanMedia media() const { return media_; }
        int timeout() const { return timeout_; }

        virtual bool autoStart() const;
        virtual void nodeStart();
        virtual void nodeStop();
        virtual void nodeHalt();
        virtual void nodeReboot();
        virtual void nodeReset();

        virtual Bytes readObject(Selector selector) const;
        virtual void writeObject(Selector selector, const Bytes &data);

        virtual bool expeditedTransferIsEnabled() const;

        ErrorRegister errorRegister() const;
        void setErrorRegister(ErrorRegister flags);

        void issueEmergency(Emergency::Type emergencyType, uint64_t deviceError = 0);

    private:
        void setNodeState(NodeState newNodeState);

        void start();
        void shutdown();

        void run();
        void handleNodeCommand(NetworkCommand::Specifier commandSpecifier);

        void handleWriteRequest(const CanFrame &head);
        void handleWriteSegmentRequest(const CanFrame &tail);

        void handleReadRequest(const CanFrame &head);
        void handleReadSegmentRequest(const CanFrame &tail);

        void handleBlockWriteRequest(const CanFrame &head);
        void handleBlockReadRequest(const CanFrame &head);

        CanFrame getNextRequest();
        void canAbort(Selector selector, sdo::ErrorCode error);

        CanFrame writeHead_;
        CanFrame readHead_;

        CanMedia media_;
        int nodeId_;
        int timeout_;

        Bytes buffer_ { Dim<>{65536} };
        long fill_ { 0 };
        long offset_ { 0 };

        // CanFrameFeed eventFeed_;
        // EventMonitor monitor_; // TODO
        HeartBeatGenerator heartBeatGenerator_;
        ErrorRegister errorRegister_ { ErrorRegister::None };

        Thread thread_;
    };

    explicit Node(State *newState);

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::can_open
