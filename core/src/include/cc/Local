/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

namespace cc {

/** \brief Reduce syntactic clutter of local object instantiation
  */
template<class T>
class Local
{
public:
    Local() {}

    template<class... Args>
    Local(Args... args):
        instance_{args...}
    {}

    T *operator->() { return &instance_; }
    const T *operator->() const { return &instance_; }

    operator const T *() const { return &instance_; }
    explicit operator bool() const { return bool(instance_); }

    operator T &() { return instance_; }
    operator const T &() const { return instance_; }

    T *operator&() { return &instance_; }

private:
    T instance_;
};

} // namespace cc
