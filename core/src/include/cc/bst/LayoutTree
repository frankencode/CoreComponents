/*
 * Copyright (C) 2007-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bst/OrdinalTree>
#include <functional>

namespace cc::bst {

template<class T, class E>
class LayoutNode final: public OrdinalNode
{
public:
    using Item = T;
    using Extent = E;

    LayoutNode():
        treeExtent_{0},
        itemExtent_{0},
        item_{Item{}}
    {}

    LayoutNode(Extent extent, const Item &item):
        treeExtent_{extent},
        itemExtent_{extent},
        item_{item}
    {
        IndexTracking<T>::setHandle(item_, this);
    }

    ~LayoutNode()
    {
        IndexTracking<T>::setHandle(item_, nullptr);
    }

    static Extent treeExtent(const OrdinalNode *k)
    {
        return static_cast<const LayoutNode *>(k)->treeExtent_;
    }

    static Extent itemExtent(const OrdinalNode *k)
    {
        return static_cast<const LayoutNode *>(k)->itemExtent_;
    }

    Extent getPos() const
    {
        Extent y = (left_) ? treeExtent(left_) : 0;
        for (const OrdinalNode *k = this; k->parent_; k = k->parent_) {
            if (k == k->parent_->right_) {
                y += treeExtent(k->parent_) - treeExtent(k);
            }
        }
        return y;
    }

    void setItemExtent(Extent newValue)
    {
        if (itemExtent_ == newValue) return;
        Extent delta = newValue - itemExtent_;
        for (OrdinalNode *k = parent_; k; k = k->parent_) {
            static_cast<LayoutNode *>(k)->treeExtent_ += delta;
        }
        itemExtent_ = newValue;
    }

    Extent treeExtent_;
    Extent itemExtent_;
    Item item_;
};

/** \internal
  * \brief Layout tree
  * A Layout tree is binary search tree which stores and maintains in each node the
  * physical extent of the stored item and the combined physical extent of all the
  * stored items of the sub-tree spanned by each particular node.
  * Thereby the Layout tree allows to query the physical position of an item stored
  * in the tree. Furthermore it supports range queries to get all items located in
  * certain distance range.
  */
template<class Item, class Extent>
class LayoutTree final: public OrdinalTree
{
public:
    using Node = LayoutNode<Item, Extent>;

    long getIndexOf(const Item &item) const
    {
        void *handle = IndexTracking<Item>::handle(item);
        if (!handle) return -1;
        return OrdinalTree::getIndexOf(static_cast<OrdinalNode *>(handle));
    }

    void insertAt(long index, const Item &item, Extent extent);
    void updateAt(long index, const Item &item, Extent extent);
    void removeAt(long index, Out<Item> item = None{});

    Extent extent() const;

    Extent extentAt(long index) const;
    bool updateExtentAt(long index, Extent extent);
    Extent updateExtentAt(long index, const std::function<Extent(Extent)> &f);

    void getItemExtentAt(long index, Out<Item> item, Out<Extent> extent = None{}) const;
    void getView(Extent pos0, Extent pos1, Out<long> index0, Out<long> index1, Out<Extent> itemPos0) const;
    bool lookup(Extent pos, Out<Item> item = None{}, Out<long> index = None{}, Out<Extent> itemPos = None{}) const;
    Extent getPosAt(long index) const;

    Item &at(long index);
    const Item &at(long index) const;

    Node *getNodeAt(long index) const { return static_cast<Node *>(OrdinalTree::getNodeAt(index)); }
    Node *find(Extent x, Out<long> index = nullptr, Out<Extent> x0 = nullptr) const;

private:
    inline static long treeExtent(Node *k) { return (k) ? k->treeExtent_ : 0; }

    inline static void establishTreeExtent(Node *k)
    {
        k->treeExtent_ =
            treeExtent(static_cast<Node *>(k->left_)) +
            treeExtent(static_cast<Node *>(k->right_)) +
            k->itemExtent_;
    }

    void changed(OrdinalNode *kp, OrdinalNode *kc, bool left, bool attached) override;
    void rotated(OrdinalNode *k1, bool left) override;
};

template<class Item, class Extent>
void LayoutTree<Item, Extent>::insertAt(long index, const Item &item, Extent extent)
{
    Node *kn = new Node{extent, item};
    attachAt(index, kn);
}

template<class Item, class Extent>
void LayoutTree<Item, Extent>::updateAt(long index, const Item &item, Extent extent)
{
    Node *k = getNodeAt(index);
    Extent delta = extent - k->itemExtent_;
    k->item_ = item;
    k->itemExtent_ = extent;
    k->treeExtent_ += delta;
    for (; k; k = static_cast<Node *>(k->parent_))
        k->treeExtent_ += delta;
}

template<class Item, class Extent>
void LayoutTree<Item, Extent>::removeAt(long index, Out<Item> item)
{
    Node *ko = static_cast<Node *>(unlinkAt(index));
    item = ko->item_;
    delete ko;
}

template<class Item, class Extent>
Extent LayoutTree<Item, Extent>::extent() const
{
    if (!root_) return 0;
    return treeExtent(static_cast<Node *>(root_));
}

template<class Item, class Extent>
Extent LayoutTree<Item, Extent>::extentAt(long index) const
{
    return getNodeAt(index)->itemExtent_;
}

template<class Item, class Extent>
bool LayoutTree<Item, Extent>::updateExtentAt(long index, Extent extent)
{
    Node *k = getNodeAt(index);
    if (extent == k->itemExtent_) return false;
    Extent delta = extent - k->itemExtent_;
    k->itemExtent_ = extent;
    for (; k; k = static_cast<Node *>(k->parent_))
        k->treeExtent_ += delta;
    return true;
}

template<class Item, class Extent>
Extent LayoutTree<Item, Extent>::updateExtentAt(long index, const std::function<Extent(Extent)> &f)
{
    Node *k = getNodeAt(index);
    Extent extent = f(k->itemExtent_);
    if (extent == k->itemExtent_) return extent;
    Extent delta = extent - k->itemExtent_;
    k->itemExtent_ = extent;
    for (; k; k = static_cast<Node *>(k->parent_))
        k->treeExtent_ += delta;
    return extent;
}

template<class Item, class Extent>
void LayoutTree<Item, Extent>::getItemExtentAt(long index, Out<Item> item, Out<Extent> extent) const
{
    Node *k = getNodeAt(index);
    item = k->item_;
    extent = k->itemExtent_;
}

template<class Item, class Extent>
void LayoutTree<Item, Extent>::getView(Extent pos0, Extent pos1, Out<long> index0, Out<long> index1, Out<Extent> itemPos0) const
{
    if (
        !root_ ||
        pos1 <= pos0 ||
        pos1 <= 0 ||
        extent() <= pos0
    ) {
        index0 = 0;
        index1 = 0;
        return;
    }

    if (index0 != None{}) find(pos0, index0, itemPos0);

    if (index1 != None{}) {
        Extent item1Pos0 = 0;
        find(pos1, index1, &item1Pos0);
        index1 += (item1Pos0 < pos1);
    }
}

template<class Item, class Extent>
bool LayoutTree<Item, Extent>::lookup(Extent pos, Out<Item> item, Out<long> index, Out<Extent> itemPos) const
{
    Node *node = find(pos, index, itemPos);
    if (node) item = node->item_;
    return node;
}

template<class Item, class Extent>
Extent LayoutTree<Item, Extent>::getPosAt(long index) const
{
    OrdinalNode *k = root_;
    Extent y = 0;
    Extent y0 = 0;
    int j0 = 0;
    while (k) {
        y = y0 + treeExtent(static_cast<Node *>(k->left_));
        int j = j0 + weight(k->left_);
        if (index < j) {
            k = k->left_;
        }
        else if (j < index) {
            y0 = y + static_cast<Node *>(k)->itemExtent_;
            j0 = j + 1;
            k = k->right_;
        }
        else // index == j
            break;
    }
    return y;
}

template<class Item, class Extent>
Item &LayoutTree<Item, Extent>::at(long index)
{
    return getNodeAt(index)->item_;
}

template<class Item, class Extent>
const Item &LayoutTree<Item, Extent>::at(long index) const
{
    return getNodeAt(index)->item_;
}

template<class Item, class Extent>
typename LayoutTree<Item, Extent>::Node *LayoutTree<Item, Extent>::find(Extent x, Out<long> index, Out<Extent> x0) const
{
    if (!root_) return nullptr;
    Node *k = static_cast<Node *>(root_);
    Extent z0 = 0;
    Extent z1 = 0;
    Extent y0 = 0;
    int j0 = 0;
    int j = 0;
    while (true) {
        z0 = y0 + (k->left_ ? static_cast<Node *>(k->left_)->treeExtent_ : Extent{});
        z1 = z0 + k->itemExtent_;
        j = j0 + weight(k->left_);
        if (x < z0) {
            if (!k->left_) break;
            k = static_cast<Node *>(k->left_);
        }
        else if (z1 <= x) {
            if (!k->right_) break;
            y0 = z1;
            j0 = j + 1;
            k = static_cast<Node *>(k->right_);
        }
        else break;
    }
    index = j;
    x0 = z0;
    return k;
}

template<class Item, class Extent>
void LayoutTree<Item, Extent>::changed(OrdinalNode *kp, OrdinalNode *kc, bool left, bool attached)
{
    Extent delta = static_cast<Node *>(kc)->itemExtent_;
    if (!attached) delta = -delta;

    for (OrdinalNode *k = kp; k; k = k->parent_)
        static_cast<Node *>(k)->treeExtent_ += delta;

    OrdinalTree::changed(kp, kc, left, attached);
}

template<class Item, class Extent>
void LayoutTree<Item, Extent>::rotated(OrdinalNode *k1, bool left)
{
    establishTreeExtent(static_cast<Node *>(k1));
    establishTreeExtent(static_cast<Node *>(k1->parent_));

    OrdinalTree::rotated(k1, left);
}

} // namespace cc::bst
