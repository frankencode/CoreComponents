/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/MultiSet>
#include <cc/Format>

namespace cc {

/** \class MultiSetValue cc/MultiSetValue
  * \ingroup container_highlevel
  * \brief %Multi-set data container
  * \see MultiSet, MultiSetValue
  */
template<class T>
class MultiSetValue {
public:
    typedef MultiSet<T> Instance;

    typedef typename Instance::Item Item; ///< item type
    typedef typename Instance::Index Index; ///< index type

    typedef typename Instance::Iterator Iterator; ///< iterator type
    typedef typename Instance::ConstIterator ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    MultiSetValue():
        instance_{new Instance}
    {}

    MultiSetValue(std::initializer_list<T> b):
        instance_{new Instance}
    {
        for (auto &x: b) *instance_ << x;
    }

    MultiSetValue(const MultiSetValue &b) = default;

    MultiSetValue(MultiSetValue &&b):
        instance_{std::move(b.instance_)}
    {}

    MultiSetValue &operator=(const MultiSetValue &b) = default;

    MultiSetValue &operator=(MultiSetValue &&b) {
        instance_ = std::move(b.instance_);
        return *this;
    }

    MultiSetValue(Instance *b):
        instance_{b}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }

    operator const Instance *() const { return instance_; }
    operator Instance *() { return Cow::get(instance_); }

    const T &operator[](Index i) const { return instance_->at(i); }

    MultiSetValue &operator<<(const T& x) { *Cow::get(instance_) << x; return *this; }
    MultiSetValue &operator>>(T& x) { if (instance_->count() > 0) *Cow::get(instance_) >> x; return *this; }

private:
    Ref<Instance> instance_;
};

template<class T>
typename MultiSetValue<T>::Index count(const MultiSetValue<T> &a) { return a->count(); }

template<class T>
typename MultiSetValue<T>::ConstIterator begin(const MultiSetValue<T> &a) { return a->begin(); }

template<class T>
typename MultiSetValue<T>::ConstIterator end(const MultiSetValue<T> &a) { return a->end(); }

template<class T>
typename MultiSetValue<T>::Iterator begin(MultiSetValue<T> &a) { return a->begin(); }

template<class T>
typename MultiSetValue<T>::Iterator end(MultiSetValue<T> &a) { return a->end(); }

template<class T>
bool operator==(const MultiSetValue<T> &a, const MultiSetValue<T> &b) { return container::compare(a, b) == 0; }

template<class T>
bool operator!=(const MultiSetValue<T> &a, const MultiSetValue<T> &b) { return container::compare(a, b) != 0; }

template<class T>
bool operator<(const MultiSetValue<T> &a, const MultiSetValue<T> &b) { return container::compare(a, b) < 0; }

template<class T>
bool operator>(const MultiSetValue<T> &a, const MultiSetValue<T> &b) { return container::compare(a, b) > 0; }

template<class T>
bool operator<=(const MultiSetValue<T> &a, const MultiSetValue<T> &b) { return container::compare(a, b) <= 0; }

template<class T>
bool operator>=(const MultiSetValue<T> &a, const MultiSetValue<T> &b) { return container::compare(a, b) >= 0; }

template<class T>
String str(const MultiSetValue<T> &a)
{
    auto n = a->count();
    if (n == 0) return "[]";
    Format f;
    f << "[ ";
    for (const auto &x: a) {
        f << x;
        if (--n > 0) f << ", ";
    }
    f << " ]";
    return f;
}

} // namespace cc
