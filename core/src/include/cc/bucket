/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cassert>
#include <cstdint>
#include <iterator>
#include <limits>
#include <type_traits>
#include <cc/BucketMap>
#include <cc/BinarySearch>

namespace cc {
namespace bucket {

static constexpr unsigned Capacity = 16;
static constexpr unsigned HalfCapacity = Capacity >> 1;
static constexpr unsigned MinFill = HalfCapacity;

typedef std::int64_t Weight;

class Internals;
class Branch;

class Node: protected BucketMap<Capacity>
{
public:
    Node(bool isBranch):
        isBranch_{isBranch}
    {}

    bool isBranch_;
    unsigned fill_ { 0 };
    unsigned slotIndex_ { 0 };
    Branch *parent_ { nullptr };
    Node *succ_ { nullptr };
    Node *pred_ { nullptr };
};

class Head {
public:
    Weight weight_;
    Node *node_;
};

class Branch: public Node
{
public:
    Branch(): Node{/*isBranch=*/true} {}

    Head &at(unsigned egress) { return slots_[mapToSlot(egress, fill_)]; }
    const Head &at(unsigned egress) const { return slots_[mapToSlot(egress, fill_)]; }

    void push(unsigned egress, const Head &head)
    {
        unsigned slotIndex = pushEntry(egress, &fill_);
        slots_[slotIndex] = head;
        head.node_->slotIndex_ = slotIndex;
        head.node_->parent_ = this;
    }

    void pop(unsigned egress)
    {
        popEntry(egress, &fill_);
    }

    Weight weightAt(unsigned egress) const { return at(egress).weight_; }

    Weight &weightOf(const Node *child) { return slots_[child->slotIndex_].weight_; }

    unsigned indexOf(const Node *child) const { return mapToBucket(child->slotIndex_, fill_); }

    // static constexpr bool IsLeaf = false;

private:
    Head slots_[Capacity];
};

template<class Item>
class Leaf: public Node
{
public:
    Leaf(): Node{/*isBranch=*/false} {}
    ~Leaf() {
        if (!std::is_trivial<Item>::value) {
            for (unsigned i = 0; i < fill_; ++i) {
                Item *p = &at(i);
                p->~Item();
            }
        }
    }

    Item &at(unsigned egress) { return slotAt(mapToSlot(egress, fill_)); }
    const Item &at(unsigned egress) const { return slotAt(mapToSlot(egress, fill_)); }

    unsigned count() const { return fill_; }

    void push(unsigned egress, const Item &item)
    {
        unsigned slotIndex = pushEntry(egress, &fill_);
        Item *p = &slotAt(slotIndex);
        if (!std::is_trivial<Item>::value) new (p) Item;
        *p = item;
    }

    void pop(unsigned egress)
    {
        unsigned slotIndex = popEntry(egress, &fill_);
        if (!std::is_trivial<Item>::value) {
            Item *p = &slotAt(slotIndex);
            p->~Item();
        }
    }

    static Weight weightAt(unsigned egress) { return 1; }

    // static constexpr bool IsLeaf = true;

private:
    Item &slotAt(unsigned slotIndex) {
        return reinterpret_cast<Item *>(data_)[slotIndex];
    }

    const Item &slotAt(unsigned slotIndex) const {
        return reinterpret_cast<const Item *>(data_)[slotIndex];
    }

    std::uint8_t data_[Capacity * sizeof(Item)];
};

class Tree
{
public:
    template<class Item>
    Item &at(Weight index) {
        unsigned egress;
        return static_cast<Leaf<Item> *>(stepDownTo(index, &egress))->at(egress);
    }

    template<class Item>
    const Item &at(Weight index) const {
        unsigned egress;
        return static_cast<const Leaf<Item> *>(stepDownTo(index, &egress))->at(egress);
    }

    Weight count() const { return root_.weight_; }

    template<class Item>
    void push(Weight index, const Item &item);

    template<class Item>
    void pushBack(const Item &item);

    template<class Item>
    void push(Node *target, unsigned egress, const Item &item)
    {
        Leaf<Item> *leaf = target ? static_cast<Leaf<Item> *>(target) : nullptr;
        pushAndTell<Item>(leaf, egress, item);
    }

    template<class Item>
    void pushAndTell(Leaf<Item> *&target, unsigned &egress, const Item &item);

    template<class Iterator>
    void pushAndStep(Iterator &iterator, const typename Iterator::value_type &item)
    {
        if (count() == 0) pushBack(item);
        else assert(bool(iterator)); // cannot insert an item using an invalid iterator
        push<typename Iterator::ValueType>(iterator.index_, item);
        iterator = Iterator{this, iterator.index_};
    }

    template<class Item>
    void pop(Weight index);

    template<class Item>
    void pop(Node *target, unsigned egress);

    template<class Iterator>
    void popAndStep(Iterator &iterator)
    {
        assert(bool(iterator)); // cannot remove an item using an invalid iterator
        pop<typename Iterator::ValueType>(iterator.node_, iterator.egress_);
        iterator = Iterator{this, iterator.index_};
    }

    template<class Item, class Other>
    void populate(const Other *other)
    {
        // TODO: improve performance
        for (const Item &x: *other)
            pushBack<Item>(x);
    }

    template<class Item>
    void deplete()
    {
        if (root_.node_) {
            Node *leaf = getMinNode();
            Branch *parent = leaf->parent_;
            while (leaf) {
                Node *succ = leaf->succ_;
                delete static_cast<Leaf<Item> *>(leaf);
                leaf = succ;
            }
            while (parent) {
                Node *branch = parent;
                parent = parent->parent_;
                while (branch) {
                    Node *succ = branch->succ_;
                    delete branch;
                    branch = succ;
                }
            }
            *this = Tree{};
        }
    }

    template<class Item, class Search = FindAny, class Pattern = Item>
    bool lookup(const Pattern &pattern, Weight *finalIndex = nullptr, Leaf<Item> **target = nullptr, unsigned *egress = nullptr) const;

    Weight idealLeafCount() const
    {
        return (height_ > 0) ? root_.node_->fill_ << ((height_ - 1) << 2) : 1;
    }

    Node *idealLeafAt(Weight idealIndex) const
    {
        Node *node = root_.node_;
        for (unsigned h = height_; h > 0; --h) {
            unsigned i = (idealIndex >> ((h - 1) << 2)) & 0xFu;
            if (node->fill_ <= i) i = node->fill_ - 1;
            node = static_cast<const Branch *>(node)->at(i).node_;
        }
        return node;
    }

    template<class Item>
    const Item &first() const
    {
        Node *firstLeaf = getMinNode();
        return static_cast<const Leaf<Item> *>(firstLeaf)->at(0);
    }

    template<class Item>
    Item &first()
    {
        Node *firstLeaf = getMinNode();
        return static_cast<Leaf<Item> *>(firstLeaf)->at(0);
    }

    template<class Item>
    const Item &last() const
    {
        return static_cast<const Leaf<Item> *>(lastLeaf_)->at(lastLeaf_->fill_ - 1);
    }

    template<class Item>
    Item &last()
    {
        return static_cast<Leaf<Item> *>(lastLeaf_)->at(lastLeaf_->fill_ - 1);
    }

    Node *getMinNode() const
    {
        Node *node = root_.node_;
        if (node) {
            while (node->isBranch_) {
                node = static_cast<const Branch *>(node)->at(0).node_;
            }
        }
        return node;
    }

    Node *getMaxNode() const
    {
        Node *node = root_.node_;
        if (node) {
            while (node->isBranch_) {
                node = static_cast<const Branch *>(node)->at(node->fill_ - 1).node_;
            }
        }
        return node;
    }

    const Head *root() const { return &root_; }

    #ifndef NDEBUG
    std::uint64_t revision() const { return revision_; }
    #endif

    Node *stepDownTo(Weight index, unsigned *egress) const;

private:
    template<class Node>
    void dissipate(Node *&node, unsigned &egress);

    template<class Node>
    void relieve(Node *node, bool recursive = false);

    template<class Node>
    void dissipateForward(Node *from, Node *to);

    template<class Node>
    void dissipateBackward(Node *to, Node *from);

    template<class Node>
    void distributeForward(Node *from, Node *to);

    void joinSucc(Node *node, Node *newNode);

    template<class Node>
    void collapseSucc(Node *node, Node *succ);

    void unlink(Node *node);

    static Weight &weight(Node *child) {
        assert(child->parent_);
        return child->parent_->weightOf(child);
    }

    static void shiftWeights(Node *from, Node *to, Weight delta);
    void updateWeights(Node *node, Weight delta);

    void reduce();

    static Weight nodeOffset(const Node *node)
    {
        Weight offset = 0;
        while (node && node->parent_) {
            const Branch *parent = node->parent_;
            unsigned n = parent->indexOf(node);
            for (unsigned i = 0; i < n; ++i) {
                offset += parent->at(i).weight_;
            }
            node = parent;
        }
        return offset;
    }

    Head root_ { .weight_ = 0, .node_ = nullptr };
    Node *lastLeaf_ { nullptr };
    // Node *firstLeaf_ { nullptr };
    bool isDense_ { true };
    unsigned height_ { 0 };
    // std::uint64_t leafCount_ { 0 };
    #ifndef NDEBUG
    std::uint64_t revision_ { 0 };
    #endif
};

template<class Item>
void Tree::push(Weight index, const Item &item)
{
    unsigned egress = 0;
    Node *node = stepDownTo(index, &egress);
    push(node, egress, item);
}

template<class Item>
void Tree::pushBack(const Item &item)
{
    push(lastLeaf_, lastLeaf_ ? lastLeaf_->fill_ : 0, item);
}

template<class Item>
void Tree::pushAndTell(Leaf<Item> *&target, unsigned &egress, const Item &item)
{
    if (target) {
        dissipate(target, egress);
        target->push(egress, item);
        updateWeights(target, 1);
    }
    else {
        target = new Leaf<Item>;
        egress = 0;
        target->push(egress, item);
        root_.weight_ = 1;
        root_.node_ = target;
        lastLeaf_ = target;
        // firstLeaf_ = leaf;
        // leafCount_ = 1;
    }
    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class Item>
void Tree::pop(Weight index)
{
    unsigned egress = 0;
    Leaf<Item> *target = static_cast<Leaf<Item> *>(stepDownTo(index, &egress));
    pop<Item>(target, egress);
}

template<class Item>
void Tree::pop(Node *target, unsigned egress)
{
    if (root_.weight_ > 1) {
        Leaf<Item> *leaf = static_cast<Leaf<Item> *>(target);
        leaf->pop(egress);
        updateWeights(leaf, -1);
        if (leaf->succ_) isDense_ = false;
        relieve(leaf);
        reduce();
    }
    else {
        delete static_cast<Leaf<Item> *>(root_.node_);
        root_.node_ = nullptr;
        root_.weight_ = 0;
        lastLeaf_ = nullptr;
        // leafCount_ = 0;
        isDense_ = true;
    }

    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class Node>
void Tree::dissipate(Node *&node, unsigned &egress)
{
    if (node->fill_ == Capacity)
    {
        Node *succ = static_cast<Node *>(node->succ_);

        if (!succ || succ->fill_ >= HalfCapacity) {
            succ = new Node;
            // if (Node::IsLeaf) ++leafCount_;
            joinSucc(node, succ);
        }

        if (egress < Capacity)
        {
            distributeForward(node, succ);
            if (egress > HalfCapacity) {
                node = succ;
                egress -= HalfCapacity;
            }
        }
        else {
            node = succ;
            egress = 0;
        }
    }
}

template<class Node>
void Tree::relieve(Node *node, bool recursive)
{
    Node *succ = static_cast<Node *>(node->succ_);
    if (node->fill_ < MinFill) {
        if (succ) {
            if (succ->fill_ > MinFill)
                dissipateBackward(node, succ);
            else
                collapseSucc(node, succ);
        }
        else if (node->fill_ == 0) {
            unlink(node);
        }
    }
}

template<class Node>
void Tree::dissipateForward(Node *from, Node *to)
{
    assert(from->fill_ > 0);
    assert(to->fill_ < Capacity);

    Weight delta = from->weightAt(from->fill_ - 1);
    to->push(0, from->at(from->fill_ - 1));
    from->pop(from->fill_ - 1);
    shiftWeights(from, to, delta);
}

template<class Node>
void Tree::dissipateBackward(Node *to, Node *from)
{
    assert(from->fill_ > 0);
    assert(to->fill_ < Capacity);

    Weight delta = from->weightAt(0);
    to->push(to->fill_, from->at(0));
    from->pop(0);
    shiftWeights(from, to, delta);
}

template<class Node>
void Tree::distributeForward(Node *from, Node *to)
{
    assert(from->fill_ == Capacity);
    assert(to->fill_ <= HalfCapacity);

    Weight delta = 0;
    for (unsigned i = 0; i < HalfCapacity; ++i) {
        delta += from->weightAt(HalfCapacity);
        to->push(i, from->at(HalfCapacity));
        from->pop(HalfCapacity);
    }

    shiftWeights(from, to, delta);

    isDense_ = false;
}

template<class Node>
void Tree::collapseSucc(Node *node, Node *succ)
{
    assert(node->fill_ + succ->fill_ <= Capacity);

    for (unsigned i = 0; i < succ->fill_; ++i) {
        node->push(node->fill_, succ->at(i));
    }
    shiftWeights(succ, node, weight(succ));
    unlink(succ);
}

template<class Item>
class SearchNode
{
public:
    SearchNode(const Leaf<Item> *leaf):
        leaf_{leaf}
    {}

    const Leaf<Item> *leaf_;
};

template<class Item, class Pattern>
inline bool operator<(const SearchNode<Item> &searchNode, const Pattern &pattern)
{
    const Leaf<Item> *leaf = searchNode.leaf_;
    return leaf->at(leaf->fill_ - 1) < pattern;
}

template<class Pattern, class Item>
inline bool operator<(const Pattern &pattern, const SearchNode<Item> &searchNode)
{
    const Leaf<Item> *leaf = searchNode.leaf_;
    return pattern < leaf->at(0);
}

template<class Item>
class SearchShim
{
public:
    SearchShim(const Tree *tree):
        tree_{tree},
        idealLeafCount_{tree->idealLeafCount()}
    {}

    SearchNode<Item> at(Weight index) const
    {
        return static_cast<const Leaf<Item> *>(tree_->idealLeafAt(index));
    }

    Weight count() const { return idealLeafCount_; }

private:
    const Tree *tree_;
    Weight idealLeafCount_;
};

template<class Item, class Search, class Pattern>
bool Tree::lookup(const Pattern &pattern, Weight *finalIndex, Leaf<Item> **target, unsigned *egress) const
{
    bool found = false;
    Node *root = root_.node_;
    if (root) {
        if (!root->isBranch_) {
            Leaf<Item> *leaf = static_cast<Leaf<Item> *>(root);
            Weight i = 0;
            found = Search::find(leaf, pattern, &i);
            if (finalIndex) *finalIndex = i;
            if (target) *target = leaf;
            if (egress) *egress = i;
        }
        else {
            Leaf<Item> *leaf = static_cast<Leaf<Item> *>(lastLeaf_);
            if (leaf->at(leaf->fill_ - 1) < pattern) {
                if (finalIndex) *finalIndex = root_.weight_;
                if (target) *target = leaf;
                if (egress) *egress = leaf->fill_;
            }
            else {
                SearchShim<Item> shim{this};
                Weight i = 0, j = 0;
                bool lookInside = Search::find(&shim, pattern, &j);
                leaf = static_cast<Leaf<Item> *>(idealLeafAt(j));
                unsigned k = 0;
                if (lookInside) {
                    found = Search::find(leaf, pattern, &k);
                    i = k;
                }
                i += nodeOffset(leaf);
                if (finalIndex) *finalIndex = i;
                if (target) *target = leaf;
                if (egress) *egress = k;
            }
        }
    }
    else if (finalIndex) {
        *finalIndex = 0;
    }
    return found;
}

/** \todo make sure some of the constructors are private
  */
template<class Item, class Tree>
class TreeIterator:
    public std::iterator<
        /*iterator_category*/ std::bidirectional_iterator_tag,
        /*value_type*/        Item,
        /*difference_type*/   Weight,
        /*pointer*/           Item *,
        /*reference*/         Item &
    >
{
public:
    typedef Item ValueType;
    typedef Item value_type;

    TreeIterator():
        node_{nullptr},
        egress_{0}
    {}

    explicit TreeIterator(const Tree *tree):
        tree_{tree},
        #ifndef NDEBUG
        revision_{tree_->revision()},
        #endif
        index_{0},
        node_{static_cast<Leaf<Item> *>(tree->getMinNode())},
        egress_{0}
    {}

    TreeIterator(const Tree *tree, Weight index):
        tree_{tree},
        #ifndef NDEBUG
        revision_{tree_->revision()},
        #endif
        index_{index},
        node_{nullptr},
        egress_{0}
    {
        if (0 <= index && index < tree->count())
            node_ = static_cast< Leaf<Item> *>(tree->stepDownTo(index, &egress_));
    }

    TreeIterator(const Tree *tree, Weight index, Node *node, unsigned egress):
        tree_{tree},
        #ifndef NDEBUG
        revision_{tree_->revision()},
        #endif
        index_{index},
        node_{nullptr},
        egress_{0}
    {
        if (0 <= index && index < tree->count()) {
            node_ = static_cast< Leaf<Item> *>(node);
            egress_ = egress;
        }
    }

    Item &operator*() const
    {
        assert(node_); // cannot dereference an exhausted iterator
        return node_->at(egress_);
    }

    Item &operator->() const
    {
        assert(node_); // cannot dereference an exhausted iterator
        return node_->at(egress_);
    }

    TreeIterator &operator++()
    {
        assert(node_); // cannot increment an exhausted iterator
        assert(revision_ == tree_->revision()); // cannot modify container while iterating it

        #if 0
        if (!node_) {
            assert(index_ == -1); // cannot decrement an exhausted iterator
            return *this = TreeIterator{tree_, 0};
        }
        #endif

        ++index_;
        ++egress_;
        if (egress_ == node_->fill_) {
            egress_ = 0;
            node_ = static_cast<Leaf<Item> *>(node_->succ_);
        }

        return *this;
    }

    TreeIterator &operator--()
    {
        assert(revision_ == tree_->revision()); // cannot modify container while iterating it

        if (!node_) {
            assert(index_ == tree_->count()); // cannot decrement an exhausted iterator
            return *this = TreeIterator{tree_, tree_->count() - 1};
        }

        --index_;
        if (egress_ == 0) {
            node_ = static_cast<Leaf<Item> *>(node_->pred_);
            egress_ = node_ ? node_->fill_ - 1 : 0;
        }
        else
            --egress_;

        return *this;
    }

    TreeIterator operator++(int)
    {
        TreeIterator it = *this;
        ++*this;
        return it;
    }

    TreeIterator operator--(int)
    {
        TreeIterator it = *this;
        --*this;
        return it;
    }

    TreeIterator operator+(int delta) { return TreeIterator{tree_, index_ + delta}; }
    TreeIterator operator-(int delta) { return TreeIterator{tree_, index_ - delta}; }

    Weight operator-(const TreeIterator &b) const { return index_ - b.index_; }

    Weight operator+() const { return index_; }

    bool operator==(const TreeIterator &b) const { return egress_ == b.egress_ && node_ == b.node_; }
    bool operator!=(const TreeIterator &b) const { return egress_ != b.egress_ || node_ != b.node_; }

    bool operator<(const TreeIterator &b) const { return index_ < b.index_; }
    bool operator>(const TreeIterator &b) const { return index_ > b.index_; }
    bool operator<=(const TreeIterator &b) const { return index_ <= b.index_; }
    bool operator>=(const TreeIterator &b) const { return index_ >= b.index_; }

    explicit operator bool() const { return node_; }

private:
    friend class bucket::Tree;

    const Tree *tree_;
    #ifndef NDEBUG
    std::uint64_t revision_;
    #endif
    Weight index_;
    Leaf<Item> *node_;
    unsigned egress_;
};

template<class T>
Weight indexOf(const T &x) { return +x; }

template<class Item>
using ConstIterator = TreeIterator<const Item, const Tree>;

template<class Item>
using Iterator = TreeIterator<Item, Tree>;

}} // namespace cc::bucket
