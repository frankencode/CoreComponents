/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <assert.h>
#include <iterator>
#include <limits>
#include <cc/BucketMap>
#include <cc/binarySearch>
#include <cc/debug>

namespace cc {
namespace bucket {

static constexpr unsigned Capacity = 16;
static constexpr unsigned HalfCapacity = Capacity >> 1;
static constexpr unsigned MinFill = HalfCapacity;

typedef int64_t Weight;

class Branch;
class Tree;
class Internals;

class Node: protected BucketMap<Capacity>
{
public:
    bool isBranch() const { return isBranch_; }
    unsigned fill() const { return fill_; }
    Node *succ() const { return succ_; }
    Node *pred() const { return pred_; }

protected:
    friend class Branch;
    friend class Tree;
    friend class Internals;

    Node(bool isBranch):
        isBranch_{isBranch}
    {}

    bool isBranch_;
    unsigned fill_ { 0 };
    unsigned slotIndex_ { 0 };
    Branch *parent_ { nullptr };
    Node *succ_ { nullptr };
    Node *pred_ { nullptr };
};

class Head {
public:
    Weight weight_;
    Node *node_;
};

class Branch: public Node
{
public:
    Branch(): Node{/*isBranch=*/true} {}

    Head &at(unsigned egress) { return slots_[mapToSlot(egress, fill_)]; }
    const Head &at(unsigned egress) const { return slots_[mapToSlot(egress, fill_)]; }

    void push(unsigned egress, const Head &head)
    {
        unsigned slotIndex = pushEntry(egress, &fill_);
        slots_[slotIndex] = head;
        head.node_->slotIndex_ = slotIndex;
        head.node_->parent_ = this;
    }

    void pop(unsigned egress) { popEntry(egress, &fill_); }

    Weight weightAt(unsigned egress) const { return at(egress).weight_; }

    Weight &weightOf(const Node *child) { return slots_[child->slotIndex_].weight_; }

    unsigned indexOf(const Node *child) const { return mapToBucket(child->slotIndex_, fill_); }

    static constexpr bool IsLeaf = false;

    Weight distributeForwardTo(Branch *other)
    {
        Weight delta = 0;
        for (unsigned i = 0; i < HalfCapacity; ++i) {
            delta += weightAt(HalfCapacity);
            other->push(i, at(HalfCapacity));
            pop(HalfCapacity);
        }
        return delta;
    }

private:
    Head slots_[Capacity];
};

template<class Item>
class Leaf: public Node
{
public:
    Leaf(): Node{/*isBranch=*/false} {}

    Item &at(unsigned egress) { return slots_[mapToSlot(egress, fill_)]; }
    const Item &at(unsigned egress) const { return slots_[mapToSlot(egress, fill_)]; }
    unsigned count() const { return fill_; }

    void push(unsigned egress, const Item &item) { slots_[pushEntry(egress, &fill_)] = item; }

    void pop(unsigned egress) { popEntry(egress, &fill_); }

    int64_t weightAt(unsigned egress) const { return 1; }

    static constexpr bool IsLeaf = true;

    Weight distributeForwardTo(Leaf *other)
    {
        Weight delta = 0;
        for (unsigned i = 0; i < HalfCapacity; ++i) {
            delta += weightAt(HalfCapacity);
            other->push(i, at(HalfCapacity));
            pop(HalfCapacity);
        }
        return delta;
    }

private:
    Item slots_[Capacity];
};

class Tree
{
public:
    template<class Item>
    Item &at(Weight index) {
        unsigned egress;
        return static_cast<Leaf<Item> *>(stepDownTo(index, &egress))->at(egress);
    }

    template<class Item>
    const Item &at(Weight index) const {
        unsigned egress;
        return static_cast<const Leaf<Item> *>(stepDownTo(index, &egress))->at(egress);
    }

    Weight count() const { return root_.weight_; }

    template<class Item>
    void push(Weight index, const Item &item);

    template<class Item>
    void push(Node *node, unsigned egress, const Item &item);

    template<class Item>
    void pop(Weight index);

    template<class Item>
    void deplete()
    {
        if (root_.node_) deplete<Item>(root_.node_);
        #if 0
        if (lastLeaf_) {
            Node *leaf = lastLeaf_;
            Branch *parent = leaf->parent_;
            while (leaf) {
                Node *pred = leaf->pred_;
                delete static_cast<Leaf<Item> *>(leaf);
                leaf = pred;
            }
            while (parent) {
                Node *branch = parent;
                parent = parent->parent_;
                while (branch) {
                    Node *pred = branch->pred_;
                    delete branch;
                    branch = pred;
                }
            }
        }
        #endif
        *this = Tree{};
    }

    template<class Item, class Pattern>
    bool lookup(const Pattern &pattern, Weight *finalIndex = nullptr, Leaf<Item> **target = nullptr, unsigned *egress = nullptr) const;

    Weight idealLeafCount() const
    {
        return (height_ > 0) ? root_.node_->fill_ << ((height_ - 1) << 2) : 1;
    }

    Node *idealLeafAt(Weight idealIndex) const
    {
        Node *node = root_.node_;
        for (unsigned h = height_; h > 0; --h) {
            unsigned i = (idealIndex >> ((h - 1) << 2)) & 0xFu;
            if (node->fill_ <= i) i = node->fill_ - 1;
            node = static_cast<const Branch *>(node)->at(i).node_;
        }
        return node;
    }

    Node *getMinNode() const
    {
        Node *node = root_.node_;
        if (node) {
            while (node->isBranch_) {
                node = static_cast<const Branch *>(node)->at(0).node_;
            }
        }
        return node;
    }

    const Head *root() const { return &root_; }

    #ifndef NDEBUG
    uint64_t revision() const { return revision_; }
    #endif

private:
    Node *stepDownTo(Weight index, unsigned *egress) const;

    template<class Item>
    void deplete(Node *node);

    template<class Node>
    void dissipate(Node *&node, unsigned &egress);

    template<class Node>
    void relieve(Node *node, bool recursive = false);

    template<class Node>
    void dissipateForward(Node *from, Node *to);

    template<class Node>
    void dissipateBackward(Node *to, Node *from);

    template<class Node>
    void distributeForward(Node *from, Node *to);

    void joinSucc(Node *node, Node *newNode);

    template<class Node>
    void collapseSucc(Node *node, Node *succ);

    void unlink(Node *node);

    static Weight &weight(Node *child) {
        assert(child->parent_);
        return child->parent_->weightOf(child);
    }

    static void shiftWeights(Node *from, Node *to, int64_t delta);
    void updateWeights(Node *node, int64_t delta);

    void reduce();

    static Weight nodeOffset(const Node *node)
    {
        Weight offset = 0;
        while (node && node->parent_) {
            const Branch *parent = node->parent_;
            unsigned n = parent->indexOf(node);
            for (unsigned i = 0; i < n; ++i) {
                offset += parent->at(i).weight_;
            }
            node = parent;
        }
        return offset;
    }

    Head root_ { .weight_ = 0, .node_ = nullptr };
    Node *lastLeaf_ { nullptr };
    bool isDense_ { true };
    unsigned height_ { 0 };
    // uint64_t leafCount_ { 0 };
    #ifndef NDEBUG
    uint64_t revision_ { 0 };
    #endif
};

template<class Item>
void Tree::push(Weight index, const Item &item)
{
    Node *node = root_.node_;
    if (node) {
        if (!node->isBranch_ && node->fill_ < Capacity) {
            static_cast<Leaf<Item> *>(node)->push(index, item);
            ++root_.weight_;
        }
        else {
            unsigned egress = 0;
            node = stepDownTo(index, &egress);
            push(node, egress, item);
        }
    }
    else {
        Leaf<Item> *leaf = new Leaf<Item>;
        leaf->push(0, item);
        root_.weight_ = 1;
        root_.node_ = leaf;
        lastLeaf_ = leaf;
        // leafCount_ = 1;
    }
    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class Item>
void Tree::push(Node *node, unsigned egress, const Item &item)
{
    Leaf<Item> *leaf = static_cast<Leaf<Item> *>(node);
    dissipate(leaf, egress);
    leaf->push(egress, item);
    updateWeights(leaf, 1);
}

template<class Item>
void Tree::pop(Weight index)
{
    if (root_.weight_ > 1) {
        unsigned egress;
        Leaf<Item> *leaf = static_cast<Leaf<Item> *>(stepDownTo(index, &egress));
        leaf->pop(egress);
        updateWeights(leaf, -1);
        if (leaf != lastLeaf_) isDense_ = false;
        relieve(leaf);
        reduce();
    }
    else {
        delete static_cast<Leaf<Item> *>(root_.node_);
        root_.node_ = nullptr;
        root_.weight_ = 0;
        lastLeaf_ = nullptr;
        // leafCount_ = 0;
        isDense_ = true;
    }
}

template<class Item>
void Tree::deplete(Node *node)
{
    if (node->isBranch_) {
        Branch *branch = static_cast<Branch *>(node);
        unsigned i = branch->fill_;
        while (i > 0) {
            --i;
            deplete<Item>(branch->at(i).node_);
        }
        delete branch;
    }
    else {
        delete static_cast<Leaf<Item> *>(node);
    }
}

template<class Node>
void Tree::dissipate(Node *&node, unsigned &egress)
{
    if (node->fill_ == Capacity)
    {
        Node *succ = static_cast<Node *>(node->succ_);

        if (!succ || succ->fill_ >= HalfCapacity) {
            succ = new Node;
            // if (Node::IsLeaf) ++leafCount_;
            joinSucc(node, succ);
        }

        if (egress < Capacity)
        {
            distributeForward(node, succ);
            if (egress > HalfCapacity) {
                node = succ;
                egress -= HalfCapacity;
            }
        }
        else {
            node = succ;
            egress = 0;
        }
    }
}

template<class Node>
void Tree::relieve(Node *node, bool recursive)
{
    Node *succ = static_cast<Node *>(node->succ_);
    if (node->fill_ < MinFill) {
        if (succ) {
            if (succ->fill_ > MinFill)
                dissipateBackward(node, succ);
            else
                collapseSucc(node, succ);
        }
        else if (node->fill_ == 0) {
            unlink(node);
        }
    }
}

template<class Node>
void Tree::dissipateForward(Node *from, Node *to)
{
    assert(from->fill_ > 0);
    assert(to->fill_ < Capacity);

    Weight delta = from->weightAt(from->fill_ - 1);
    to->push(0, from->at(from->fill_ - 1));
    from->pop(from->fill_ - 1);
    shiftWeights(from, to, delta);
}

template<class Node>
void Tree::dissipateBackward(Node *to, Node *from)
{
    assert(from->fill_ > 0);
    assert(to->fill_ < Capacity);

    Weight delta = from->weightAt(0);
    to->push(to->fill_, from->at(0));
    from->pop(0);
    shiftWeights(from, to, delta);
}

template<class Node>
void Tree::distributeForward(Node *from, Node *to)
{
    assert(from->fill_ == Capacity);
    assert(to->fill_ <= HalfCapacity);

    Weight delta = from->distributeForwardTo(to);
    shiftWeights(from, to, delta);

    isDense_ = false;
}

template<class Node>
void Tree::collapseSucc(Node *node, Node *succ)
{
    assert(node->fill_ + succ->fill_ <= Capacity);

    for (unsigned i = 0; i < succ->fill_; ++i) {
        node->push(node->fill_, succ->at(i));
    }
    shiftWeights(succ, node, weight(succ));
    unlink(succ);
}

template<class Item>
class SearchNode
{
public:
    SearchNode(const Leaf<Item> *leaf):
        leaf_{leaf}
    {}

    const Leaf<Item> *leaf_;
};

template<class Item, class Pattern>
inline bool operator<(const SearchNode<Item> &searchNode, const Pattern &pattern)
{
    const Leaf<Item> *leaf = searchNode.leaf_;
    return leaf->at(leaf->fill() - 1) < pattern;
}

template<class Pattern, class Item>
inline bool operator<(const Pattern &pattern, const SearchNode<Item> &searchNode)
{
    const Leaf<Item> *leaf = searchNode.leaf_;
    return pattern < leaf->at(0);
}

template<class Item>
class SearchShim
{
public:
    SearchShim(const Tree *tree):
        tree_{tree},
        idealLeafCount_{tree->idealLeafCount()}
    {}

    SearchNode<Item> at(Weight index) const
    {
        return static_cast<const Leaf<Item> *>(tree_->idealLeafAt(index));
    }

    Weight count() const { return idealLeafCount_; }

private:
    const Tree *tree_;
    Weight idealLeafCount_;
};

template<class Item, class Pattern>
bool Tree::lookup(const Pattern &pattern, Weight *finalIndex, Leaf<Item> **target, unsigned *egress) const
{
    bool found = false;
    Node *root = root_.node_;
    if (root) {
        if (!root->isBranch()) {
            Leaf<Item> *leaf = static_cast<Leaf<Item> *>(root);
            Weight i = 0;
            found = binarySearch(leaf, pattern, &i);
            if (finalIndex) *finalIndex = i;
            if (target) *target = leaf;
            if (egress) *egress = i;
        }
        else {
            Leaf<Item> *leaf = static_cast<Leaf<Item> *>(lastLeaf_);
            if (leaf->at(leaf->fill_ - 1) < pattern) {
                if (finalIndex) *finalIndex = root_.weight_;
                if (target) *target = leaf;
                if (egress) *egress = Capacity - leaf->fill_;
            }
            else {
                SearchShim<Item> shim{this};
                Weight i = 0, j = 0;
                bool lookInside = binarySearch(&shim, pattern, &j);
                leaf = static_cast<Leaf<Item> *>(idealLeafAt(j));
                unsigned k = 0;
                if (lookInside) {
                    found = binarySearch(leaf, pattern, &k);
                    i = k;
                }
                i += nodeOffset(leaf);
                if (finalIndex) *finalIndex = i;
                if (target) *target = leaf;
                if (egress) *egress = k;
            }
        }
    }
    else {
        if (finalIndex) *finalIndex = 0;
        if (target) *target = nullptr;
        if (egress) *egress = 0;
    }
    return found;
}

template<class Item, class Tree>
class TreeIterator:
    public std::iterator<
        /*iterator_category*/ std::forward_iterator_tag,
        /*value_type*/        Item,
        /*difference_type*/   Weight,
        /*pointer*/           void,
        /*reference*/         Item
    >
{
public:
    TreeIterator():
        node_{nullptr},
        egress_{0}
    {}

    TreeIterator(Tree *tree, Weight index):
        #ifndef NDEBUG
        tree_{tree},
        revision_{tree_->revision()},
        #endif
        node_{static_cast<Leaf<Item> *>(tree->getMinNode())},
        egress_{0}
    {}

    Item &operator*() {
        assert(node_); // cannot deference an exhausted iterator
        return static_cast<Leaf<Item> *>(node_)->at(egress_);
    }

    Item *operator->() const { return &**this; }

    TreeIterator &operator++()
    {
        assert(node_); // cannot increment an exhausted iterator
        assert(revision_ == tree_->revision()); // cannot modify container while iterating it

        ++egress_;
        if (egress_ == node_->fill()) {
            egress_ = 0;
            node_ = static_cast<Leaf<Item> *>(node_->succ());
        }
        return *this;
    }

    bool operator==(const TreeIterator &b) const { return egress_ == b.egress_ && node_ == b.node_; }
    bool operator!=(const TreeIterator &b) const { return egress_ != b.egress_ || node_ != b.node_; }

private:
    #ifndef NDEBUG
    const Tree *tree_;
    uint64_t revision_;
    #endif
    Leaf<Item> *node_;
    unsigned egress_;
};

template<class Item>
using ConstIterator = TreeIterator<const Item, const Tree>;

template<class Item>
using Iterator = TreeIterator<Item, Tree>;

}} // namespace cc::bucket
