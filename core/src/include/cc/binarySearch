/*
 * Copyright (C) 2018-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <assert.h>
#include <cc/debug>

namespace cc {

/** \brief Binary search in a sorted list of items
  * \param items the sorted list of items
  * \param pattern pattern to search for
  * \param finalIndex return the final index of the search
  * \return true if a matching item was found, false otherwise
  */
template<
    class SortedItems,
    class Pattern = typename SortedItems::Item,
    class Index = typename SortedItems::Index
>
bool binarySearch(
    const SortedItems *items,
    const Pattern &pattern,
    Index *finalIndex
) {
    Index l = 0;
    Index r = items->count() - 1;
    while (l <= r) {
        Index m = (l + r) >> 1;
        auto candidate = items->at(m);
        if (candidate < pattern)
            l = m + 1;
        else if (pattern < candidate)
            r = m - 1;
        else {
            *finalIndex = m;
            return true;
        }
    }
    *finalIndex = l;
    return false;

    #if 0 // find left most or number of elements smaller than pattern (rank)
    Index l = 0;
    Index r = items->count();
    while (l < r) {
        Index m = (l + r) >> 1;
        if (items->at(m) < pattern) l = m + 1;
        else r = m;
    }

    *finalIndex = l;
    if (l < items->count()) {
        auto candidate = items->at(l);
        return !(pattern < candidate);
    }
    return false;
    #endif
}

} // namespace cc
