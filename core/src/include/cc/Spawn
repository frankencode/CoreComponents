/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <sys/types.h> // pid_t
#include <spawn.h>
#include <cc/files>
#include <cc/exceptions>
#include <cc/SignalSet>
#include <cc/Process>
#include <cc/IoChannel>

namespace cc {

/** \class Spawn cc/Spawn
  * \ingroup concurrency
  * \brief Spawned child process
  */
class Spawn: public Object
{
public:
    /** \brief Child process staging helper
      */
    class Staging: public Object
    {
    public:
        /** \brief Set command line arguments
          * \param args Argument list, first entry is the executable name
          * \return pointer to this object
          */
        Staging *setArgs(const StringList *args);

        /** \brief Set environment map
          * \param envMap The environment map to use for the new child process (or zero pointer to inherit the parents environment map)
          * \return pointer to this object
          */
        Staging *setEnvMap(const EnvMap *envMap);

        /** \brief Set the process group
          * \param groupId Group ID of the process group to join or 0 to make the new process lead a new group
          * \return pointer to this object
          */
        Staging *setProcessGroup(pid_t groupId = 0);

        /** \brief Set the signal mask
          * \param mask Initial signal mask for the new child process
          * \return pointer to this object
          */
        Staging *setSignalMask(const SignalSet *mask);

        /** \brief Reset signal handling strategy to the default for specific signals
          * \param set Set of signals to reset to default signal handling behavior
          * \return pointer to this object
          */
        Staging *setSignalDefault(const SignalSet *set);

        /** \brief Set standard input channel
          * \param channel IoChannel to use for standard input
          * \return pointer to this object
          * \see InputPipe, SocketPair
          */
        Staging *setInputChannel(IoChannel *channel);

        /** \brief Set standard output channel
          * \param channel IoChannel to use for standard output
          * \return pointer to this object
          * \see OutputPipe, SocketPair
          */
        Staging *setOutputChannel(IoChannel *channel);

        /** \brief Set standard error channel
          * \param channel IoChannel to use for standard error
          * \return pointer to this object
          * \see OutputPipe, SocketPair
          */
        Staging *setErrorChannel(IoChannel *channel);

        /** \brief Set standard input file
          * \param path File path to the standard input file
          * \return pointer to this object
          */
        Staging *setInputFile(const String &path);

        /** \brief Set standard output file
          * \param path File path to the standard output file
          * \return pointer to this object
          */
        Staging *setOutputFile(const String &path);

        /** \brief Set standard error file
          * \param path File path to the standard error file
          * \return pointer to this object
          */
        Staging *setErrorFile(const String &path);

        /** \brief Add file open action
          * \param fd File descriptor to open to
          * \param path File path to the file to open
          * \param openMode File open flags
          * \param fileMode File permissions for new file
          * \return pointer to this object
          */
        Staging *addFileOpenAction(int fd, const String &path, OpenMode openMode = OpenMode::ReadOnly, FileMode fileMode = FileMode::Default);

        /** \brief Spawn new child process
          * \return new object instance
          */
        Ref<Spawn> start() const;

    private:
        friend class Spawn;

        Staging(const String &command);
        ~Staging();

        void enableSpawnFlag(short flag);

        String command_;
        String execPath_;
        Ref<const StringList> args_;
        Ref<const EnvMap> envMap_;

        int spawnFlags_ { 0 };
        posix_spawnattr_t spawnAttributes_;
        posix_spawn_file_actions_t fileActions_;

        Ref<IoChannel> inputChannel_;
        Ref<IoChannel> outputChannel_;
        Ref<IoChannel> errorChannel_;
    };

    /** \brief Create a new parameter stage
      * \param command Executable path plus command line arguments
      * \return new object instance
      */
    static Ref<Staging> stage(const String &command = String{});

    /// Process ID of child process
    pid_t pid() const;

    /** \brief Send signal to the child process
      * \param signal Signal number
      */
    void kill(int signal = SIGTERM);

    /** \brief Kill the entire child process group
      * \param signal Signal number
      */
    void killGroup(int signal = SIGTERM);

    /** \brief Wait for child process termination
      * \return exit status of child process
      * \exception Signalled child process terminated due to receiving a signal
      */
    int wait();

private:
    friend class Staging;
    static Ref<Spawn> bootstrap(const Staging *staging);
    Spawn(pid_t pid);
    pid_t pid_;
};

} // namespace cc
