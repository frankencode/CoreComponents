/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ByteSource>

namespace cc {

/** \class Utf16Source cc/Utf16Source
  * \ingroup unicode
  * \brief UTF-16 decoding data source
  *
  * A Byte Order Mark (BOM) at the start of the stream automatically sets
  * endianess. The decoder is designed to be as strict as possible. It checks
  * if the input streams delivers full 16-bit words and it requires a high
  * surrogate to be followed by a low surrogate.
  */
class Utf16Source
{
public:
    /** Create a new UTF-16 decoding data source
      * \param stream Underlying data stream
      * \param endian Byte order of the 16-bit words transmitted
      */
    Utf16Source(const Stream &stream, ByteOrder endian = ByteOrder::BigEndian):
        byteSource_{stream},
        endian_{endian}
    {}

    /** Create a new UTF-16 decoding data source
      * \param stream Underlying data stream
      * \param buffer Input buffer
      * \param endian Byte order of the 16-bit words transmitted
      */
    Utf16Source(const Stream &stream, const Bytes &buffer, ByteOrder endian = ByteOrder::BigEndian):
        byteSource_{stream, buffer},
        endian_{endian}
    {}

    /** Create a new UTF-16 decoding data source
      * \param buffer Input buffer
      * \param endian Byte order of the 16-bit words transmitted
      */
    Utf16Source(const Bytes &buffer, ByteOrder endian = ByteOrder::BigEndian):
        byteSource_{buffer},
        endian_{endian}
    {}

    /** Read the next %Unicode character
      * \param ch Returns the %Unicode character read if any
      * \return True if not end of information, false otherwise
      */
    bool read(Out<char32_t> ch);

private:
    class DecodingError: public UnicodeError {
    public:
        String message() const override;
    };

    ByteSource byteSource_;
    ByteOrder endian_;
    bool firstTime_ { true };
};

} // namespace cc
