/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ByteSource>

namespace cc {

/** \class Utf16Source cc/Utf16Source
  * \ingroup unicode
  * \brief %Unicode UTF-16 decoding data source
  *
  * A Byte-Order-Mark (BOM) at the start of the stream automatically sets
  * endianess. The decoder is designed to be as strict as possible. It checks
  * if the input streams delivers full 16-bit words and it requires a high
  * surrogate to be followed by a low surrogate.
  */
class Utf16Source
{
public:
    class Instance
    {
    public:
        /** Read the next %Unicode character
          * \param ch returns the %Unicode character read if any
          * \return true if not end of information, false otherwise
          */
        bool read(uchar_t *ch);

    private:
        friend class Utf16Source;

        class DecodingError: public UnicodeError {
        public:
            String message() const override;
        };

        Instance(const Stream &stream, CharArray *buffer, ByteOrder endian):
            byteSource_{stream, buffer, endian},
            firstTime_{true}
        {}

        Instance(const CharArray *buffer, ByteOrder endian):
            byteSource_{buffer, endian},
            firstTime_{true}
        {}

        ByteSource byteSource_;
        bool firstTime_;
    };

    /** Open a new UTF-16 decoding data source
      * \param stream underlying data stream
      * \param buffer input buffer (optional)
      * \param endian endianess of the 16 bit words transmitted
      */
    Utf16Source(const Stream &stream, CharArray *buffer = nullptr, ByteOrder endian = ByteOrder::BigEndian):
        instance_{stream, buffer, endian}
    {}

    /** Open a new UTF-16 decoding data source
      * \param buffer input buffer
      * \param endian endianess of the 16 bit words transmitted
      */
    Utf16Source(const CharArray *buffer, ByteOrder endian = ByteOrder::BigEndian):
        instance_{buffer, endian}
    {}

    Instance *operator->() { return &instance_; }

private:
    Instance instance_;
};

} // namespace cc
