/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ByteSource>

namespace cc {

/** \class Utf16Source cc/Utf16Source
  * \ingroup unicode
  * \brief %Unicode UTF-16 decoding data source
  *
  * A Byte-Order-Mark (BOM) at the start of the stream automatically sets
  * endianess. The decoder is designed to be as strict as possible. It checks
  * if the input streams delivers full 16-bit words and it requires a high
  * surrogate to be followed by a low surrogate.
  */
class Utf16Source: public Object
{
public:
    /** Open a new UTF-16 decoding data source
      * \param stream underlying data stream
      * \param buffer input buffer (optional)
      * \param endian endianess of the 16 bit words transmitted
      * \return new object instance
      */
    static Ref<Utf16Source> open(Stream *stream, CharArray *buffer = 0, ByteOrder endian = ByteOrder::BigEndian)
    {
        return new Utf16Source{stream, buffer, endian};
    }

    /** Open a new UTF-16 decoding data source
      * \param buffer input buffer
      * \param endian endianess of the 16 bit words transmitted
      * \return new object instance
      */
    static Ref<Utf16Source> open(const CharArray *buffer, ByteOrder endian = ByteOrder::BigEndian)
    {
        return new Utf16Source{buffer, endian};
    }

    /** Read the next %Unicode character
      * \param ch returns the %Unicode character read if any
      * \return true if not end of information, false otherwise
      */
    bool read(uchar_t *ch);

    /// Underlying byte source
    ByteSource *byteSource() const { return byteSource_; }

private:
    class DecodingError: public UnicodeError {
    public:
        string message() const override ;
    };

    Utf16Source(Stream *stream, CharArray *buffer, ByteOrder endian):
        byteSource_{ByteSource::open(stream, buffer, endian)},
        firstTime_{true}
    {}

    Utf16Source(const CharArray *buffer, ByteOrder endian):
        byteSource_{ByteSource::open(buffer, endian)},
        firstTime_{true}
    {}

    Ref<ByteSource> byteSource_;
    bool firstTime_;
};

} // namespace cc
