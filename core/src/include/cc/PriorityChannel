/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/PriorityQueue>
#include <cc/Source>
#include <cc/Sink>
#include <cc/Mutex>
#include <cc/Guard>
#include <cc/WaitCondition>

namespace cc {

/** \class PriorityChannel cc/PriorityChannel
  * \ingroup concurrency
  * \brief Inter-thread communication channel
  * \tparam T item type
  */
template<class T>
class PriorityChannel
{
public:
    class Instance: public Source<T>, public Sink<T>
    {
    public:
        /** Add a new item to the end of the channel
          * \param item item value
          * \param priority item priority
          * \return true if successful
          */
        bool pushBack(const T &item, int priority = 0)
        {
            Guard<Mutex> guard{mutex_};
            if (!close_) {
                queue_->pushBack(item, priority);
                notEmpty_->signal();
                return true;
            }
            return false;
        }

        /** Add a new item to the front of the channel
          * \param item item value
          * \param priority item priority
          * \return true if successful
          */
        bool pushFront(const T &item, int priority = 0)
        {
            Guard<Mutex> guard{mutex_};
            if (!close_) {
                queue_->pushFront(item, priority);
                notEmpty_->signal();
                return true;
            }
            return false;
        }

        /** Remove an item from the end
          * \param item returns the item value
          * \return true if successful
          */
        bool popBack(T *item)
        {
            Guard<Mutex> guard{mutex_};
            while (queue_->count() == 0 && !close_) {
                notEmpty_->wait(mutex_);
            }
            if (queue_->count() > 0) {
                queue_->popBack(item);
                return true;
            }
            return false;
        }

        /** Remove an item from the front
          * \param item returns the item value
          * \return true if successful
          */
        bool popFront(T *item)
        {
            Guard<Mutex> guard{mutex_};
            while (queue_->count() == 0 && !close_) {
                notEmpty_->wait(mutex_);
            }
            if (queue_->count() > 0) {
                queue_->popFront(item);
                return true;
            }
            return false;
        }

        /// \copydoc popFront(T *)
        bool read(T *item) override
        {
            return popFront(item);
        }

        /// \copydoc pushBack(const T &)
        bool write(const T &item) override
        {
            return pushBack(item);
        }

        /** Wait for the channel to become ready to read
          * \return true if the channel contains at least one item before timeout or the channel has been closed
          */
        bool wait()
        {
            Guard<Mutex> guard{mutex_};
            while (queue_->count() == 0 && !close_)
                notEmpty_->wait(mutex_);
            return queue_->count() > 0 || close_;
        }

        /** Wait for the channel to become ready to read
          * \param timeout absolute timeout (e.g. System::now() + 10)
          * \return true if the channel contains at least one item before timeout or the channel has been closed
          */
        bool waitUntil(double timeout)
        {
            Guard<Mutex> guard{mutex_};
            while (queue_->count() == 0 && !close_) {
                if (!notEmpty_->waitUntil(timeout, mutex_))
                    break;
            }
            return queue_->count() > 0 || close_;
        }

        /** Remove an item from the end of the queue before a certain timeout
          * \param timeout absolute timeout (e.g. System::now() + 10)
          * \param item optionally return the item value
          * \return true if an item was available before reaching the timeout, otherwise false
          */
        bool popBackBefore(double timeout, T *item)
        {
            Guard<Mutex> guard{mutex_};
            while (queue_->count() == 0 && !close_) {
                if (!notEmpty_->waitUntil(timeout, mutex_))
                    break;
            }
            if (queue_->count() > 0) {
                queue_->popBack(item);
                return true;
            }
            return false;
        }

        /** Remove an item from the head of the queue before a certain timeout
          * \param timeout absolute timeout (e.g. System::now() + 10)
          * \param item optionally return the item value
          * \return true if an item was available before reaching the timeout, otherwise false
          */
        bool popFrontBefore(double timeout, T *item)
        {
            Guard<Mutex> guard{mutex_};
            while (queue_->count() == 0 && !close_) {
                if (!notEmpty_->waitUntil(timeout, mutex_))
                    break;
            }
            if (queue_->count() > 0) {
                queue_->popFront(item);
                return true;
            }
            return false;
        }

        /// Return number of queued items
        int count() const { Guard<Mutex> guard{mutex_}; return queue_->count(); }

        /// Close channel
        void close()
        {
            Guard<Mutex> guard{mutex_};
            close_ = true;
            notEmpty_->broadcast();
        }

    private:
        friend class PriorityChannel;

        Instance() = default;

        PriorityQueue<T> queue_;
        Mutex mutex_;
        WaitCondition notEmpty_;
        bool close_ { false };
    };

    PriorityChannel():
        instance_{new Instance}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return instance_; }

private:
    PriorityChannel &operator=(const PriorityChannel &other);

    Ref<Instance> instance_;
};

} // namespace cc
