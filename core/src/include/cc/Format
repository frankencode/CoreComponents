/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>
#include <cc/Variant>
#include <cc/Queue>
#include <cc/Stream>
#include <cc/str>

namespace cc {

template<class> class Queue;

/** \addtogroup formatted_io
  * \{
  */

/** \class FormatSignal cc/Format
  * \brief Type for formatting signals
  */
class FormatSignal {};

extern FormatSignal nl; ///< The newline formatting signal causes a newline but no output flushing.
extern FormatSignal flush; ///< The flush formatting signal causes the aggregated text to be flushed and written to the associated output stream (if any).

/** \class Format cc/Format
  * \brief Text formatting helper
  */
class Format: public StringList
{
public:
    /** Construct a new String formatting helper
      * \param pattern formatting pattern containing injection placeholders ("%%")
      * \param stream output stream to write the resulting text to (optional)
      */
    Format(const String &pattern, Stream *stream = nullptr);

    /** Construct a new String formatting helper
      * \param stream output stream to write the resulting text to (optional)
      */
    Format(Stream *stream = nullptr);

    /// Low-level destructor
    ~Format();

    /// Copy-constructor
    Format(const Format &b) = default;

    /// Assignment operator
    Format &operator=(const Format &b) = default;

    /// Append or inject a string to the output text
    Format &operator<<(const String &s);

    /// Automatically join a stringlist and append or inject it to the output text
    Format &operator<<(const StringList &l) {
        return *this << l->join();
    }

    /** %Process a special formatting signal
      * \param s formatting signal (nl or flush)
      */
    Format &operator<<(const FormatSignal &s);

    /** Append or inject an element x to the output text
      * \param x anything which can be converted to a String via str(x)
      */
    template<class T>
    Format &operator<<(const T &x) {
        if (isNull_) return *this;
        return *this << str(x);
    }

private:
    void flush();

    Ref<Stream> stream_;
    bool isNull_;
    Ref< Queue<int> > placeHolder_;
    String lastInsert_;
    int lastPosition_;
};

/** \class NullFormat cc/Format
  * \brief Zero storage formatting output sink
  */
class NullFormat {
public:
    /// Drop output
    template<class T>
    inline const NullFormat &operator<<(T) const { return *this; }
};

template<class T>
String str(const ListValue<T> &a)
{
    auto n = a->count();
    if (n == 0) return "[]";
    Format f;
    f << "[ ";
    for (const auto &x: a) {
        f << x;
        if (--n > 0) f << ", ";
    }
    f << " ]";
    return f;
}

template<class K, class T>
String str(const MapValue<K, T> &a)
{
    auto n = a->count();
    if (n == 0) return "[]";
    Format f;
    f << "[ ";
    for (const auto &x: a) {
        f << "(" << x->key() << ": " << x->value() << ")";
        if (--n > 0) f << ", ";
    }
    f << " ]";
    return f;
}

/** \}
  */

} // namespace cc
