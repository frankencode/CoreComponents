/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bucket>
#include <cc/containers>
#include <cc/Source>
#include <cc/Heap>
#include <cc/Set>

namespace cc {

template<class T>
class List: public Object
{
public:
    typedef bucket::Weight Index;
    typedef T Item;

    static Ref<List> create() { return new List; }

    static Ref<List> allocate(Index count)
    {
        // TODO: improve performance

        auto list = new List;
        for (; count > 0; --count) list->pushBack(Item{});
        return list;
    }


    static Ref<List> copy(const List *other)
    {
        // TODO: improve performance

        auto list = new List;
        for (const Item &item: other) list->pushBack(item);
        return list;
    }

    Index count() const { return tree_->count(); }

    /// Check if an index is valid
    bool has(int index) const {
        return 0 <= index && index < count();
    }

    Item &at(Index index)
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    const Item &at(Index index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    void push(Index index, const Item &item)
    {
        assert(0 <= index && index <= count());
        tree_->push<Item>(index, item);
    }

    void pop(Index index)
    {
        assert(0 <= index && index < count());
        tree_->pop<Item>(index);
    }

    void pushBack(const Item &item)
    {
        tree_->pushBack(item);
    }

    void popBack()
    {
        assert(count() > 0);
        pop(count() - 1);
    }

    void pushFront(const Item &item)
    {
        push(0, item);
    }

    void popFront()
    {
        assert(count() > 0);
        pop(0);
    }

    void append(const Item &item)
    {
        tree_->pushBack(item);
    }

    /** Append a copy of another list to this list
      * \param b another list
      */
    void appendList(const List *other)
    {
        if (other) {
            // TODO: improve performance

            for (const Item &item: other)
                tree_->pushBack(item);
        }
    }

    template<class Iterator>
    void pushAndStep(Iterator &target, const Item &item)
    {
        tree_->pushAndStep(target, item);
    }

    template<class Iterator>
    void popAndStep(Iterator &target)
    {
        tree_->popAndStep(target);
    }

    /** Return a copy of this list
      * \return new object instance
      */
    Ref<List> copy() const { return List::copy(this); }

    /** Search for an item
      * \param item item to search for
      * \param index start position for the search
      * \return first position the item was found in or count() if the item couldn't be found
      */
    int find(const Item &item, Index index = 0) const
    {
        auto it = beginAt(index);
        for (; it; ++it) {
            if (*it == item) break;
        }
        return +it;
    }

    /** Test if the list contains a certain item
      * \param item item to test for
      * \return true if the item appears in the list
      */
    bool contains(const Item &item) const
    {
        return find(item) < count();
    }

    void deplete() { tree_->deplete<Item>(); }

    Item &front() { assert(count() > 0); return tree_->first<Item>(); }
    const Item &front() const { assert(count() > 0); return tree_->first<Item>(); }

    Item &back() { assert(count() > 0); return tree_->last<Item>(); }
    const Item &back() const { assert(count() > 0); return tree_->last<Item>(); }

    /** Replace all appearances of an item value
      * \param oldItem old item value to search for
      * \param newItem new item value to put in place
      * \return pointer to this list
      */
    List *replaceInsitu(const Item &oldItem, const Item &newItem)
    {
        for (Item &item: this) {
            if (item == oldItem)
                item = newItem;
        }
        return this;
    }

    /** Join all items of this list into a single item
      * \param sep the separator to insert between the items
      * \return the resulting item
      */
    Item join(const Item &sep = Item{}) const { return Item::join(this, sep); }

    template<class SortOrder>
    Ref<List> sort(bool unique = false) const
    {
        if (count() == 0) return List::create();
        auto heap = GenericHeap<Item, SortOrder>::create(count());
        return sortWithHeap(heap, unique);
    }

    /** Create a sorted copy of this list
      * \param order sort order
      * \param unique eliminate duplicates
      * \return newly sorted list
      */
    Ref<List> sort(SortOrder order = Ascending, bool unique = false) const
    {
        if (count() == 0) return List::create();
        auto heap = Heap<Item>::create(count(), order);
        return sortWithHeap(heap, unique);
    }

    /** Create a reversed copy of this list
      * \return reversed list
      */
    Ref<List> reverse() const
    {
        // TODO: improve performance

        Ref<List> result = List::allocate(count());
        for (int i = 0, n = count(); i < n; ++i)
            result->at(i) = at(n - i - 1);
        return result;
    }

    /** Remove duplicate entries from the list
      * \param list list to eliminate duplicates from
      */
    static void makeUnique(List *list)
    {
        auto set = Set<Item>::create();
        for (auto it = list->begin(); it;) {
            if (set->insert(*it)) ++it;
            else list->popAndStep(it);
        }
    }

    /** Convert to a list of different item type
      * \tparam T2 the target item type
      * \return new list instance
      */
    template<class Item2>
    Ref< List<Item2> > toList() const {
        auto other = List<Item2>::create();
        for (auto &item: this) {
            Item item2;
            item2 = item;
            other->append(item2);
        }
        return other;
    }

    /// \copydoc push(const Item &item)
    void operator<<(const Item& item) { pushBack(item); }

    /// \copydoc pop()
    void operator>>(Item* item) { *item = front(); popFront(); }

    /** \name Iterators
      * @{
      */
    typedef bucket::Iterator<Item> Iterator;
    Iterator begin() { return Iterator{&tree_}; }
    Iterator end() { return Iterator{&tree_, tree_->count()}; }

    typedef bucket::ConstIterator<Item> ConstIterator;
    ConstIterator begin() const { return ConstIterator{tree_}; }
    ConstIterator end() const { return ConstIterator{tree_, tree_->count()}; }
    ConstIterator beginAt(Index index) const { return ConstIterator{tree_, index}; }
    /** @}
      */

    /** \internal
      * @{
      */
    typedef Iterator iterator;
    typedef ConstIterator const_iterator;
    /** @}
      */

    /** \name Source adapters
      * @{
      */
    template<class OutputType = Item>
    Ref< Source<OutputType> > getAll() const { return ContainerSource< List, Pass<Item, OutputType> >::open(this); }
    /** @}
      */

private:
    friend class Local<List>;
    friend class bucket::Internals;

    List() = default;
    ~List() { tree_->deplete<Item>(); }

    List(const List &) = delete;

    template<class Heap>
    Ref<List> sortWithHeap(Ref<Heap> heap, bool unique = false) const
    {
        for (const Item &item: this) heap->push(item);

        Ref<List> result = List::create();
        if (unique) {
            Item prev, item;
            heap->pop(&prev);
            result->append(prev);
            while (!heap->isEmpty()) {
                heap->pop(&item);
                if (item != prev) {
                    result->append(item);
                    prev = item;
                }
            }
        }
        else {
            while (!heap->isEmpty())
                result->append(heap->pop());
        }

        return result;
    }

    Local<bucket::Tree> tree_;
};

template<class T>
bool operator==(const List<T> &a, const List<T> &b) { return container::compare(a, b) == 0; }

template<class T>
bool operator!=(const List<T> &a, const List<T> &b) { return container::compare(a, b) != 0; }

template<class T>
bool operator<(const List<T> &a, const List<T> &b) { return container::compare(a, b) < 0; }

template<class T>
bool operator>(const List<T> &a, const List<T> &b) { return container::compare(a, b) > 0; }

template<class T>
bool operator<=(const List<T> &a, const List<T> &b) { return container::compare(a, b) <= 0; }

template<class T>
bool operator>=(const List<T> &a, const List<T> &b) { return container::compare(a, b) >= 0; }

} // namespace cc
