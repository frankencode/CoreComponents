/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bucket>
#include <cc/containers>
#include <cc/Heap>
#include <cc/Set>

namespace cc {

template<class T>
class list;

/** \class List cc/List
  * \ingroup container_lowlevel
  * \brief %List data container
  * \tparam T item type
  *
  * The List class provides a very efficient data structure for small and medium-sized lists.
  * For larger lists it provides good memory density while still scaling logarithmically for all basic operations.
  */
template<class T>
class List: public Object
{
public:
    typedef T value_type; ///< item type
    typedef int64_t size_type; ///< index type
    typedef bucket::Iterator<T> iterator; ///< iterator type
    typedef bucket::ConstIterator<T> const_iterator; ///< constant iterator type

    /** Create an empty list
      * \return new object instance
      */
    static Ref<List> create() { return new List; }

    /** Create a copy of another list
      * \param other the list to copy
      * \return new object instance
      */
    static Ref<List> copy(const List *other) { return new List{other}; }

    /** Make a copy of this list
      * \return new object instance
      */
    Ref<List> copy() const { return List::copy(this); }

    /// Return the number of items stored in this list
    size_type count() const { return tree_->count(); }

    /// Check if an index is valid
    bool has(int index) const {
        return 0 <= index && index < count();
    }

    /** Return a reference to an item
      * \param index list index
      * \return reference to the item
      */
    T &at(size_type index)
    {
        assert(0 <= index && index < count());
        return tree_->at<T>(index);
    }

    /** \copydoc at(Index index)
      */
    const T &at(size_type index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<T>(index);
    }

    /// Iterator pointing to the beginning (on first item)
    iterator begin() { return iterator{&tree_}; }

    /// Iterator pointing to the item at \a index
    iterator beginAt(size_type index) { return iterator{tree_, index}; }

    /// Iterator to the end (behind last item)
    iterator end() { return iterator{&tree_, tree_->count()}; }

    /// Constant iterator to the beginning (on first item)
    const_iterator begin() const { return const_iterator{tree_}; }

    /// Constant Iterator pointing to the item at \a index
    const_iterator beginAt(size_type index) const { return const_iterator{tree_, index}; }

    /// Constant iterator to the end (behind last item)
    const_iterator end() const { return const_iterator{tree_, tree_->count()}; }

    /** Insert new item at given index
      * \param index list index
      * \param item new item value
      */
    void insertAt(size_type index, const T &item)
    {
        assert(0 <= index && index <= count());
        tree_->push<T>(index, item);
    }

    /** Remove item at given index
      * \param index list index
      */
    void removeAt(size_type index)
    {
        assert(0 <= index && index < count());
        tree_->pop<T>(index);
    }

    /** Append \a item to the end of the list
      */
    void append(const T &item)
    {
        tree_->pushBack(item);
    }

    /** Prepend \a item to the front of the list
      */
    void prepend(const T &item)
    {
        insertAt(0, item);
    }

    /** Append a copy of another list to this list
      * \param other another list
      */
    void appendList(const List *other)
    {
        if (other) {
            // TODO: improve performance

            for (const T &item: other)
                append(item);
        }
    }

    /** Insert \a item at given \a target position */
    void insert(iterator &target, const T &item)
    {
        tree_->pushAndStep(target, item);
    }

    /** Remove \a item from given \a target position */
    void remove(iterator &target)
    {
        tree_->popAndStep(target);
    }

    /** Prepend a copy of another list to this list
      * \param other another list
      */
    void prependList(const List *other)
    {
        if (other) {
            // TODO: improve performance

            size_type i = 0;
            for (const T &item: other) {
                insertAt(i, item);
                ++i;
            }
        }
    }

    /// Directly access first item
    T &first() { assert(count() > 0); return tree_->first<T>(); }

    /// Directly access first item of a constant list
    const T &first() const { assert(count() > 0); return tree_->first<T>(); }

    /// Directly access last item
    T &last() { assert(count() > 0); return tree_->last<T>(); }

    /// Directly access last item of a constant list
    const T &last() const { assert(count() > 0); return tree_->last<T>(); }

    /// Check if \a x points to first item
    bool first(const T *x) const { return &first() == x; }

    /// Check if \a x points to last item
    bool last(const T *x) const { return &last() == x; }

    /** Search for an item
      * \param item item to search for
      * \param index start and final position
      * \return true if item was found
      */
    bool find(const T &item, size_type *index = nullptr)
    {
        int i = index ? *index : 0;
        i = scan(item, i);
        if (index) *index = i;
        return i < count();
    }

    /** Search for an item
      * \param item item to search for
      * \param index start position for the search
      * \return first position the item was found in or count() if the item couldn't be found
      */
    int scan(const T &item, size_type index = 0) const
    {
        auto it = beginAt(index);
        for (; it; ++it) {
            if (*it == item) break;
        }
        return +it;
    }

    /** Test if the list contains a certain item
      * \param item item to test for
      * \return true if the item appears in the list
      */
    bool contains(const T &item) const
    {
        return scan(item) < count();
    }

    /// Remove all items from the list
    void deplete() { tree_->deplete<T>(); }

    /** Replace all appearances of an item value
      * \param oldItem old item value to search for
      * \param newItem new item value to put in place
      * \return pointer to this list
      */
    List *replaceInsitu(const T &oldItem, const T &newItem)
    {
        for (T &item: this) {
            if (item == oldItem)
                item = newItem;
        }
        return this;
    }

    /** Join all items of this list into a single item
      * \param sep the separator to insert between the items
      * \return the resulting item
      */
    T join(const T &sep = T{}) const { return T::join(this, sep); }

    /** Sort list
      * \param unique eliminate duplicates
      * \return sorted list
      */
    template<class SortOrder>
    Ref<List> sort(bool unique = false) const
    {
        if (count() == 0) return List::create();
        auto heap = GenericHeap<T, SortOrder>::create(count());
        return sortWithHeap(heap, unique);
    }

    /** Create a sorted copy of this list
      * \param order sort order
      * \param unique eliminate duplicates
      * \return sorted list
      */
    Ref<List> sort(SortOrder order = Ascending, bool unique = false) const
    {
        if (count() == 0) return List::create();
        auto heap = Heap<T>::create(count(), order);
        return sortWithHeap(heap, unique);
    }

    /** Create a reversed copy of this list
      * \return reversed list
      */
    Ref<List> reverse() const
    {
        // TODO: improve performance

        auto result = List::allocate(count());
        for (int i = 0, n = count(); i < n; ++i)
            result->at(i) = at(n - i - 1);
        return result;
    }

    /** Remove duplicate entries from the list
      * \param list list to eliminate duplicates from
      */
    static void makeUnique(List *list)
    {
        auto set = Set<T>::create();
        for (auto target = list->begin(); target;) {
            if (set->insert(*target)) ++target;
            else list->remove(target);
        }
    }

    /** Convert to a list of different item type
      * \tparam T2 the target item type
      * \return new list instance
      */
    template<class T2>
    Ref< List<T2> > toList() const {
        auto other = List<T2>::create();
        for (auto &item: this) {
            T2 item2;
            item2 = item;
            other->append(item2);
        }
        return other;
    }

    /** \name Syntax sugar
      */
    ///@{
    /** Append \a item to the list */
    void operator<<(const T& item) { pushBack(item); }
    /** Remove and return first item */
    void operator>>(T& item) { if (count() > 0) { item = front(); popFront(); } }
    ///@}

    /** \name Queuelike
      * @{
      */

    /** Append item at the end of the list */
    void pushBack(const T &item) { tree_->pushBack(item); }

    /** Remove the last from end of the list */
    void popBack() { removeAt(count() - 1); }

    /** Insert a new item at the beginning of the list */
    void pushFront(const T &item) { insertAt(0, item); }

    /** Remove the first item from the beginning of the list */
    void popFront() { removeAt(0); }

    /** Directly access item at the front */
    T &front() { assert(count() > 0); return tree_->first<T>(); }

    /** Directly access item at the front */
    const T &front() const { assert(count() > 0); return tree_->first<T>(); }

    /** Directly access item at the back */
    T &back() { assert(count() > 0); return tree_->last<T>(); }

    /** Directly access item at the back */
    const T &back() const { assert(count() > 0); return tree_->last<T>(); }

    /** @}
      */

private:
    friend class Local<List>;
    friend class bucket::Internals;
    friend class list<T>;

    // TODO: obsolete
    static Ref<List> allocate(size_type count)
    {
        auto list = new List;
        for (; count > 0; --count) list->pushBack(T{});
        return list;
    }

    List() = default;
    ~List() { tree_->deplete<T>(); }

    List(const List *other)
    {
        tree_->populate<T>(other);
    }

    template<class Heap>
    Ref<List> sortWithHeap(Ref<Heap> heap, bool unique = false) const
    {
        for (const T &item: this) heap->push(item);

        Ref<List> result = List::create();
        if (unique) {
            T prev, item;
            heap->pop(&prev);
            result->append(prev);
            while (!heap->isEmpty()) {
                heap->pop(&item);
                if (item != prev) {
                    result->append(item);
                    prev = item;
                }
            }
        }
        else {
            while (!heap->isEmpty())
                result->append(heap->pop());
        }

        return result;
    }

    Local<bucket::Tree> tree_;
};

template<class T>
bool operator==(const List<T> &a, const List<T> &b) { return container::compare(&a, &b) == 0; }

template<class T>
bool operator!=(const List<T> &a, const List<T> &b) { return container::compare(&a, &b) != 0; }

template<class T>
bool operator<(const List<T> &a, const List<T> &b) { return container::compare(&a, &b) < 0; }

template<class T>
bool operator>(const List<T> &a, const List<T> &b) { return container::compare(&a, &b) > 0; }

template<class T>
bool operator<=(const List<T> &a, const List<T> &b) { return container::compare(&a, &b) <= 0; }

template<class T>
bool operator>=(const List<T> &a, const List<T> &b) { return container::compare(&a, &b) >= 0; }

} // namespace cc
