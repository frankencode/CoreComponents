/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Source>

namespace cc
{

/** \class KeySource cc/KeySource
  * \brief Key source for associate data counters
  * \see Map, MultiMap
  */
template<class Container, class Item = typename Container::Key>
class KeySource: public Source<Item>
{
public:
    static Ref<KeySource> open(const Container *container)
    {
        return new KeySource{container};
    }

    bool read(Item *item) override
    {
        if (!iterator_) return false;
        *item = (*iterator_)->key();
        ++iterator_;
        return true;
    }

protected:
    KeySource(const Container *container): iterator_{container->begin()} {}
    typename Container::ConstIterator iterator_;
};

} // namespace cc
