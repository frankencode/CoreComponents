/*
 * Copyright (C) 2019-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <assert.h>
#include <iterator>
#include <cc/Object>
#include <cc/BucketMap>
#include <cc/containers>

namespace cc {

template<class T>
class Queue;

template<class T>
class QueueNode {
public:
    static constexpr unsigned Capacity = 16;

    QueueNode():
        pred_{nullptr},
        succ_{nullptr},
        fill_{0}
    {}

    QueueNode(QueueNode *pred, QueueNode *succ):
        pred_{pred},
        succ_{succ},
        fill_{0}
    {
        if (pred) pred->succ_ = this;
        if (succ) succ->pred_ = this;
    }

    ~QueueNode()
    {
        if (pred_) pred_->succ_ = succ_;
        if (succ_) succ_->pred_ = pred_;
    }

    T &at(unsigned nodeIndex) { return slot_[map_->mapToSlot(nodeIndex, fill_)]; }
    const T &at(unsigned nodeIndex) const { return slot_[map_->mapToSlot(nodeIndex, fill_)]; }

    void push(unsigned nodeIndex, const T &item) { slot_[map_->pushEntry(nodeIndex, &fill_)] = item; }
    void pop(unsigned nodeIndex) { map_->popEntry(nodeIndex, &fill_); }

    void pushBack(const T &item) { push(fill_, item); }
    void popBack(T *item) { *item = at(fill_ - 1); pop(fill_ - 1); }

    void pushFront(const T &item) { push(0, item); }
    void popFront(T *item) { *item = at(0); pop(0); }

    bool isFull() const { return fill_ == Capacity; }
    bool isEmpty() const { return fill_ == 0; }

    QueueNode *pred_;
    QueueNode *succ_;
    unsigned fill_;
    Local< BucketMap<Capacity> > map_;
    T slot_[Capacity];
};

/// \todo make sure iterators become invalid automatically in debug mode when the queue is modified
template<class T, class Node>
class QueueIterator:
    public std::iterator<
        /*iterator_category*/ std::bidirectional_iterator_tag,
        /*value_type*/        T,
        /*difference_type*/   int64_t,
        /*pointer*/           T *,
        /*reference*/         T &
    >
{
public:
    QueueIterator():
        node_{nullptr},
        egress_{0}
    {}

    QueueIterator(Node *node, unsigned egress):
        node_{node},
        egress_{egress}
    {}

    T &operator*() const
    {
        assert(node_); // cannot dereference an exhausted iterator

        return node_->at(egress_);
    }

    QueueIterator &operator++()
    {
        assert(node_); // cannot increment an exhausted iterator

        ++egress_;
        if (egress_ == node_->fill_) {
            egress_ = 0;
            node_ = node_->succ_;
        }
        return *this;
    }

    QueueIterator &operator--()
    {
        assert(node_); // cannot decrement an exhausted iterator

        if (egress_ > 0) {
            --egress_;
        }
        else {
            node_ = node_->pred_;
            egress_ = node_ ? node_->fill_ - 1 : 0;
        }
    }

    QueueIterator operator++(int)
    {
        QueueIterator it = *this;
        ++*this;
        return it;
    }

    QueueIterator operator--(int)
    {
        QueueIterator it = *this;
        --*this;
        return it;
    }

    QueueIterator &operator+=(int delta)
    {
        for (;delta > 0; --delta) ++*this;
        for (;delta < 0; ++delta) --*this;
        return *this;
    }

    QueueIterator &operator-=(int delta)
    {
        for (;delta > 0; --delta) --*this;
        for (;delta < 0; ++delta) ++*this;
        return *this;
    }

    bool operator==(const QueueIterator &b) const { return egress_ == b.egress_ && node_ == b.node_; }
    bool operator!=(const QueueIterator &b) const { return egress_ != b.egress_ || node_ != b.node_; }

    explicit operator bool() const { return node_; }

private:
    Node *node_;
    unsigned egress_;
};

/** \class QueueInstance cc/QueueInstance
  * \brief %QueueInstance data container
  * \tparam T item type
  * \see PriorityQueue, Channel
  * \inherit Object
  * \internal
  */
template<class T>
class QueueInstance: public Object
{
public:
    typedef T Item; ///< item type
    typedef int64_t Index; ///< count type
    typedef QueueIterator<T, QueueNode<T> > Iterator; ///< iterator type
    typedef QueueIterator<const T, QueueNode<T> > ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    /** Create a new queue
      * \return new object instance
      */
    static Ref<QueueInstance> create() { return new QueueInstance; }

    /** Create a copy of another queue
      * \param other the queue to copy
      * \return new object instance
      */
    static Ref<QueueInstance> copy(const QueueInstance *other) { return new QueueInstance{*other}; }

    /** Make a copy of this queue
      * \return new object instance
      */
    Ref<QueueInstance> copy() const { return new QueueInstance{*this}; }

    /// Iterator pointing to the beginning (on first item)
    Iterator begin() { return Iterator{head_, 0}; }

    /// Iterator pointing to the end (behind last item)
    Iterator end() { return Iterator{nullptr, 0}; }

    /// Constant iterator pointing to the beginning (on first item)
    ConstIterator begin() const { return ConstIterator{head_, 0}; }

    /// Constant iterator pointing to the end (behind last item)
    ConstIterator end() const { return ConstIterator{nullptr, 0}; }

    /** Add a new item to the end
      * \param item item value
      */
    void pushBack(const T &item);

    /** Add a new item to the front
      * \param item item value
      */
    void pushFront(const T &item);

    /** Remove an item from the end
      * \param item returns the item value
      * \return reference to \a item
      */
    const T &popBack (T *item);

    /** Remove an item from the front
      * \param item returns the item value
      * \return reference to \a item
      */
    const T &popFront(T *item);

    /** Remove the last item
      * \return item value
      */
    T popBack(){ T item; popBack (&item); return item; }

    /** Remove the first item
      * \return item value
      */
    T popFront() { T item; popFront(&item); return item; }

    /// \copydoc pushBack()
    void push(const T &item) { pushBack(item); }

    /// \copydoc popFront(T *)
    const T &pop(T *item) { return popFront(item); }

    /// \copydoc popFront()
    T pop() { return popFront(); }

    /// Return number of items
    Index count() const { return count_; }

    /// Return the first item
    T front() const { return head_->at(0); }

    /// Return the last item
    T back() const { return tail_->at(tail_->fill_ - 1); }

    /// Reset to an empty state
    void deplete();

    /** \name Syntax sugar
      */
    ///@{
    /// Append an item to the end
    void operator<<(const T& item) { pushBack(item); }
    /// Remove an item from the front
    void operator>>(T& item) { if (count() > 0) { popFront(&item); } }
    ///@}

private:
    friend class Local<QueueInstance>;
    friend class Queue<T>;

    QueueInstance() = default;

    QueueInstance(const QueueInstance &other)
    {
        for (const auto &x: other)
            pushBack(x);
    }

    ~QueueInstance()
    {
        deplete();
    }

    QueueNode<T> *head_ { nullptr };
    QueueNode<T> *tail_ { nullptr };
    int64_t count_ { 0 };
};

template<class T>
void QueueInstance<T>::pushBack(const T &item)
{
    if (tail_) {
        if (tail_->isFull())
            tail_ = new QueueNode<T>{tail_, nullptr};
    }
    else {
        head_ = tail_ = new QueueNode<T>;
    }

    tail_->pushBack(item);

    ++count_;
}

template<class T>
void QueueInstance<T>::pushFront(const T &item)
{
    if (head_) {
        if (head_->isFull())
            head_ = new QueueNode<T>{nullptr, head_};
    }
    else {
        head_ = tail_ = new QueueNode<T>;
    }

    head_->pushFront(item);

    ++count_;
}

template<class T>
const T &QueueInstance<T>::popBack(T *item)
{
    assert(tail_ && !tail_->isEmpty());

    tail_->popBack(item);

    if (tail_->isEmpty()) {
        QueueNode<T> *oldTail = tail_;
        tail_ = tail_->pred_;
        if (head_ == oldTail) head_ = nullptr;
        delete oldTail;
    }

    --count_;
    return *item;
}

template<class T>
const T &QueueInstance<T>::popFront(T *item)
{
    assert(head_ && !head_->isEmpty());

    head_->popFront(item);

    if (head_->isEmpty()) {
        QueueNode<T> *oldHead = head_;
        head_ = head_->succ_;
        if (tail_ == oldHead) tail_ = nullptr;
        delete oldHead;
    }

    --count_;
    return *item;
}

template<class T>
void QueueInstance<T>::deplete()
{
    for (QueueNode<T> *node = head_; node;) {
        QueueNode<T> *oldNode = node;
        node = node->succ_;
        delete oldNode;
    }
}

} // namespace cc
