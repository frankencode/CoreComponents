/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/Map>
#include <cc/Format>

namespace cc {

/** \class map cc/map
  * \ingroup container_highlevel
  * \brief %Map data container
  * \tparam K key type
  * \tparam T mapped type
  * \see multimap, set
  */
template<class K, class T = K>
class map {
public:
    typedef Map<K, T> Instance;

    typedef typename Instance::Item Item; ///< item type
    typedef typename Instance::Index Index; ///< index type
    typedef typename Instance::Key Key; ///< key type
    typedef typename Instance::Value Value; ///< mapped value type

    typedef typename Instance::Iterator Iterator; ///< iterator type
    typedef typename Instance::ConstIterator ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    map():
        instance_{new Instance}
    {}

    map(std::initializer_list<KeyValue<K, T>> b):
        instance_{new Instance}
    {
        for (auto &x: b) instance_->insert(x->key(), x->value());
    }

    map(const map &b) = default;

    map(map &&b):
        instance_{std::move(b.instance_)}
    {}

    map &operator=(const map &b) = default;

    map &operator=(map &&b) {
        instance_ = std::move(b.instance_);
        return *this;
    }

    map(Instance *b):
        instance_{b}
    {}

    Instance *operator->() { return Cow::get(instance_); }
    const Instance *operator->() const { return instance_; }

    operator const Instance *() const { return instance_; }
    operator Instance *() { return Cow::get(instance_); }

    const Item &operator[](Index i) const { return instance_->at(i); }

private:
    explicit operator bool() const;

    Ref<Instance> instance_;
};

template<class K, class T>
typename map<K, T>::Index count(const map<K, T> &a) { return a->count(); }

template<class K, class T>
typename map<K, T>::ConstIterator begin(const map<K, T> &a) { return a->begin(); }

template<class K, class T>
typename map<K, T>::ConstIterator end(const map<K, T> &a) { return a->end(); }

template<class K, class T>
typename map<K, T>::Iterator begin(map<K, T> &a) { return a->begin(); }

template<class K, class T>
typename map<K, T>::Iterator end(map<K, T> &a) { return a->end(); }

template<class K, class T>
bool operator==(const map<K, T> &a, const map<K, T> &b) { return container::compare(a, b) == 0; }

template<class K, class T>
bool operator!=(const map<K, T> &a, const map<K, T> &b) { return container::compare(a, b) != 0; }

template<class K, class T>
bool operator<(const map<K, T> &a, const map<K, T> &b) { return container::compare(a, b) < 0; }

template<class K, class T>
bool operator>(const map<K, T> &a, const map<K, T> &b) { return container::compare(a, b) > 0; }

template<class K, class T>
bool operator<=(const map<K, T> &a, const map<K, T> &b) { return container::compare(a, b) <= 0; }

template<class K, class T>
bool operator>=(const map<K, T> &a, const map<K, T> &b) { return container::compare(a, b) >= 0; }

template<class K, class T>
String str(const KeyValue<K, T> &a)
{
    return Format{} << "(" << a->key() << ": " << a->value() << ")";
}

template<class K, class T>
String str(const map<K, T> &a)
{
    Format f;
    f << "[ ";
    auto n = a->count();
    for (const auto &x: a) {
        f << x;
        if (--n > 0) f << ", ";
    }
    f << " ]";
    return f;
}

} // namespace cc
