/*
 * Copyright (C) 2007-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/assert>
#include <cc/ExclusiveAccess>
#include <cc/Ref>

namespace cc {

class OrdinalNode;
class IndexTrackingAccess;

class IndexTracking {
public:
    IndexTracking(): node_(nullptr) {}

    int getIndex() const;

private:
    friend class IndexTrackingAccess;
    OrdinalNode *node_;
};

class IndexTrackingAccess {
public:
    template<class Node>
    inline static void activate(Node *node) {
        IndexTracking *item = static_cast<IndexTracking *>(node->item_);
        if (item->node_ == nullptr)
            item->node_ = node;
        else
            CC_ASSERT2(item->node_ == node, "Index tracked item added to multiple containers");
    }

    template<class Node>
    inline static void deactivate(Node *node) {
        IndexTracking *item = static_cast<IndexTracking *>(node->item_);
        if (item->node_ == node) item->node_ = nullptr;
    }
};

template<class Node, int HasActiveItem>
class OrdinalNodeActivation {
public:
    inline static void activate(Node *) {}
    inline static void deactivate(Node *) {}
};

template<class Node>
class OrdinalNodeActivation<Node, 1>: public IndexTrackingAccess {};

class OrdinalNode
{
public:
    OrdinalNode():
        weight_(1),
        balance_(0)
    {}

    template<class Node>
    inline static void activate(Node *node) {
        OrdinalNodeActivation<
            Node,
            ConversionFromTo<
                typename DerefPointerType<typename Node::Item>::DerefType *,
                IndexTracking *
            >::Exists
        >::activate(node);
    }

    template<class Node>
    inline static void deactivate(Node *node) {
        OrdinalNodeActivation<
            Node,
            ConversionFromTo<
                typename DerefPointerType<typename Node::Item>::DerefType *,
                IndexTracking *
            >::Exists
        >::deactivate(node);
    }

    OrdinalNode *left_;
    OrdinalNode *right_;
    OrdinalNode *parent_;
    int weight_;
    int balance_;
};

class OrdinalTree;

class AvlBalance
{
protected:
    static void restore(OrdinalTree *tree, OrdinalNode *kp, bool left, bool attached);

private:
    static OrdinalNode *rebalance(OrdinalTree *tree, OrdinalNode *k1);

public:
#ifndef NDEBUG
    static int height(OrdinalNode *k);
    static bool testBalance(OrdinalNode *k);
#endif
};

#ifndef NDEBUG
class OrdinalTreeTester;
#endif

class OrdinalTree: public AvlBalance
{
public:
    inline OrdinalNode *min() const { return min(root_); }
    inline OrdinalNode *max() const { return max(root_); }

    void attach(OrdinalNode *kp, OrdinalNode *kn, bool left);
    OrdinalNode *unlink(OrdinalNode *k);

    inline int count() const { return weight(); }

    static int getIndexOf(OrdinalNode *k);

protected:
    inline int weight() const { return weight(root_); }
    inline static int weight(OrdinalNode *k) { return (k) ? k->weight_ : 0; }

    OrdinalNode *getNodeAt(int i) const;
    void attachAt(int i, OrdinalNode *kn);
    OrdinalNode *unlinkAt(int i);

    OrdinalTree(): root_(0), cachedNode_(0) {}
    void populate(OrdinalNode **v, int n);

    template<class Node>
    static Node *clone(Node *k);

    template<class Node>
    inline void clear() { // FIXME: rename to deplete()
        clear(static_cast<Node *>(root_));
        root_ = 0;
        cachedNode_ = 0;
    }

    virtual void changed(OrdinalNode *kp, OrdinalNode *kc, bool left, bool attached);
    virtual void rotated(OrdinalNode *k1, bool /*left*/);

    OrdinalNode *root_;

private:
    friend class AvlBalance;
    #ifndef NDEBUG
    friend class OrdinalTreeTester;
    #endif

    void attachBefore(OrdinalNode *kb, OrdinalNode *kn);

    OrdinalNode *detach(OrdinalNode *k);
    void replace(OrdinalNode *ki, OrdinalNode *kl);

    void rotate(OrdinalNode *k1, bool left);

    inline static void establishWeight(OrdinalNode *k) { k->weight_ = weight(k->left_) + weight(k->right_) + 1; }

    static OrdinalNode *min(OrdinalNode *k);
    static OrdinalNode *max(OrdinalNode *k);

    static OrdinalNode *pred(OrdinalNode *k);
    static OrdinalNode *succ(OrdinalNode *k);

    template<class Node>
    static void clear(Node *k);

    static bool testStructure(OrdinalNode *k);
    static bool testWeight(OrdinalNode *k);
    static bool testIteration(OrdinalNode *k);

    mutable ExclusiveSection cacheExclusive_;
    mutable OrdinalNode *cachedNode_;
    mutable int cachedIndex_;
};

inline int IndexTracking::getIndex() const
{
    if (!node_) return -1;
    return OrdinalTree::getIndexOf(node_);
}

template<class Node>
Node *OrdinalTree::clone(Node *k)
{
    if (!k) return 0;
    Node *kn = new Node(*k);
    if (!k->parent_) kn->parent_ = 0;
    if (k->left_) {
        kn->left_ = clone(k->left());
        kn->left_->parent_ = kn;
    }
    else {
        kn->left_ = 0;
    }
    if (k->right_) {
        kn->right_ = clone(k->right());
        kn->right_->parent_ = kn;
    }
    else {
        kn->right_ = 0;
    }
    return kn;
}

template<class Node>
void OrdinalTree::clear(Node *k)
{
    if (!k) return;
    clear(k->left());
    clear(k->right());
    delete k;
}

#ifndef NDEBUG

class OrdinalTreeTester {
protected:
    static bool testStructure(const OrdinalTree *tree) { return tree->testStructure(tree->root_); }
    static bool testWeight(const OrdinalTree *tree) { return tree->testWeight(tree->root_); }
    static bool testIteration(const OrdinalTree *tree) { return tree->testIteration(tree->root_); }
    static bool testBalance(const OrdinalTree *tree) { return tree->testBalance(tree->root_); }

    static bool test(const OrdinalTree *tree) {
        return
            testStructure(tree) &&
            testWeight(tree) &&
            testIteration(tree) &&
            testBalance(tree);
    }
};

#endif

} // namespace cc
