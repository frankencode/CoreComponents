/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/assert>
#include <cc/ExclusiveAccess>
#include <cc/Ref>
#include <cc/AvlTree>

namespace cc {

class OrdinalNode;
class IndexTrackingAccess;

class IndexTracking {
public:
    IndexTracking(): node_{nullptr} {}

    int getIndex() const;

private:
    friend class IndexTrackingAccess;
    OrdinalNode *node_;
};

class IndexTrackingAccess {
public:
    template<class Node>
    inline static void activate(Node *node) {
        IndexTracking *item = static_cast<IndexTracking *>(node->item_);
        if (item->node_ == nullptr)
            item->node_ = node;
    }

    template<class Node>
    inline static void deactivate(Node *node) {
        IndexTracking *item = static_cast<IndexTracking *>(node->item_);
        if (item->node_ == node) item->node_ = nullptr;
    }
};

template<class Node, int HasActiveItem>
class OrdinalNodeActivation {
public:
    inline static void activate(Node *) {}
    inline static void deactivate(Node *) {}
};

template<class Node>
class OrdinalNodeActivation<Node, 1>: public IndexTrackingAccess {};

class OrdinalNode
{
public:
    OrdinalNode():
        weight_{1},
        balance_{0}
    {}

    template<class Node>
    inline static void activate(Node *node) {
        OrdinalNodeActivation<
            Node,
            ConversionFromTo<
                typename DerefPointerType<typename Node::Item>::DerefType *,
                IndexTracking *
            >::Exists
        >::activate(node);
    }

    template<class Node>
    inline static void deactivate(Node *node) {
        OrdinalNodeActivation<
            Node,
            ConversionFromTo<
                typename DerefPointerType<typename Node::Item>::DerefType *,
                IndexTracking *
            >::Exists
        >::deactivate(node);
    }

    inline void takeOver(const OrdinalNode *other)
    {
        *this = *other;
    }

    OrdinalNode *left_;
    OrdinalNode *right_;
    OrdinalNode *parent_;
    int weight_;
    int balance_;
};

#ifndef NDEBUG
class OrdinalTreeTester;
#endif

class OrdinalTree: public AvlTree<OrdinalNode>
{
public:
    inline int count() const { return weight(); }

    static int getIndexOf(OrdinalNode *k);

protected:
    inline int weight() const { return weight(root_); }
    inline static int weight(OrdinalNode *k) { return (k) ? k->weight_ : 0; }

    OrdinalNode *getNodeAt(int i) const;
    void attachAt(int i, OrdinalNode *kn);
    OrdinalNode *unlinkAt(int i);

    OrdinalTree(): cachedNode_{nullptr} {}
    void populate(OrdinalNode **v, int n);

    template<class UserNode>
    inline void deplete() {
        depleteTree<UserNode>(static_cast<UserNode *>(root_));
        root_ = nullptr;
        cachedNode_ = nullptr;
    }

    void changed(OrdinalNode *kp, OrdinalNode *kc, bool left, bool attached) override;
    void rotated(OrdinalNode *k1, bool /*left*/) override;

private:
    friend class AvlBalance;
    #ifndef NDEBUG
    friend class OrdinalTreeTester;
    #endif

    void attachBefore(OrdinalNode *kb, OrdinalNode *kn);

    inline static void establishWeight(OrdinalNode *k) { k->weight_ = weight(k->left_) + weight(k->right_) + 1; }

    static bool testWeight(OrdinalNode *k);

    mutable ExclusiveSection cacheExclusive_;
    mutable OrdinalNode *cachedNode_;
    mutable int cachedIndex_;
};

inline int IndexTracking::getIndex() const
{
    if (!node_) return -1;
    return OrdinalTree::getIndexOf(node_);
}

#ifndef NDEBUG

class OrdinalTreeTester {
protected:
    static bool testStructure(const OrdinalTree *tree) { return tree->testStructure(tree->root_); }
    static bool testWeight(const OrdinalTree *tree) { return tree->testWeight(tree->root_); }
    static bool testIteration(const OrdinalTree *tree) { return tree->testIteration(tree->root_); }
    static bool testBalance(const OrdinalTree *tree) { return tree->testBalance(tree->root_); }

    static bool test(const OrdinalTree *tree) {
        return
            testStructure(tree) &&
            testWeight(tree) &&
            testIteration(tree) &&
            testBalance(tree);
    }
};

#endif

} // namespace cc
