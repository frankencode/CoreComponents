/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Source>

namespace cc
{

/** \class MapKeySource cc/MapKeySource
  * \ingroup container
  * \brief Source adapter for the keys stored in a Map
  * \see Map
  */
template<class Map, class Item = typename Map::Key>
class MapKeySource: public Source<Item>
{
public:
    static Ref<MapKeySource> open(const Map *map)
    {
        return new MapKeySource{map};
    }

    bool read(Item *item) override
    {
        if (!iterator_) return false;
        *item = (*iterator_)->key();
        ++iterator_;
        return true;
    }

protected:
    MapKeySource(const Map *map): iterator_{map->begin()} {}
    typename Map::ConstIterator iterator_;
};

} // namespace cc
