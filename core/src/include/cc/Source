/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/Ref>

namespace cc {

template<class> class SourceIterator;

/** \class Source cc/Source
  * \brief Generic data source
  * \tparam T item type
  */
template<class T>
class Source: public virtual Object
{
public:
    /// Item type
    typedef T Item;

    /** Read an item from the source
      * \param item return next item if not end of input
      * \return true if not end of input, false otherwise
      */
    virtual bool read(T *item) = 0;

    /** \name C++ iterators
      * @{
      */
    typedef SourceIterator<Source> Iterator; ///< constant iterator type
    typedef Iterator ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator ; ///< \internal

    Iterator begin() { return Iterator{this}; }
    Iterator end() { return Iterator{}; }
    ConstIterator begin() const { return ConstIterator{this}; }
    ConstIterator end() const { return ConstIterator{}; }
    /** @} */
};

template<class Source>
class SourceIterator
{
public:
    SourceIterator(Source *s = nullptr): s_{s} { getNext(); }

    inline const typename Source::Item &operator*() const { return x_; }
    inline SourceIterator &operator++() { getNext(); return *this; }
    inline bool operator!=(const SourceIterator &b) const { return s_ != b.s_; }

private:
    inline void getNext() { if (s_) { if (!s_->read(&x_)) s_ = nullptr; } }
    Source *s_;
    typename Source::Item x_;
};

} // namespace cc
