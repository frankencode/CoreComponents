/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/Ref>

namespace cc {

template<class> class SourceIterator;

/** \class Source Source.h cc/Source
  * \brief Generic data source
  * \tparam T item type
  */
template<class T>
class Source: public Object
{
public:
    /// Item type
    typedef T Item;

    /** Read an item from the source
      * \param item return next item if not end of input
      * \return true if not end of input, false otherwise
      */
    virtual bool read(T *item) = 0;

    /** STL-style iterator declarations
      * @{
      */
    typedef SourceIterator<Source> iterator;
    typedef iterator const_iterator;
    iterator begin() { return iterator(this); }
    iterator end() { return iterator(); }
    const_iterator begin() const { return const_iterator(this); }
    const_iterator end() const { return const_iterator(); }
    /** @} */
};

template<class Source>
class SourceIterator
{
public:
    SourceIterator(Source *s = 0): s_(s) { getNext(); }

    inline const typename Source::Item &operator*() const { return x_; }
    inline SourceIterator &operator++() { getNext(); return *this; }
    inline bool operator!=(const SourceIterator &b) const { return s_ != b.s_; }

private:
    inline void getNext() { if (s_) { if (!s_->read(&x_)) s_ = 0; } }
    Source *s_;
    typename Source::Item x_;
};

} // namespace cc
