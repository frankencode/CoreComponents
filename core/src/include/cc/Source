/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/Ref>

namespace cc {

template<class> class SourceIterator;

/** \class Source cc/Source
  * \brief Generic data source
  * \tparam T item type
  */
template<class T>
class Source: public Object
{
public:
    /// Item type
    typedef T Item;

    /** Read an item from the source
      * \param item return next item if not end of input
      * \return true if not end of input, false otherwise
      */
    virtual bool read(T *item) = 0;

    /** \name C++ iterators
      * @{
      */
    typedef SourceIterator<Source> iterator;
    typedef iterator const_iterator;
    iterator begin() { return iterator(this); }
    iterator end() { return iterator(); }
    const_iterator begin() const { return const_iterator(this); }
    const_iterator end() const { return const_iterator(); }
    /** @} */
};

template<class Source>
class SourceIterator
{
public:
    SourceIterator(Source *s = 0): s_(s) { getNext(); }

    inline const typename Source::Item &operator*() const { return x_; }
    inline SourceIterator &operator++() { getNext(); return *this; }
    inline bool operator!=(const SourceIterator &b) const { return s_ != b.s_; }

private:
    inline void getNext() { if (s_) { if (!s_->read(&x_)) s_ = 0; } }
    Source *s_;
    typename Source::Item x_;
};

template<class I, class O>
class Pass {
public:
    typedef I InputType;
    typedef O OutputType;
    inline static OutputType get(const InputType &x) { return x; }
};

template<
    class Container,
    class Get = Pass<typename Container::Item, typename Container::Item>
>
class ContainerSource: public Source<typename Get::OutputType> {
public:
    static Ref<ContainerSource> open(const Container *container)
    {
        return new ContainerSource(container);
    }

    static Ref<ContainerSource> open(const Container *container, int fromIndex, int toIndex)
    {
        return new ContainerSource(container, fromIndex, toIndex);
    }

    bool read(typename Get::OutputType *item) override
    {
        if (i_ <= j_) {
            *item = Get::get(c_->at(i_));
            ++i_;
            return true;
        }
        return false;
    }

private:
    ContainerSource(const Container *c):
        c_(c),
        i_(0),
        j_(c->count() - 1)
    {}

    ContainerSource(const Container *c, int i, int j):
        c_(c),
        i_(i),
        j_(j)
    {
        if (i_ < 0) i_ = 0;
        if (c->count() <= j_) j_ = c->count() - 1;
    }

    Ref<const Container> c_;
    int i_, j_;
};

} // namespace cc
