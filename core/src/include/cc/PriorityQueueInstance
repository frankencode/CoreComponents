/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <assert.h>
#include <cc/MultiMap>

namespace cc {

template<class T>
class PriorityQueue;

template<class T>
class PriorityQueueInstance: public Object
{
    typedef MultiMap<int, T> MultiQueue;

public:
    typedef T Item;
    typedef typename MultiQueue::Index Index;

    /** Create a new queue
      * \return new object instance
      */
    static Ref<PriorityQueueInstance> create() { return new PriorityQueueInstance; }

    /** Create a copy of another queue
      * \param other the queue to copy
      * \return new object instance
      */
    static Ref<PriorityQueueInstance> copy(const PriorityQueueInstance *other) { return new PriorityQueueInstance{*other}; }

    /** Make a copy of this queue
      * \return new object instance
      */
    Ref<PriorityQueueInstance> copy() const { return new PriorityQueueInstance{*this}; }

    /** Add a new item to the end of the queue
      * \param item item value
      * \param priority priority of item
      */
    void pushBack(const Item &item, int priority = 0)
    {
        multiQueue_->insert(priority, item);
    }

    /** Remove an item from the head of the queue
      * \param item returns the item value
      * \return item value
      */
    const Item &popFront(Item *item)
    {
        assert(count() > 0);

        auto last = multiQueue_->last();
        *item = last->value();
        multiQueue_->remove(last);

        return *item;
    }

    /** Remove the first item from the queue
      * \return item value
      */
    Item popFront() {
        Item item;
        return popFront(&item);
    }

    /// \copydoc pushBack()
    void push(const Item &item, int priority) { pushBack(item, priority); }

    /// \copydoc popFront(Item *)
    const Item &pop(Item *item) { return popFront(item); }

    /// \copydoc popFront()
    Item pop() { return popFront(); }

    /// Return the number of queued items
    Index count() const { return multiQueue_->count(); }

    /// Return the first item in the queue
    T front() const { return multiQueue_->max()->value(); }

    /// Return the last item in the queue
    T back() const { return multiQueue_->min()->value(); }

    /** \name Syntax sugar
      */
    ///@{
    /// Append an item to the end
    void operator<<(const Item& item) { pushBack(item); }
    /// Remove an item from the front
    void operator>>(Item& item) { if (count() > 0) { popFront(&item); } }
    ///@}

private:
    friend class PriorityQueue<T>;

    PriorityQueueInstance() = default;

    MultiQueue multiQueue_;
};

} // namespace cc
