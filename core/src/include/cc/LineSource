/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/SourceIterator>
#include <cc/Stream>

namespace cc {

/** \class LineSource cc/LineSource
  * \ingroup streams
  * \brief Line input buffer
  * \note LineSource supports any type of line terminatation style (e.g. "\r\n", "\n", "\r" or "\0").
  * \todo The auxiliary buffer should be of type Bytes.
  */
class LineSource final: public Object
{
public:
    using Item = String; ///< Item type

    /** Create a null line source
      */
    LineSource() = default;

    /** Open a new line source fed from a memory buffer
      * \param buffer Input buffer
      */
    explicit LineSource(const String &buffer);

    /** Open a new line source fed from an input stream
      * \param stream Input stream
      */
    explicit LineSource(const Stream &stream);

    /** Open a new line source fed from an input stream
      * \param stream Input stream
      * \param buffer Input buffer
      */
    LineSource(const Stream &stream, const String &buffer);

    /** Read next line
      * \param line Returns the next line (if not end of input)
      * \return True if not end of input
      */
    bool read(Out<String> line);

    /** Iteration start
      */
    SourceIterator<LineSource> begin() { return SourceIterator<LineSource>{this}; }

    /** Iteration end
      */
    SourceIterator<LineSource> end() { return SourceIterator<LineSource>{}; }

private:
    struct State;

    State &me();
};

} // namespace cc
