/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>

namespace cc {

/** \class Entity cc/Entity
  * \ingroup objects
  * \brief Objects that materialize on-demand
  */
class Entity: public Object
{
protected:
    /** Internal state
      */
    using State = Object::State;

    /** Initialize entity with \a newState
      */
    Entity(State *newState):
        Object{newState}
    {}

    /** Internal state constructor
      */
    using Constructor = State *();

    /** Convenience template for initializing primordial entities
      */
    template<class T>
    static State *onDemand() { return new T; }

    /** Initialize a primordial entity
      */
    Entity(Constructor onDemand):
        onDemand_{onDemand}
    {}

    /** Get access to the entity's internal state of type \a T
      */
    template<class T>
    T &get() {
        if (!Object::me) Object::me = onDemand_();
        return Object::me().as<T>();
    }

    /** Get access to the entity's internal state
      */
    template<class T>
    const T &get() const {
        if (!Object::me) Object::me = onDemand_();
        return Object::me().as<T>();
    }

private:
    Constructor *onDemand_ { nullptr };
};

} // namespace cc
