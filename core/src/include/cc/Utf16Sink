/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#include <cc/ByteSink>
#include <cc/exceptions>

namespace cc {

/** \class Utf16Sink cc/Utf16Sink
  * \ingroup unicode
  * \brief UTF-16 encoding data sink
  * \exception UnicodeError
  */
class Utf16Sink
{
public:
    /** Create a new UTF-16 encoding data sink
      * \param stream Underlying data stream
      * \param endian Byte order of the 16-bit words transmitted
      */
    Utf16Sink(const Stream &stream, ByteOrder endian = ByteOrder::BigEndian):
        byteSink_{stream},
        endian_{endian}
    {}

    /** Create a new UTF-16 encoding data sink
      * \param stream Underlying data stream
      * \param buffer Output buffer
      * \param endian Byte order of the 16-bit words transmitted
      */
    Utf16Sink(const Stream &stream, const Bytes &buffer, ByteOrder endian = ByteOrder::BigEndian):
        byteSink_{stream, buffer},
        endian_{endian}
    {}

    /** Create a new UTF-16 encoding data sink
      * \param buffer Output buffer
      * \param endian Byte order of the 16 bit words transmitted
      */
    Utf16Sink(const Bytes &buffer, ByteOrder endian = ByteOrder::BigEndian):
        byteSink_{buffer},
        endian_{endian}
    {}

    /** Write the optional Byte Order Mark (BOM).
      * The BOM is the first 16 bit word of the transmission.
      * It signifies the byte order for the following words.
      * (The value of the BOM is 0xFEFF).
      */
    void writeByteOrderMark()
    {
        byteSink_.writeUInt16(0xFEFF);
    }

    /** Write an %Unicode character \a ch
      */
    void write(char32_t ch)
    {
        if (ch < 0x10000) {
            if ((0xD800 <= ch) && (ch <= 0xDFFF)) throw SurrogatePairEncodingError{};
            else if ((ch == 0xFEFF) || (ch == 0xFFFE)) throw ByteOrderMarkEncodingError{};
            byteSink_.writeUInt16(ch);
        }
        else {
            if (0x10FFFF < ch) throw LargeCodePointEncodingError{};
            ch -= 0x10000;
            byteSink_.writeUInt16((ch >> 10) + 0xD800);
            byteSink_.writeUInt16((ch & 0x3FF) + 0xDC00);
        }
    }

    /** Get the total number of bytes written
      */
    long long currentOffset() const
    {
        return byteSink_.currentOffset();
    }

private:
    class SurrogatePairEncodingError: public UnicodeError {
    public:
        String message() const override;
    };

    class ByteOrderMarkEncodingError: public UnicodeError {
    public:
        String message() const override;
    };

    class LargeCodePointEncodingError: public UnicodeError {
    public:
        String message() const override;
    };

    ByteSink byteSink_;
    ByteOrder endian_;
};

} // namespace cc
