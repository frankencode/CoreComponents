/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Exception>
#include <cc/Object>

namespace cc {

/** \class Plugin cc/Plugin
  * \ingroup plugins
  * \brief %Plugin library
  * \exception PluginError
  */
class Plugin: public Object
{
public:
    /** Create a null plugin
      */
    Plugin() = default;

    /** Dynamically load the plugin library under \a path
      */
    explicit Plugin(const String &path);

    /** %Plugin library name
      */
    String name() const { return me().name_; }

    /** %Plugin library path
      */
    String path() const { return me().path_; }

    /** Reload the plugin library
      */
    void reload();

    /** Unload the plugin library
      */
    void close();

private:
    void load();

    struct State: public Object::State
    {
        State(const String &path, const String &name):
            path_{path},
            name_{name}
        {}

        String path_;
        String name_;
        void *handle_ { nullptr };
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

/** \class PluginError cc/Plugin
  * \ingroup plugins
  * \brief Something went wrong when loading a plugin library
  */
class PluginError: public Exception
{
public:
    String message() const override;
};

} // namespace cc
