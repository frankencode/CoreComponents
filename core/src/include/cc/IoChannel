/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/SystemStream>

namespace cc {

/** \brief Input/output inter-process communication channel
  * \ingroup concurrency
  * \see Spawn
  */
class IoChannel: public SystemStream
{
public:
    class Instance: public SystemStream::Instance
    {
    public:
        int slaveFd() const { return slaveFd_; }

    protected:
        friend class IoChannel;
        friend class Process;
        friend class Command;

        Instance() = default;

        int slaveFd_ { -1 };
        virtual void onStart() {}
    };

    IoChannel() = default;

    Instance *operator->() const { return my<Instance>(); }

protected:
    IoChannel(Instance *instance):
        SystemStream{instance}
    {}
};

} // namespace cc
