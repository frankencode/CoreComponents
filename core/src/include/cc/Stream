/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>

namespace cc {

class Format;

/** \class Stream cc/Stream
  * \ingroup binary_io
  * \brief Abstract data stream
  */
class Stream: public Object
{
public:
    /** Read available data
      * \param data target buffer
      * \return number of bytes read
      * \see CharArray::select()
      */
    virtual int read(CharArray *data);

    /** Write data
      * \param data source buffer
      * \see CharArray::select()
      */
    virtual void write(const CharArray *data);

    /** Write multiple buffers atomically ("scatter write")
      * \param parts list of source buffers
      */
    virtual void write(const StringList *parts);

    /// Convenience wrapper
    void write(const String &data) { write(static_cast<const CharArray *>(data)); }

    /// Convenience wrapper
    void write(const char *data) { write(String(data)); }

    /// Convenience wrapper
    void write(const Format &format);

    /// Convenience wrapper
    void write(const void *data, int size);

    /** Transfer a span of bytes
      * \param count number of bytes to transfer (or -1 for all)
      * \param sink target stream (or null for dump mode)
      * \param buffer auxiliary transfer buffer
      * \return number of bytes transferred
      * \see Transfer
      */
    virtual off_t transferSpanTo(off_t count, Stream *sink, CharArray *buffer = 0);

    /// Convenience wrapper for transferSpanTo(sink, -1, buffer)
    off_t transferTo(Stream *sink, CharArray *buffer = 0) { return transferSpanTo(-1, sink, buffer); }

    /// Convenience wrapper for transferSpanTo(0, count)
    off_t skip(off_t count) { return transferSpanTo(count, 0); }

    /// Convenience wrapper for transferSpanTo(-1, 0)
    void drain() { transferSpanTo(-1, 0); }

    /** Read a span of bytes
      * \param data target buffer
      * \return number of bytes read
      */
    int readSpan(CharArray *data);

    /** Read a fixed number of bytes (N)
      * \param count number of bytes to read (N)
      * \return String of exactly N bytes (padded with zeros if no more data could be read)
      */
    String readSpan(int count);

    /** Read the entire stream
      * \param buffer auxiliary transfer buffer
      * \return all byte read from the stream
      */
    String readAll(CharArray *buffer = 0);

protected:
    virtual ~Stream() {}
};

} // namespace cc
