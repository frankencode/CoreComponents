/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

namespace cc {

/** Byte order, also known as "Endianess"
  * \ingroup binary_io
  */
enum class ByteOrder {
    LittleEndian = 1, ///< Low order byte precedes the high order byte
    BigEndian    = 0  ///< High order byte precedes the low order byte
};

/** Optimization safe raw type casting
  */
template<class B, class A>
inline B union_cast(A a)
{
    union Bimorph { A a; B b; };
    Bimorph morph;
    morph.a = a;
    return morph.b;
}

/** Return current system byte order
  * \ingroup binary_io
  */
inline ByteOrder localEndian()
{
    return static_cast<ByteOrder>(union_cast<uint8_t, unsigned>(1));
}

/** Swap endianess, if the current system byte order differs from the channel byte order
  * \ingroup binary_io
  */
template<class UInt>
inline UInt endianGate(UInt x, const ByteOrder channelEndian = ByteOrder::BigEndian)
{
    if (localEndian() != channelEndian) {
        const int n = sizeof(x);
        UInt z = 0;
        for (int i = 0; i < n; ++i) {
            z <<= 8;
            z |= (x >> (i * 8)) & 0xFF;
        }
        x = z;
    }
    return x;
}

} // namespace cc
