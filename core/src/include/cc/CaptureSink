/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>

namespace cc {

/** \class CaptureSink cc/CaptureSink
  * \ingroup binary_io
  * \brief Capture output in memory
  * \see ReplaySource, ByteSink
  */
class CaptureSink: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        void write(const CharArray *data) override
        {
            parts_->append(data);
        }

        /** Collect all data written to this sink
          * \return captured output
          */
        String collect() const
        {
            return parts_->join();
        }

    private:
        friend class CaptureSink;

        Instance() = default;

        StringList parts_;
    };

    /** Create a new CaptureSink
      */
    CaptureSink():
        Stream{new Instance}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

} // namespace cc
