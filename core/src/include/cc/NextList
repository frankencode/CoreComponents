/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/index>
#include <cc/iterators>

namespace cc {

template<class Item>
class ListTesting;

template<class Item>
class NextList: public Object
{
public:
    typedef int64_t Index;

    static Ref<NextList> create() { return new NextList; }

    Index count() const { return tree_->count(); }

    Item &at(Index index)
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    const Item &at(Index index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    void push(Index index, const Item &item)
    {
        assert(0 <= index && index <= count());
        tree_->push<Item>(index, item);
    }

    void pop(Index index)
    {
        assert(0 <= index && index < count());
        tree_->pop<Item>(index);
    }

    void deplete() { tree_->deplete<Item>(); }

    /** \name C++ iterators
      * @{
      */
    typedef index::Iterator<Item> iterator;
    iterator begin() { return index::Iterator<Item>{&tree_, 0}; }
    iterator end() { return index::Iterator<Item>{}; }

    typedef index::ConstIterator<Item> const_iterator;
    const_iterator begin() const { return index::ConstIterator<Item>{tree_, 0}; }
    const_iterator end() const { return index::ConstIterator<Item>{}; }
    /** @}
      */

private:
    friend class ListTesting<Item>;
    friend class Local<NextList>;

    NextList() {}
    ~NextList() { tree_->deplete<Item>(); }

    NextList(const NextList &) = delete;

    Local<index::Tree> tree_;
};

template<class Item>
class ListTesting
{
public:
    static const index::Tree *tree(const NextList<Item> *list) { return list->tree_; }
};

} // namespace cc
