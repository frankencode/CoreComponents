/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/Channel>
#include <cc/SignalSet>

namespace cc {

/** \class SignalMaster cc/SignalMaster
  * \brief %Signal handling master thread in a multi-threaded application
  * \ingroup concurrency
  * \note Before starting the SignalMaster one has to block all signals in all threads.
  * \see Thread::blockSignals()
  */
class SignalMaster final: public Object
{
public:
    static SignalSet defaultShutdownSignals();

    /** Create a null signal master
      */
    SignalMaster() = default;

    /** Create a new signal master thread
      * \param signals %Channel which transmits the received system signals
      * \param shutdownSet %Signals that cause the shutdown of the signal master
      */
    explicit SignalMaster(const Channel<Signal> &signals, const SignalSet &shutdownSet = defaultShutdownSignals());

    /** Start the signal master thread
      */
    void start();

    /** Wait for termination of the signal master thread
      */
    void wait();

    /** Send signal to the signal master thread
      */
    void kill(Signal signal = Signal::Terminate);

private:
    struct State;

    State &me();
};

} // namespace cc
