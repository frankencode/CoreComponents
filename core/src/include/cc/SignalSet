/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/SystemSignal>

namespace cc {

/** \class SignalSet cc/SignalSet
  * \brief A set of system signals
  * \see Thread
  */
class SignalSet
{
public:
    class Instance
    {
    public:
        Instance *empty() { sigemptyset(&set_); return this; }
        Instance *fill()  { sigfillset(&set_); return this; }
        Instance *query() { pthread_sigmask(/*how*/0, /*new_set*/nullptr, /*old_set*/&set_); return this; } /// \todo move to Thread
        Instance *insert(SystemSignal signal) { sigaddset(&set_, +signal); return this; }
        Instance *remove(SystemSignal signal) { sigdelset(&set_, +signal); return this; }

        bool contains(SystemSignal signal) const { return sigismember(&set_, +signal); }

    private:
        friend class SignalSet;
        Instance() = default;
        sigset_t set_;
    };

    static SignalSet full()  { SignalSet s; s->fill(); return s; }
    static SignalSet empty() { SignalSet s; s->empty(); return s; }

    SignalSet() = default;

    Instance *operator->() { return &instance_; }
    const Instance *operator->() const { return &instance_; }

    operator sigset_t *() { return &(*this)->set_; }
    operator const sigset_t *() const { return &(*this)->set_; }

private:
    Instance instance_;
};

} // namespace cc
