/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Singleton>
#include <cc/Signal>

namespace cc {

class Thread;

/** \class SignalSet cc/SignalSet
  * \brief Signal set
  * \see Thread
  */
class SignalSet: public Object
{
public:
    static Ref<SignalSet> createEmpty();
    static Ref<SignalSet> createFull();

    void insert(Signal signal);
    void remove(Signal signal);

    bool contains(Signal signal) const;

    sigset_t *rawSet() { return &rawSet_; }

    const sigset_t *rawSet() const { return &rawSet_; }

private:
    friend class Thread;
    friend class Singleton<SignalSet>;

    static Ref<SignalSet> create();

    enum class Preset { Empty, Full, Query };

    SignalSet(Preset preset = Preset::Query);
    sigset_t rawSet_;
};

} // namespace cc
