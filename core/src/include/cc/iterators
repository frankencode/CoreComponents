/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <iterator>
#include <cc/Object>

namespace cc {

template<class Container>
inline typename Container::const_iterator begin(const Container *c) { return c->begin(); }

template<class Container>
inline typename Container::const_iterator end(const Container *c) { return c->end(); }

template<class Container>
inline typename Container::iterator begin(Container *c) { return c->begin(); }

template<class Container>
inline typename Container::iterator end(Container *c) { return c->end(); }

template<class Container>
inline typename Container::const_iterator begin(const Ref<const Container> &c) { return c->begin(); }

template<class Container>
inline typename Container::const_iterator end(const Ref<const Container> &c) { return c->end(); }

template<class Container>
inline typename Container::iterator begin(Ref<Container> c) { return c->begin(); }

template<class Container>
inline typename Container::iterator end(Ref<Container> c) { return c->end(); }

template<class Container>
inline typename Container::const_iterator begin(Local<const Container> &c) { return c->begin(); }

template<class Container>
inline typename Container::const_iterator end(Local<const Container> &c) { return c->end(); }

template<class Container>
inline typename Container::iterator begin(Local<Container> &c) { return c->begin(); }

template<class Container>
inline typename Container::iterator end(Local<Container> &c) { return c->end(); }

} // namespace cc
