/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>

namespace cc {

enum Weekday {
    Sun = 0,
    Mon = 1,
    Tue = 2,
    Wed = 3,
    Thu = 4,
    Fri = 5,
    Sat = 6
};

enum {
    SecondsPerHour = 3600,
    SecondsPerDay  = 24 * SecondsPerHour
};

inline double hours(double n) { return n * SecondsPerHour; } ///< translate hours to seconds
inline double days(double n) { return n * SecondsPerDay; } ///< translate days to seconds

/** \class Date cc/Date
  * \ingroup misc
  * \brief Gregorian calendar dates
  */
class Date: public Object
{
public:
    /** Create an invalid date
      * \return new object instance
      */
    static Ref<Date> create() {
        return new Date;
    }

    /** Breakdown an Unix timestamp into a precise calendar date
      * \param time \copydoc time()
      * \param offset \copydoc offset()
      * \return new object instance
      * \see System::now()
      */
    static Ref<Date> breakdown(double time, int offset = 0) {
        return new Date(time, offset);
    }

    /** Compose a precise calendar date from its components
      * \param year \copydoc year()
      * \param month \copydoc month()
      * \param day \copydoc day()
      * \param hour \copydoc hour()
      * \param minutes \copydoc minutes()
      * \param seconds \copydoc seconds()
      * \param offset \copydoc offset()
      * \return new object instance
      */
    static Ref<Date> compose(int year, int month, int day, int hour = 0, int minutes = 0, int seconds = 0, int offset = 0) {
        return new Date(year, month, day, hour, minutes, seconds, offset);
    }

    /** Create a copy of another date object
      * \return new object instance
      */
    static Ref<Date> copy(const Date *other) { return new Date(*other); }

    /// false for Date::create(), true otherwise
    bool isValid() const { return time_ != cc::nan();}

    int year() const { return year_; } ///< year number since introduction of the calender (1, 2,..., 2020, etc.)
    int month() const { return month_; } ///< month number (1..12)
    int day() const { return day_; } ///< day of month (1..31)
    int weekDay() const { return weekDay_; } ///< day of the week (0..6)
    int yearDay() const { return yearDay_; } ///< day of the year (1..365)
    int hour() const { return hour_; } ///< current hour of the day (0..23)
    int minutes() const { return minutes_; } ///< current minutes (0..60)
    int seconds() const { return seconds_; } ///< current seconds (0..60)
    int offset() const { return offset_; } ///< timezone offset in hours

    double time() const; ///< seconds since 1st Jan 1970 00:00:00
    String toString() const; ///< convert this date object into a string representation

    String monthName() const; ///< name of the month ("Jan", "Feb", ..., "Dec")
    String dayName() const; ///< name of the weekday ("Sun", "Mon", ..., "Sat")

private:
    Date();
    Date(const Date &b);
    Date(double time, int offset);
    Date(int year, int month, int day, int hour, int minutes, int seconds, int offset);

    int year_;
    int month_;
    int day_;
    int weekDay_;
    int yearDay_;
    int hour_;
    int minutes_;
    int seconds_;
    int offset_;

    double time_;
};

} // namespace cc
