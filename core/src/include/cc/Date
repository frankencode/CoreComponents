/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>

namespace cc {

enum Weekday {
    Sun = 0,
    Mon = 1,
    Tue = 2,
    Wed = 3,
    Thu = 4,
    Fri = 5,
    Sat = 6
};

enum {
    SecondsPerHour = 3600,
    SecondsPerDay  = 24 * SecondsPerHour
};

inline double hours(double n) { return n * SecondsPerHour; } ///< translate hours to seconds
inline double days(double n) { return n * SecondsPerDay; } ///< translate days to seconds

/** \class Date cc/Date
  * \ingroup misc
  * \brief Calendar dates
  */
class Date
{
public:
    class Instance: public Object
    {
    public:
        bool isValid() const { return time_ != cc::nan();} ///< false for Date{}, true otherwise

        int year() const { return year_; } ///< year number since introduction of the calender (1, 2,..., 2020, etc.)
        int month() const { return month_; } ///< month number (1..12)
        int day() const { return day_; } ///< day of month (1..31)
        int weekDay() const { return weekDay_; } ///< day of the week (0..6)
        int yearDay() const { return yearDay_; } ///< day of the year (1..365)
        int hour() const { return hour_; } ///< current hour of the day (0..23)
        int minutes() const { return minutes_; } ///< current minutes (0..60)
        int seconds() const { return seconds_; } ///< current seconds (0..60)
        int offset() const { return offset_; } ///< timezone offset in hours

        double time() const; ///< seconds since 1st Jan 1970 00:00:00
        String toString() const; ///< convert this date object into a String representation

        String monthName() const; ///< name of the month ("Jan", "Feb", ..., "Dec")
        String dayName() const; ///< name of the weekday ("Sun", "Mon", ..., "Sat")

    private:
        friend class Date;
        friend class Cow;

        Instance();
        Instance(const Instance &b) = default;
        Instance(double time, int offset);
        Instance(int year, int month, int day, int hour, int minutes, int seconds, int offset);

        Ref<Instance> copy() { return new Instance{*this}; }

        int year_;
        int month_;
        int day_;
        int weekDay_;
        int yearDay_;
        int hour_;
        int minutes_;
        int seconds_;
        int offset_;

        double time_;
    };

    /** Create invalid Date
      */
    Date():
        instance_{new Instance}
    {}

    /** Breakdown Unix timestamp
      * \param time \copydoc Date::Instance::time()
      * \param offset \copydoc Date::Instance::offset()
      * \see System::now()
      */
    Date(double time, int offset = 0):
        instance_{new Instance{time, offset}}
    {}

    /** Compose a Date from calendar components
      * \param year \copydoc Date::Instance::year()
      * \param month \copydoc Date::Instance::month()
      * \param day \copydoc Date::Instance::day()
      * \param hour \copydoc Date::Instance::hour()
      * \param minutes \copydoc Date::Instance::minutes()
      * \param seconds \copydoc Date::Instance::seconds()
      * \param offset \copydoc Date::Instance::offset()
      */
    Date(int year, int month, int day, int hour = 0, int minutes = 0, int seconds = 0, int offset = 0):
        instance_{new Instance{year, month, day, hour, minutes, seconds, offset}}
    {}

    /** Member access
      * @{
      */
    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }
    /** @}
      */

    /** Explicit conversion to bool: true if Date is valid
      */
    explicit operator bool() const { return instance_; }

    /** Automatic conversion to double: return seconds since 1st Jan 1970 00:00:00
      */
    operator double() const { return instance_->time(); }

    /** Difference between two Dates: return difference in number of seconds
      */
    double operator-(const Date &other) const { return instance_->time_ - other.instance_->time_; }

    /** Comparism operators
      * @{
      */
    bool operator==(const Date &other) const { return instance_->time_ == other.instance_->time_; }
    bool operator!=(const Date &other) const { return instance_->time_ != other.instance_->time_; }
    bool operator<=(const Date &other) const { return instance_->time_ <= other.instance_->time_; }
    bool operator>=(const Date &other) const { return instance_->time_ >= other.instance_->time_; }
    bool operator< (const Date &other) const { return instance_->time_ <  other.instance_->time_; }
    bool operator> (const Date &other) const { return instance_->time_ >  other.instance_->time_; }
    /** @}
      */

private:
    Ref<Instance> instance_;
};

} // namespace cc
