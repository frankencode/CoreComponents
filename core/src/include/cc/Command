/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <sys/types.h> // pid_t
#include <spawn.h>
#include <cc/exceptions>
#include <cc/SignalSet>
#include <cc/EnvMap>
#include <cc/IoChannel>

namespace cc {

class Process;

/** \brief Sub-process process staging helper
  * \see Process
  */
class Command
{
public:
    class Instance: public Object
    {
    public:
        /** \brief Set command line arguments
          * \param args Argument list, first entry is the executable name
          * \return pointer to this object
          */
        Instance *setArgs(const StringList &args);

        /** \brief Set environment map
          * \param envMap The environment map to use for the new child process (or zero pointer to inherit the parents environment map)
          * \return pointer to this object
          */
        Instance *setEnvMap(const EnvMap &envMap);

        /** \brief Set the process group
          * \param groupId Group ID of the process group to join or 0 to make the new process lead a new group
          * \return pointer to this object
          */
        Instance *setProcessGroup(pid_t groupId = 0);

        /** \brief Set the signal mask
          * \param mask Initial signal mask for the new child process
          * \return pointer to this object
          */
        Instance *setSignalMask(const SignalSet *mask);

        /** \brief Reset signal handling strategy to the default for specific signals
          * \param set Set of signals to reset to default signal handling behavior
          * \return pointer to this object
          */
        Instance *setSignalDefault(const SignalSet *set);

        /** \brief Set initial working directory
          * \param path directory path
          * \return pointer to this object
          * \warning This method is not thread-safe on all platforms! This is especially true on glibc before v2.29.
          */
        Instance *setWorkingDirectory(const String &path);

        /** \brief Set standard input channel
          * \param channel IoChannel to use for standard input
          * \return pointer to this object
          * \see InputPipe
          */
        Instance *setInputChannel(IoChannel *channel);

        /** \brief Set standard output channel
          * \param channel IoChannel to use for standard output
          * \return pointer to this object
          * \see OutputPipe
          */
        Instance *setOutputChannel(IoChannel *channel);

        /** \brief Set standard error channel
          * \param channel IoChannel to use for standard error
          * \return pointer to this object
          * \see OutputPipe
          */
        Instance *setErrorChannel(IoChannel *channel);

        /** \brief Attach an I/O channel
          * \param channel IoChannel to attach
          * \param targetFd target file descriptor in the child's file descriptor table
          * \return pointer to this object
          */
        Instance *attachChannel(IoChannel *channel, int targetFd);

        /** \brief Set standard input
          * \param stream SystemStream to use for standard input
          * \return pointer to this objects
          */
        Instance *setInput(SystemStream *stream);

        /** \brief Set standard input
          * \param stream SystemStream to use for standard output
          * \return pointer to this objects
          */
        Instance *setOutput(SystemStream *stream);

        /** \brief Set standard input
          * \param stream SystemStream to use for standard error
          * \return pointer to this objects
          */
        Instance *setError(SystemStream *stream);

        /** \brief Attach an I/O stream
          * \param stream SystemStream to attach
          * \param targetFd target file descriptor in the child's file descriptor table
          * \return pointer to this object
          */
        Instance *attach(SystemStream *stream, int targetFd);

        /** \brief Convenience function to setup standard I/O redirection
          * \return pointer to this object
          */
        Instance *simpleRedirection();

    private:
        friend class Command;
        friend class Process;

        Instance(const String &command = String{});
        ~Instance();

        void startDone();

        void enableSpawnFlag(short flag);

        String command_;
        String execPath_;
        StringList args_;
        bool customEnvMap_ { false };
        EnvMap envMap_;

        int spawnFlags_ { 0 };
        posix_spawnattr_t spawnAttributes_;
        posix_spawn_file_actions_t fileActions_;
        bool groupLead_ { false };
        Ref<IoChannel> channelHead_;
        Ref<SystemStream> standardStreams_[3];

        #ifdef __GLIBC__
        #if __GLIBC_PREREQ(2, 29)
        #else
        String cwd_;
        #endif
        #endif
    };

    Command():
        instance_{new Instance}
    {}

    Command(const String &command):
        instance_{new Instance{command}}
    {}

    Command(const StringList &args):
        instance_{new Instance}
    {
        instance_->setArgs(args);
    }

    Instance *operator->() { return instance_; }

private:
    friend class Process;

    Ref<Instance> instance_;
};

} // namespace cc
