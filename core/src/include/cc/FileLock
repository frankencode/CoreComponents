/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <unistd.h>
#include <fcntl.h>
#include <cc/File>

namespace cc {

typedef struct flock FLockStruct;

/** \class FileLock cc/FileLock
  * \ingroup file_system
  * \brief Advisory file locks
  * \see Guard
  */
class FileLock
{
public:
    /// Type of file lock
    enum class Type {
        Read = F_RDLCK, ///< lock for reading
        Write = F_WRLCK ///< lock for writing
    };

    class Instance: public FLockStruct, public Object
    {
    public:
        /** Try to acquire the file lock
          * \return true if lock could be successfully acquired, otherwise false
          */
        bool tryAcquire();

        /// Wait and acquire lock
        void acquire();

        /// Release lock
        void release();

    private:
        friend class FileLock;

        Instance(File &file, Type type, off_t start, off_t length);

        int fd_;
    };

    /** Create a new advisory file lock
      * \param file file to apply the lock on
      * \param type type of lock
      * \param start start offset of the locked area
      * \param length length of the locked area
      */
    FileLock(File &file, Type type, off_t start = 0, off_t length = 0):
        instance_{new Instance{file, type, start, length}}
    {}

    Instance *operator->() { return instance_; }

private:
    Ref<Instance> instance_;
};

} // namespace cc
