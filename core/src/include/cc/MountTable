/*
 * Copyright (C) 2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/iterators>
#include <cc/String>

namespace cc {

/** \brief Read a filesystem mount table (fstab format)
  */
class MountTable: public Object
{
public:
    /** Open a filesystem mount table
      * \param path path to the filesystem table to read (defaults to the system's mtab, i.e. currently mounted filesystems)
      * \return new object instance
      */
    static Ref<MountTable> open(const String &path = "");

    /** Parse a mount table
      * \param text mount table in fstab format
      * \return new object instance
      */
    static Ref<MountTable> parse(const String &text);

    /** Filesystem table entry
      */
    class Entry: public Object
    {
        friend class Object;

    public:
        String source () const { return parts_->at(0); } ///< device (paritition device node, etc.)
        String target () const { return parts_->at(1); } ///< path to the mounted root of the filesystem
        String type   () const { return parts_->at(2); } ///< comma separated list of filesystem types
        String options() const { return parts_->at(3); } ///< comma separated list of mount options (key or key=value format)

        String toString() const { return parts_->join(" "); }

    private:
        Entry(const String &line);

        Ref<StringList> parts_;
    };

    typedef Ref<const Entry> Item;
    typedef int Index;

    /// number of table entries
    int count() const { return lines_->count(); }

    /// check if table index \a i is valid
    bool has(int i) const { return lines_->has(i); }

    /// get table entry at index \a i
    Ref<const Entry> at(int i) const { return Object::create<Entry>(lines_->at(i)); }

    /** \name Iterators
      * @{
      */
    typedef ConstArrayIterator<MountTable> ConstIterator;
    typedef ConstIterator Iterator;

    Iterator begin() { return Iterator{this, 0}; }
    Iterator end() { return Iterator{this, count()}; }
    ConstIterator begin() const { return ConstIterator{this, 0}; }
    ConstIterator end() const { return ConstIterator{this, count()}; }
    /** @}
      */

    /** \internal
      * @{
      */
    typedef Iterator iterator;
    typedef ConstIterator const_iterator;
    /** @}
      */

private:
    MountTable(const String &text);

    Ref<StringList> lines_;
};

} // namespace cc
