/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

namespace cc {

template<class Char, class Value>
class PrefixTree;

/** \class PrefixTreeWalker cc/PrefixTreeWalker
  */
template<class Char, class Value>
class PrefixTreeWalker
{
public:
    PrefixTreeWalker() {}

    /// prefix increment / decrement
    inline PrefixTreeWalker &operator++() {
        CC_ASSERT(valid());
        while (node_) {
            node_ = node_->next();
            if (node_)
                if (node_->defined_)
                    break;
        }
        return *this;
    }
    inline PrefixTreeWalker &operator+=(int delta) {
        while (delta > 0) {
            ++*this;
            --delta;
        }
        while (delta < 0) {
            --*this;
            ++delta;
        }
        return *this;
    }

    /// postfix increment / decrement
    inline PrefixTreeWalker operator++(int) {
        PrefixTreeWalker it = *this;
        ++(*this);
        return it;
    }

    inline PrefixTreeWalker operator+(int delta) const {
        PrefixTreeWalker it = *this;
        return it += delta;
    }

    inline bool operator==(const PrefixTreeWalker &b) const {
        return node_ == b.node_;
    }
    inline bool operator!=(const PrefixTreeWalker &b) const {
        return node_ != b.node_;
    }

private:
    friend class PrefixTree<Char, Value>;
    typedef PrefixTree<Char, Value> Node;

    PrefixTreeWalker(Node *node):
        node_(node)
    {}

    inline bool valid() const { return node_; }

    Node *node_;
};

} // namespace cc
