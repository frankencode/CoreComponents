/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>

namespace cc {

/** \brief Line output buffer
  */
class LineBuffer: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        Stream sink() const { return sink_; }
        virtual String prefix() const;

        int read(CharArray *data) override;
        void write(const CharArray *data) override;
        void write(const StringList &parts) override;

        int flush();

    protected:
        friend class LineBuffer;

        Instance(const Stream &sink, const String &prefix = "");

        virtual void writeLine(const CharArray *data);

    private:
        Stream sink_;
        String prefix_;
        StringList backlog_;
    };

    LineBuffer(const Stream &sink = Stream{}, const String &prefix = ""):
        Stream{new Instance{sink, prefix}}
    {}

    Instance *operator->() const { return my<Instance>(); }
    operator Instance *() const { return my<Instance>(); }

protected:
    LineBuffer(Instance *instance):
        Stream{instance}
    {}
};

} // namespace cc
