/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/List>

namespace cc {

class Variant;
class VariantInstance;

/** \class list cc/list
  * \ingroup container_highlevel
  * \brief %List data container
  * \tparam T item type
  */
template<class T>
class ListValue {
public:
    typedef List<T> Instance;

    typedef typename Instance::Item Item; ///< item type
    typedef typename Instance::Index Index; ///< index type
    typedef typename Instance::Iterator Iterator; ///< iterator type
    typedef typename Instance::ConstIterator ConstIterator; ///< constant iterator type

    typedef Item value_type; ///< \internal
    typedef Index size_type; ///< \internal
    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    ListValue():
        instance_{new Instance}
    {}

    ListValue(std::initializer_list<T> b):
        instance_{new Instance}
    {
        for (const auto &x: b) instance_->append(x);
    }

    ListValue(std::initializer_list<ListValue> b):
        instance_{b.begin()->instance_}
    {
        bool first = true;
        for (const auto &x: b) {
            if (first) { first = false; continue; }
            (*this)->appendList(x);
        }
    }

    ListValue(const ListValue &b):
        instance_{b.instance_}
    {}

    ListValue(ListValue &&b):
        instance_{std::move(b.instance_)}
    {}

    ListValue(Instance *b):
        instance_{b ? b : new Instance}
    {}

    ListValue &operator=(const ListValue &b) = default;

    ListValue &operator=(ListValue &&b) {
        instance_ = std::move(b.instance_);
        return *this;
    }

    ListValue &operator=(const Ref<Instance> &b) { // \todo make sure this is not needed
        instance_ = b;
        return *this;
    }

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }

    operator const Instance *() const { return instance_; }
    operator Instance *() { return Cow::get(instance_); }

    T &operator[](size_type i) { return Cow::get(instance_)->at(i); }
    const T &operator[](size_type i) const { return instance_->at(i); }

    ListValue &operator<<(const T& x) { *Cow::get(instance_) << x; return *this; }
    ListValue &operator>>(T& x) { if (instance_->count() > 0) *Cow::get(instance_) >> x; return *this; }

private:
    friend class Variant; // HACK
    friend class VariantInstance; // HACK
    operator Object *() const { return instance_; } // HACK

    explicit operator bool() const;
    // operator bool() const; \todo make it work

    Ref<Instance> instance_;
};

template<class T>
typename ListValue<T>::Index count(const ListValue<T> &a) { return a->count(); }

template<class T>
typename ListValue<T>::ConstIterator begin(const ListValue<T> &a) { return a->begin(); }

template<class T>
typename ListValue<T>::ConstIterator end(const ListValue<T> &a) { return a->end(); }

template<class T>
typename ListValue<T>::Iterator begin(ListValue<T> &a) { return a->begin(); }

template<class T>
typename ListValue<T>::Iterator end(ListValue<T> &a) { return a->end(); }

template<class T>
bool operator==(const ListValue<T> &a, const ListValue<T> &b) { return container::compare(a, b) == 0; }

template<class T>
bool operator!=(const ListValue<T> &a, const ListValue<T> &b) { return container::compare(a, b) != 0; }

template<class T>
bool operator<(const ListValue<T> &a, const ListValue<T> &b) { return container::compare(a, b) < 0; }

template<class T>
bool operator>(const ListValue<T> &a, const ListValue<T> &b) { return container::compare(a, b) > 0; }

template<class T>
bool operator<=(const ListValue<T> &a, const ListValue<T> &b) { return container::compare(a, b) <= 0; }

template<class T>
bool operator>=(const ListValue<T> &a, const ListValue<T> &b) { return container::compare(a, b) >= 0; }

} // namespace cc
