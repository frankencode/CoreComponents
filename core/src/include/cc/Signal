/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Queue>
#include <functional>

namespace cc {

class Signal
{
public:
    class Instance {
    public:
        template<class F>
        void connect(const F &f) { queue_ << f; }

        void emit() const { for (auto &f: queue_) f(); }

        bool hasListeners() const { return queue_->count() > 0; }
        void disband() { queue_->deplete(); }

    private:
        friend class Signal;
        friend class PropertyBinding;

        Instance() = default;

        Queue<std::function<void()>> queue_;
    };

    Signal() = default;

    template<class F>
    Signal &operator>>(const F &f) { (*this)->connect(f); return *this; }

    void operator()() const { (*this)->emit(); }

    Instance *operator->() { return &instance_; }
    const Instance *operator->() const { return &instance_; }

private:
    Instance instance_;
};

} // namespace cc
