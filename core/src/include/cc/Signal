/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Exception>
#include <signal.h>

namespace cc {

/** System signal numbers
  * \ingroup concurrency
  */
enum class Signal: int {
    Abort       = SIGABRT, ///< %Abort signal (e.g. assert failed)
    Alarm       = SIGALRM, ///< %Timer signal
    Bus         = SIGBUS, ///< %Memory protection violation
    Child       = SIGCHLD, ///< %Child stopped or terminated
    FPE         = SIGFPE, ///< Floating Point %Exception
    HangUp      = SIGHUP, ///< Terminal hangup (Ctrl-D)
    Interrupt   = SIGINT, ///< Interactive termination request (Ctrl-C)
    Kill        = SIGKILL, ///< Forceful process termination
    Pipe        = SIGPIPE, ///< Broken Pipe
    Quit        = SIGQUIT, ///< Interactive quit request (Ctrl-Q)
    SegV        = SIGSEGV, ///< %Memory protection violation
    Stop        = SIGSTOP, ///< Stop process execution
    Continue    = SIGCONT, ///< Continue process execution
    Terminate   = SIGTERM, ///< Graceful process termination
    User1       = SIGUSR1, ///< %User signal 1
    User2       = SIGUSR2, ///< %User signal 2
    WindowSize  = SIGWINCH, ///< %Window size changed
    Undefined   = 0 ///< %Undefined signal
};

inline int operator+(Signal signal) { return static_cast<int>(signal); }

/** Convert signal number to string
  */
String str(Signal signal);

/** \class Signaled cc/Signal
  * \ingroup concurrency
  * \brief %Thread execution interrupted by system signal
  */
class Signaled: public Exception
{
public:
    /** Create a new exception
      */
    explicit Signaled(Signal signal);

    /** %Signal number
      */
    Signal signal() const { return signal_; }

    String message() const override;

private:
    Signal signal_;
};

} // namespace cc
