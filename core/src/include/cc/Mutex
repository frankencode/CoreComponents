/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <pthread.h>
#include <cc/Object>
#include <cc/Guard>

namespace cc {

class WaitCondition;

/** \class Mutex cc/Mutex
  * \ingroup concurrency
  * \brief %Thread synchronization primitive: mutual exclusive access
  * \see Guard
  */
class Mutex
{
public:
    class Instance {
    public:
        /** Try to lock this mutex
          * \return true if this mutex was not already locked, false otherwise
          */
        bool tryAcquire();

        /// Lock this mutex
        void acquire();

        /// Release this mutex
        void release();

    private:
        friend class Mutex;
        friend class WaitCondition;

        Instance();
        ~Instance();

        pthread_mutex_t mutex_;
    };

    /** \brief Create a new mutex
      */
    Mutex() = default;

    Instance *operator->() const { return const_cast<Instance *>(&instance_); }

private:
    Mutex(const Mutex&) = delete;
    Mutex& operator=(const Mutex&) = delete;

    Instance instance_;
};

template<>
class Guard<Mutex>
{
public:
    Guard(const Mutex &mutex): mutex_{mutex} { mutex_->acquire(); }
    ~Guard() { mutex_->release(); }

private:
    const Mutex &mutex_;
};

} // namespace cc
