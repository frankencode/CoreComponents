/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>

namespace cc {

/** \brief %Transfer measuring stream
  * \see Transfer
  */
class TransferMeter: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        off_t totalRead() const { return totalRead_; }
        off_t totalWritten() const { return totalWritten_; }

        int read(CharArray *buf) override;
        void write(const CharArray *buf) override;
        void write(const StringList &parts) override;

    private:
        friend class TransferMeter;

        Instance(const Stream &stream);

        Stream stream_;
        off_t totalRead_;
        off_t totalWritten_;
    };

    TransferMeter() = default;

    TransferMeter(const Stream &stream):
        Stream{new Instance{stream}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

} // namespace cc
