/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bucket>

namespace cc {

template<class T>
class BucketSet: public Object
{
public:
    typedef bucket::Weight Index;
    typedef T Item;

    static Ref<BucketSet> create() { return new BucketSet; }

    static Ref<BucketSet> replicate(const BucketSet *other) { return new BucketSet{other}; }

    Index count() const { return tree_->count(); }

    bool has(Index index) const {
        return 0 <= index && index < count();
    }

    const Item &at(Index index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    template<class Pattern>
    bool lookup(const Pattern &pattern, Index *finalIndex = nullptr) const
    {
        return tree_->lookup<Item>(pattern, finalIndex);
    }

    bool contains(const Item &item) const
    {
        return tree_->lookup<Item>(item);
    }

    bool insert(const Item &item, Index *index = nullptr)
    {
        bool success = false;
        bucket::Leaf<Item> *target = nullptr;
        unsigned egress = 0;
        if (!tree_->lookup<Item>(item, index, &target, &egress)) {
            tree_->push<Item>(target, egress, item);
            success = true;
        }
        return success;
    }

    template<class Pattern>
    bool remove(const Pattern &pattern)
    {
        bool success = false;
        Index index;
        if (lookup(pattern, &index)) {
            tree_->pop<Item>(index);
            success = true;
        }
        return success;
    }

    /** \name iterators
      * @{
      */
    typedef bucket::ConstIterator<Item> const_iterator;

    const_iterator begin() { return bucket::ConstIterator<Item>{tree_}; }
    const_iterator end() { return bucket::ConstIterator<Item>{}; }
    const_iterator begin() const { return bucket::ConstIterator<Item>{tree_}; }
    const_iterator end() const { return bucket::ConstIterator<Item>{}; }

    template<class Pattern>
    const_iterator first(const Pattern &pattern) {
        Index index = 0;
        bucket::Leaf<Item> node = nullptr;
        unsigned egress = 0;
        tree_->lookupFirst(pattern, &index, &node, &egress);
        return bucket::ConstIterator<Item>{tree_, index, node, egress};
    }

    template<class Pattern>
    const_iterator last(const Pattern &pattern) {
        Index index = 0;
        bucket::Leaf<Item> node = nullptr;
        unsigned egress = 0;
        tree_->lookupLast(pattern, &index, &node, &egress);
        return bucket::ConstIterator<Item>{tree_, index, node, egress};
    }
    /** @}
      */

    const Item &first() const { return tree_->first<Item>(); }
    const Item &last() const { return tree_->last<Item>(); }

    void deplete() { tree_->deplete<Item>(); }

private:
    friend class bucket::Internals;
    friend class Local<BucketSet>;

    BucketSet() = default;

    BucketSet(const BucketSet *other)
    {
        tree_->populate<Item>(other);
    }

    ~BucketSet() { tree_->deplete<Item>(); }

    Local<bucket::Tree> tree_;
};

} // namespace cc
