/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Queue>
#include <functional>

namespace cc {

template<class T>
class Event
{
public:
    class Instance {
    public:
        void connect(const std::function<bool(T)> &f)
        {
            queue_->pushFront(f);
        }

        void connect(const std::function<void()> &f)
        {
            connect([=](T){
                f();
                return false;
            });
        }

        bool propagate(const T &value) const
        {
            for (auto &f: queue_) {
                if (f(value)) return true;
            }
            return false;
        }

        bool hasConsumers() const { return queue_->count() > 0; }
        void disband() { queue_->deplete(); }

    private:
        friend class Event;

        Instance() = default;

        Queue<std::function<bool(T)>> queue_;
    };

    Event() = default;

    template<class F>
    Event &operator>>(const F &f) { (*this)->connect(f); return *this; }

    bool operator()(const T &value) const { return (*this)->propagate(value); }

    Instance *operator->() { return &instance_; }
    const Instance *operator->() const { return &instance_; }

private:
    Instance instance_;
};

} // namespace cc
