/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <iterator>

namespace cc {

/** \class utf8_iterator cc/utf8_iterator
  * \ingroup unicode
  * \brief Iterate code points of an UTF-8 encoded string
  *
  * The utf8_iterator allows iterating %Unicode characters of an UTF-8 byte sequence.
  * The iterator will always halt at the string boundaries. If stepping over the string boundary
  * the iterator will switch to bool(iterator) == false and start delivering zero code points.
  *
  * If placed at a string's terminating zero character it is possible to step backwards
  * into the string.
  *
  * Illegal code sequences are overrun without error. In forward iteration corrupted code prefixes
  * may lead to at maximum one correct character overrun and up to 3 additional corrupt characters
  * delivered. Any bit error outside the code prefixes will lead to at most one illegal character
  * delivered -- with one exception: Switching to all bits zero. A zero byte is always string
  * terminating.
  */
class utf8_iterator:
    public std::iterator<
        /*iterator_category*/ std::bidirectional_iterator_tag,
        /*value_type*/        char32_t,
        /*difference_type*/   ssize_t,
        /*pointer*/           void,
        /*reference*/         char32_t
    >
{
public:
    /** Create an invalid iterator
      */
    utf8_iterator():
        s_{nullptr},
        e_{nullptr},
        p_{nullptr}
    {}

    /** Create a new iterator
      * \param start byte string start
      * \param end byte string end (points to behind last valid byte)
      * \param pos position in byte string
      */
    utf8_iterator(const char *start, const char *end, const char *pos):
        s_{reinterpret_cast<const uint8_t *>(start)},
        e_{reinterpret_cast<const uint8_t *>(end)},
        p_{reinterpret_cast<const uint8_t *>(pos)}
    {}

    utf8_iterator(const utf8_iterator &b) = default;

    /** prefix increment: step one code point forward
      */
    utf8_iterator &operator++()
    {
        uint8_t ch = *p_;
        if (ch) {
            ++p_;
            // step forwards shifting out all prefix bits of first byte
            while ((0xBF < ch) && (p_ < e_)) {
                ch <<= 1;
                ++p_;
            }
        }
        return *this;
    }

    /** prefix decrement: step one code point backward
      */
    utf8_iterator &operator--()
    {
        if (s_ < p_) {
            --p_;
            // step backwards while code prefix equals (10)2
            while ((s_ < p_) && ((*p_ & 0xC0) == 0x80)) --p_;
        }
        else {
            // underflow to the end of the byte sequence
            p_ = e_;
        }
        return *this;
    }

    /** postfix increment: step one code point forward and return old position
      */
    utf8_iterator operator++(int) {
        utf8_iterator it = *this;
        ++(*this);
        return it;
    }

    /** postfix decrement: step one code point backward and return old position
      */
    utf8_iterator operator--(int) {
        utf8_iterator it = *this;
        --(*this);
        return it;
    }

    /** assignment addition: iterate in forward direction a given distance \a d
      */
    utf8_iterator &operator+=(ssize_t d) {
        while (d > 0) { ++(*this); --d; }
        while (d < 0) { --(*this); ++d; }
        return *this;
    }

    /** assignment substraction: iterate in backward direction a given distance \a d
      */
    utf8_iterator &operator-=(ssize_t d) {
        while (d > 0) { --(*this); --d; }
        while (d < 0) { ++(*this); ++d; }
        return *this;
    }

    /** addition: get iterator in forward direction at distance \a d
      */
    utf8_iterator operator+(ssize_t d) const {
        utf8_iterator it = *this;
        return it += d;
    }

    /** substraction: get iterator in backward direction at distance \a d
      */
    utf8_iterator operator-(ssize_t d) const {
        utf8_iterator it = *this;
        return it -= d;
    }

    /** difference: compute distance in number of characters
      */
    ssize_t operator-(const utf8_iterator &b) const
    {
        ssize_t n = 0;
        if (s_ == b.s_) {
            if (p_ <= b.p_) {
                utf8_iterator w{*this};
                while (w.p_ != b.p_) {
                    ++w;
                    --n;
                }
            }
            else
                n = -(b - *this);
        }
        return n;
    }

    /** cast to bool: indicate if this iterator can step forward another code point
      */
    explicit operator bool() const { return p_ < e_; }

    /** dereference: decode current code point
      */
    char32_t operator*() const
    {
        char32_t ch = 0;
        if (p_ < e_) {
            // merging extra bytes by incrementally reducing the code prefix of the first byte
            // prefix bits => extra bytes: (110)2 => 1 eb, (1110)2 => 2 eb, (11110)2 => 3 eb
            ch = *p_;
            if (0x7F < ch) {
                const uint8_t *p = p_;
                char32_t bit = 0x80;
                ch ^= bit; // clear first prefix bit
                bit >>= 1; // take next prefix bit
                while (((ch & bit) != 0) && (p < e_)) { // yet another prefix bit?
                    ch ^= bit; // clear prefix bit of first byte
                    ch <<= 6; // make space
                    bit <<= 5; // take next prefix bit
                    ch |= (*(++p)) & 0x3F; // merge code bits
                }
            }
        }
        return ch;
    }

    /** plus sign: return the current decoding position as a byte offset
      */
    size_t operator+() const { return static_cast<size_t>(p_ - s_); }

    /** compare for equality
      */
    bool operator==(const utf8_iterator &b) const { return p_ == b.p_; }

    /** compare for in-equality
      */
    bool operator!=(const utf8_iterator &b) const { return p_ != b.p_; }

private:
    const uint8_t *s_;
    const uint8_t *e_;
    const uint8_t *p_;
};

} // namespace cc
