/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/assert>
#include <cc/Format>

namespace cc {

template<class T, int n>
class Vector
{
public:
    typedef T Item;
    typedef int Index;

    Vector() {}
    Vector(const Vector &b): instance_(b.instance_) {}
    Vector(std::initializer_list<T> l): instance_(l) {}

    class Instance {
    public:
        typedef T Item;

        inline bool has(int i) const { return 0 <= i && i < n; }
        inline T &at(int i) { CC_ASSERT(has(i)); return v_[i]; }
        inline T at(int i) const { CC_ASSERT(has(i)); return v_[i]; }

        inline T x() const { return at(0); }
        inline T y() const { return at(1); }
        inline T z() const { return at(2); }
        inline T s() const { return at(3); }

        inline T w() const { return at(0); }
        inline T h() const { return at(1); }

    private:
        friend class Vector;
        Instance(): v_{} {}
        Instance(std::initializer_list<T> l) {
            int i = 0;
            for (auto b: l) {
                CC_ASSERT(i < n);
                v_[i++] = b;
            }
        }
        T v_[n];
    };

    inline const Instance *operator->() const { return &instance_; }
    inline Instance *operator->() { return &instance_; }

    inline T &operator[](int i) { return instance_.at(i); }
    inline T operator[](int i) const { return instance_.at(i); }

    inline operator const T *() const { return &instance_.v_; }
    inline operator T *() { return &instance_.v_; }

    /*inline Vector &operator=(const Vector &b) {
        for (int i = 0; i < n; ++i)
            instance_.v_[i] = b.instance_.v_[i];
        return *this;
    }*/

    inline bool operator==(const Vector &b) const {
        for (int i = 0; i < n; ++i)
            if (instance_.v_[i] != b.instance_.v_[i]) return false;
        return true;
    }
    inline bool operator!=(const Vector &b) const {
        for (int i = 0; i < n; ++i)
            if (instance_.v_[i] != b.instance_.v_[i]) return true;
        return false;
    }

    inline Vector operator-() const {
        Vector a(*this);
        for (int i = 0; i < n; ++i) a.instance_.v_[i] = -instance_.v_[i];
        return a;
    }

    inline Vector &operator+=(const Vector &b) {
        for (int i = 0; i < n; ++i) instance_.v_[i] += b.instance_.v_[i];
        return *this;
    }
    inline Vector &operator-=(const Vector &b) {
        for (int i = 0; i < n; ++i) instance_.v_[i] -= b.instance_.v_[i];
        return *this;
    }
    inline Vector &operator*=(T b) {
        for (int i = 0; i < n; ++i) instance_.v_[i] *= b;
        return *this;
    }
    inline Vector &operator/=(T b) {
        for (int i = 0; i < n; ++i) instance_.v_[i] /= b;
        return *this;
    }

    inline Vector operator+(const Vector &b) const { return Vector(*this) += b; }
    inline Vector operator-(const Vector &b) const { return Vector(*this) -= b; }
    inline Vector operator*(T b) const { return Vector(*this) *= b; }
    inline Vector operator/(T b) const { return Vector(*this) /= b; }

    /** C++ iterator declarations
      * @{
      */
    typedef ConstIterator<Instance> const_iterator;
    typedef Iterator<Instance> iterator;
    iterator begin() { return iterator(&instance_, 0); }
    iterator end() { return iterator(&instance_, n); }
    const_iterator begin() const { return const_iterator(&instance_, 0); }
    const_iterator end() const { return const_iterator(&instance_, n); }
    /** @} */

private:
    Instance instance_;
};

template<class T, int n>
String str(const Vector<T, n> &v)
{
    Format f;
    f << "( ";
    for (auto x: v) f << x << " ";
    f << ")";
    return f;
}

} // namespace cc
