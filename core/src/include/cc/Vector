/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/assert>
#include <cc/vectors>

namespace cc {

template<class T, int N>
class Vector
{
public:
    typedef T Item;
    typedef int Index;

    static constexpr int Count = N;

    Vector() {}
    Vector(std::initializer_list<T> l): instance_{l} {}
    Vector(const Vector &b): instance_{b.instance_} {}
    Vector(T b): Vector{b} {}

    class Instance {
    public:
        typedef T Item;

        bool has(int i) const { return 0 <= i && i < N; }
        T &at(int i) { CC_ASSERT(has(i)); return v_[i]; }
        T at(int i) const { CC_ASSERT(has(i)); return v_[i]; }

        static constexpr int count() { return N; }

    private:
        friend class Vector;
        Instance(): v_{} {}
        Instance(std::initializer_list<T> l) {
            for (int i = 0; true;) {
                for (auto b: l) {
                    if (i == N) return;
                    v_[i++] = b;
                }
            }
        }
        T v_[N];
    };

    const Instance *operator->() const { return &instance_; }
    Instance *operator->() { return &instance_; }

    T &operator[](int i) { return instance_.at(i); }
    T operator[](int i) const { return instance_.at(i); }

    operator const T *() const { return &instance_.v_; }
    operator T *() { return &instance_.v_; }

    bool operator==(const Vector &b) const {
        for (int i = 0; i < N; ++i)
            if (instance_.v_[i] != b.instance_.v_[i]) return false;
        return true;
    }
    bool operator!=(const Vector &b) const {
        for (int i = 0; i < N; ++i)
            if (instance_.v_[i] != b.instance_.v_[i]) return true;
        return false;
    }

    Vector operator-() const {
        Vector a(*this);
        for (int i = 0; i < N; ++i) a.instance_.v_[i] = -instance_.v_[i];
        return a;
    }

    Vector &operator+=(const Vector &b) {
        for (int i = 0; i < N; ++i) instance_.v_[i] += b.instance_.v_[i];
        return *this;
    }
    Vector &operator-=(const Vector &b) {
        for (int i = 0; i < N; ++i) instance_.v_[i] -= b.instance_.v_[i];
        return *this;
    }
    Vector &operator*=(const Vector &b) {
        for (int i = 0; i < N; ++i) instance_.v_[i] *= b.instance_.v_[i];
        return *this;
    }
    Vector &operator/=(const Vector &b) {
        for (int i = 0; i < N; ++i) instance_.v_[i] /= b.instance_.v_[i];
        return *this;
    }
    Vector &operator*=(T b) {
        for (int i = 0; i < N; ++i) instance_.v_[i] *= b;
        return *this;
    }
    Vector &operator/=(T b) {
        for (int i = 0; i < N; ++i) instance_.v_[i] /= b;
        return *this;
    }

    Vector operator+(const Vector &b) const { return Vector(*this) += b; }
    Vector operator-(const Vector &b) const { return Vector(*this) -= b; }
    Vector operator*(const Vector &b) const { return Vector(*this) *= b; }
    Vector operator/(const Vector &b) const { return Vector(*this) /= b; }
    Vector operator*(T b) const { return Vector(*this) *= b; }
    Vector operator/(T b) const { return Vector(*this) /= b; }

    /** \name C++ iterators
      * @{
      */
    typedef ConstIterator<Instance> const_iterator;
    typedef Iterator<Instance> iterator;
    iterator begin() { return iterator(&instance_, 0); }
    iterator end() { return iterator(&instance_, N); }
    const_iterator begin() const { return const_iterator(&instance_, 0); }
    const_iterator end() const { return const_iterator(&instance_, N); }
    /** @}
      */

private:
    Instance instance_;
};

template<class S, class T, int N>
inline Vector<T, N> operator*(S a, const Vector<T, N> &b) { return b * T(a); }

} // namespace cc
