/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <string.h>
#include <cc/string>
#include <cc/utf16_iterator>

namespace cc {

/** \brief Read %Unicode code points from an UTF-16 encoded string
  */
class utf16 {
public:
    typedef utf16_iterator const_iterator;
    typedef utf16_iterator iterator;

    /** Return encoded size of code point \a ch
      */
    static int encoded_size(char32_t ch)
    {
        return 2 * (1 + (0xFFFF < ch));
    }

    class Instance {
    public:
        Instance(const uint16_t *s, size_t n):
            s_{s},
            n_{n}
        {}

        Instance(const string &s):
            s_{s->halfs()},
            n_{static_cast<size_t>(s->count()) / 2}
        {}

        const_iterator begin() const { return utf16_iterator{s_, s_ + n_, s_      }; }
        const_iterator end  () const { return utf16_iterator{s_, s_ + n_, s_ + n_ }; }

        iterator begin() { return utf16_iterator{s_, s_ + n_, s_      }; }
        iterator end  () { return utf16_iterator{s_, s_ + n_, s_ + n_ }; }

        /// Count number of code points
        size_t count() const {
            size_t n = 0;
            for (auto it = begin(); it; ++it) ++n;
            return n;
        }

    private:
        const uint16_t *s_;
        size_t n_;
    };

    utf16(const uint16_t *s, size_t n):
        instance_{s, n}
    {}

    utf16(const string &s):
        instance_{s}
    {}

    Instance *operator->() { return &instance_; }
    const Instance *operator->() const { return &instance_; }

private:
    Instance instance_;
};

/// Count number of code points
inline size_t count(const utf16 &u) { return u->count(); }

inline utf16::const_iterator begin(const utf16 &u) { return u->begin(); }
inline utf16::const_iterator end(const utf16 &u) { return u->end(); }
inline utf16::iterator begin(utf16 &u) { return u->begin(); }
inline utf16::iterator end(utf16 &u) { return u->end(); }

} // namespace cc
