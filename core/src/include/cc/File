/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <cc/files>
#include <cc/String>
#include <cc/SystemStream>
#include <cc/FileStatus>

namespace cc {

class MappedByteArray;

/** \class File cc/File
  * \ingroup file_system
  * \brief Handle files
  * \see FileStatus, UnlinkGuard, Dir
  */
class File: public SystemStream
{
public:
    /** Open a file
      * \param path file path
      * \param flags file open flags
      * \param mode file permissions for new file (optional)
      * \return new object instance
      */
    static Ref<File> open(const String &path, FileOpen flags = FileOpen::ReadOnly, FileMode mode = FileMode::Default);

    /** Try to %open a file
      * \copydetails open()
      */
    static Ref<File> tryOpen(const String &path, FileOpen flags = FileOpen::ReadOnly, FileMode mode = FileMode::Default);

    /** Open a temporary file
      * \param flags file open flags
      * \return new object instance
      * \see UnlinkGuard, File::createUnique()
      */
    static Ref<File> openTemp(FileOpen flags = FileOpen::ReadWrite);

    /// %File path this file was opened from
    String path() const;

    /** Truncate or extend file
      * \param length new file length
      */
    void truncate(off_t length);

    /** Set/get file offset
      * \param distance relative distance to move the file offset
      * \param method from which point to apply the seek distance
      * \return new file offset
      */
    off_t seek(off_t distance, Seek method = Seek::Begin);

    /// Query if this file is seekable (e.g. character devices aren't seekable)
    bool seekable() const { return isSeekable(); } // FIXME: obsolete

    /// Query if this file is seekable (e.g. character devices aren't seekable)
    bool isSeekable() const;

    /// Current file offset
    off_t fileOffset() { return seek(0, Seek::Begin); }

    virtual off_t transferSpanTo(off_t count = -1, Stream *sink = nullptr, CharArray *buf = nullptr) override;

    /// %Map the entire file into memory and return the file mapping as String
    String map() const;

    /// Synchronise the files's state with the underlying storage device
    void sync();

    /// Same as sync() but synchronize the file's contents, only
    void dataSync();

    /** Test file access permissions
      * \param path file path to test
      * \param flags a combination of cc::Access
      * \return true if accessible
      */
    static bool checkAccess(const String &path, FileAccess flags);

    /** Check if a file exists
      * \param path file path
      * \return true if file exists
      */
    static bool exists(const String &path) { return (path != "") && checkAccess(path, FileAccess::Exists); }

    /** Create a new file
      * \param path file path
      * \param mode file permissions for new file, a combination of cc::FileMode
      */
    static void create(const String &path, int mode = 0644);

    /** Change ownership of the file
      * \param path file path
      * \param ownerId user id of new owner
      * \param groupId one of the new owner's group ids
      * \see User, Group
      */
    static void chown(const String &path, uid_t ownerId, gid_t groupId);

    /** Rename file
      * \param path old file path
      * \param newPath new file path
      */
    static void rename(const String &path, const String &newPath);

    /** Create a new directory entry for this file
      * \param path file path
      * \param newPath file path to new directory entry
      * \see FileStatus::numberOfHardLinks()
      */
    static void link(const String &path, const String &newPath);

    /** Delete a directory entry associated with a non-directory file
      * \param path file path
      * \see UnlinkGuard, Dir::remove()
      */
    static void unlink(const String &path);

    /** Create a symbolic link special file
      * \param targetPath file path to link to
      * \param newPath file path of new symbolic link special file
      */
    static void symlink(const String &targetPath, const String &newPath);

    /** Read a contents of a symbolic link special file
      * \param path file path
      * \return symbolic link target path
      */
    static String readlink(const String &path);

    /** Fully resolve a symbolic link chain
      * \return final target path
      */
    static String resolve(const String &path);

    /** Create a uniquely named file
      * \param path file path
      * \param mode file permissions for new file, a combination of cc::FileMode
      * \param placeHolder place holder character in path to replace with random characters
      * \return name of the newly created file
      * \see File::openTemp()
      */
    static String createUnique(const String &path, int mode = 0644, char placeHolder = '#');

    /** Create a new file and all parent directories as needed
      * \param path file path of new file
      * \param fileMode file permissions for new file, a combination of cc::FileMode
      * \param dirMode directory permissions for the on-demand created parent directories
      */
    static void establish(const String &path, int fileMode = 0644, int dirMode = 0755);

    /** Cleanup files recursively
      * \param path path to directory or file
      * Cleans up the given path recursively deleting all files and directories in the process.
      */
    static void clean(const String &path);

    /** Search for a file in a list of directories
      * \param fileName name of the file (or relative path)
      * \param dirs list of directories
      * \param accessFlags file access flags to check
      * \return file path if found else empty string
      */
    static String locate(const String &fileName, const StringList *dirs, FileAccess accessFlags = FileAccess::Exists);

    /** Load contents of a file
      * \param path file path
      * \return contents of file
      */
    static String load(const String &path);

    /** Replace contents of a file
      * \param path file path
      * \param text new file'a contents
      */
    static void save(const String &path, const String &text);

private:
    friend class MappedByteArray;

    static int translateOpenFlags(int openMode);

    File(const String &path, FileOpen openMode, int fd);

    static void unmap(CharArray *s);

    String path_;
    FileOpen openFlags_;
};

} // namespace cc
