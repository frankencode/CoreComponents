/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/IoStream>
#include <cc/exceptions>
#include <cc/files>

namespace cc {

/** \class File cc/File
  * \ingroup file_system
  * \brief %File I/O streams
  */
class File: public IoStream
{
public:
    /** Check if file under \a path is accessible with \a mode
      */
    static bool access(const String &path, FileAccess mode);

    /** Check if a file under \a path exists
      */
    static bool exists(const String &path);

    /** Create a new file under \a path with initial permissions \a mode
      */
    static void create(const String &path, FileMode mode = FileMode::Default);

    /** Establish a new file path
      * \param path File path of new file
      * \param fileMode Initial file permissions
      * \param dirMode Initial directory permissions
      */
    static void establish(const String &path, FileMode fileMode = FileMode::Default, FileMode dirMode = FileMode::DirDefault);

    /** Create a uniquely named file
      * \param path File path pattern
      * \param mode Initial file permissions
      * \param placeHolder Place holder character in \a path to be replaced with random characters
      * \return File path to the newly created file
      */
    static String createUnique(const String &path, FileMode mode = FileMode::Default, char placeHolder = '#');

    /** Create a temporary file and return its path
      * \param mode Initial file permissions
      * \return File path of the newly created file
      */
    static String createTemp(FileMode mode = FileMode::Default);

    /** Change ownership of file under \a path to \a ownerId : \a groupId
      */
    static void chown(const String &path, uid_t ownerId, gid_t groupId);

    /** Rename file under \a oldPath to \a newPath (moving it within the filesystem if required)
      * \warning An exiting file under \a newPath will be automatically deleted.
      */
    static void rename(const String &oldPath, const String &newPath);

    /** Create a new name \a newPath for the file under \a oldPath
      */
    static void link(const String &oldPath, const String &newPath);

    /** Delete the name \a path
      */
    static void unlink(const String &path);

    /** Create a symbolic link under \a newPath pointing to \a oldPath
      */
    static void symlink(const String &oldPath, const String &newPath);

    /** Read the symbolic link under \a path
      */
    static String readlink(const String &path);

    /** Remove files recursively
      * \param path Path to directory or file
      *
      * Cleans up the given path recursively deleting all files and directories in the process.
      */
    static void clean(const String &path);

    /** Search for a file in a list of directories
      * \param fileName Name or relative path of the file
      * \param dirs List of directories search in
      * \param accessFlags File access flags to check
      * \return File path if file was found
      */
    static String locate(const String &fileName, const List<String> &dirs, FileAccess accessFlags = FileAccess::Exists);

    /** Load contents of file under \a path
      */
    static String load(const String &path);

    /** Replace contents of file under \a path by \a text
      */
    static void save(const String &path, const String &text);

    /** Create invalid file
      */
    File() = default;

    /** Open file
      * \param path File path
      * \param flags File open flags
      * \param mode File permissions for new file (optional)
      */
    explicit File(const String &path, FileOpen flags = FileOpen::ReadOnly, FileMode mode = FileMode::Default);

    /** %File path this file was opened from
      */
    String path() const { return me().path_; }

    /** Truncate or extend file to \a length bytes
      */
    void truncate(off_t length);

    /** Move the current file offset
      * \param distance Relative distance to move the file offset
      * \param whence From which point to apply the seek distance
      * \return New file offset
      */
    off_t seek(off_t distance, Seek whence = Seek::Begin);

    /** Check if this file is seekable (e.g. character devices aren't seekable)
      */
    bool isSeekable() const;

    /** Get current file offset
      */
    off_t currentOffset() const;

    /** Synchronise the files's state with the underlying storage device
      */
    void sync();

    /** Synchronise the files's content with the underlying storage device
      */
    void dataSync();

    /** Read the file's entire contents
      */
    String readAll();

    /** %Map the file's entire contents into memory
      */
    String map();

    /** %Map the file's contents in range [\a i0, \a i1) into memory
      */
    String map(off_t i0, off_t i1);

    /** Close file
      */
    void close();

private:
    struct State: public IoStream::State
    {
        State(int fd, const String &path, FileOpen flags):
            IoStream::State{fd},
            path_{path},
            flags_{flags}
        {}

        ~State()
        {
            if ((flags_ & FileOpen::Temporary) && path_ != "")
                File::unlink(path_);
        }

        long long transferTo(const Stream &sink, long long count, const Bytes &buffer) override;

        String path_;
        FileOpen flags_;
    };

    explicit File(State *newState):
        IoStream{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespac cc
