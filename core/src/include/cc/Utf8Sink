/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/exceptions>
#include <cc/ByteSink>

namespace cc {

/** \class Utf8Sink cc/Utf8Sink
  * \ingroup unicode
  * \brief %Unicode UTF-8 encoding data sink
  */
class Utf8Sink: public Object
{
public:
    class Instance
    {
    public:
        /** Write an %Unicode character
          * \param ch %Unicode character
          * \exception UnicodeError
          */
        void write(uchar_t ch);

        /// Return the total number of byte written
        off_t bytesWritten() const { return byteSink_->currentOffset(); }

    private:
        friend class Utf8Sink;

        Instance(const Stream &stream, CharArray* buffer):
            byteSink_{stream, buffer}
        {}

        class SurrogatePairEncodingError: public UnicodeError {
        public:
            String message() const override;
        };

        class NonCharacterEncodingError: public UnicodeError {
        public:
            String message() const override;
        };

        class LargeCodePointEncodingError: public UnicodeError {
        public:
            String message() const override;
        };

        ByteSink byteSink_;
    };

    /** Open a new UTF-8 encoding data sink
      * \param stream underlying data stream
      * \param buffer output buffer (optional)
      */
    Utf8Sink(const Stream &stream, CharArray* buffer = nullptr):
        instance_{stream, buffer}
    {}

    /** Open a new UTF-8 encoding data sink
      * \param buffer output buffer
      */
    Utf8Sink(CharArray* buffer):
        instance_{Stream{}, buffer}
    {}

    Instance *operator->() { return &instance_; }

private:
    Instance instance_;
};

} // namespace cc
