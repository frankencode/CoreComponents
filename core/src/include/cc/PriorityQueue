/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/PriorityQueueInstance>

namespace cc {

/** \class PriorityQueue cc/PriorityQueue
  * \ingroup container_highlevel
  * \brief priority based queue data container
  * \tparam T item type
  * \see queue
  */
template<class T>
class PriorityQueue {
public:
    typedef PriorityQueueInstance<T> Instance;
    typedef typename Instance::Item Item; ///< item type
    typedef typename Instance::Index Index; ///< count type

    typedef Item value_type; ///< \internal
    typedef Index size_type; ///< \internal

    PriorityQueue():
        instance_{new Instance}
    {}

    PriorityQueue(std::initializer_list<T> b):
        instance_{new Instance}
    {
        for (auto &x: b) *instance_ << x;
    }

    PriorityQueue(Instance *b):
        instance_{b}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }

    operator const Instance *() const { return instance_; }
    operator Instance *() { return Cow::get(instance_); }

    PriorityQueue &operator<<(const T& x) { *instance_ << x; return *this; }
    PriorityQueue &operator>>(T& x) { if (instance_->count() > 0) *instance_ >> x; return *this; }

private:
    PriorityQueue(const PriorityQueue &b) = delete;
    PriorityQueue &operator=(const PriorityQueue &b) = delete;

    Ref<Instance> instance_;
};

template<class T>
typename PriorityQueue<T>::size_type count(const PriorityQueue<T> &a) { return a->count(); }

} // namespace cc
