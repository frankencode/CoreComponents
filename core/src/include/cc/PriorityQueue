/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Map>
#include <cc/Queue>

namespace cc {

/** \class PriorityQueue cc/PriorityQueue
  * \ingroup container
  * \brief Priority based queue data container
  * \see Queue, Channel
  */
template<class T>
class PriorityQueue: public Object
{
public:
    static Ref<PriorityQueue> create() { return new PriorityQueue; }

    void pushBack(const T &item, int priority = 0)
    {
        inputQueue(priority)->pushBack(item);
    }

    T popFront(T *item)
    {
        CC_ASSERT(size_ > 0);
        return outputQueue()->popFront(item);
    }

    T popFront() {
        T item;
        return popFront(&item);
    }

    void push(const T &item, int priority) { pushBack(item, priority); }
    T pop(T *item) { return popFront(item); }
    T pop() { return popFront(); }

    int count() const { return size_; }
    T front() { return readQueue()->front(); }

private:
    PriorityQueue():
        queueByPriority_{QueueByPriority::create()},
        size_{0}
    {}

    Queue<T> *inputQueue(int priority)
    {
        ++size_;
        Queue<T> *queue = queueByPriority_->value(priority);
        if (!queue) {
            Ref< Queue<T> > newQueue = Queue<T>::create();
            queueByPriority_->insert(priority, newQueue);
            queue = newQueue;
        }
        return queue;
    }

    Ref< Queue<T> > outputQueue()
    {
        --size_;
        typename QueueByPriority::Item pair = queueByPriority_->at(queueByPriority_->count() - 1);
        if (pair->value()->count() == 1) queueByPriority_->remove(pair->key());
        return pair->value();
    }

    Queue<T> *readQueue() const
    {
        return queueByPriority_->valueAt(queueByPriority_->count() - 1);
    }

    typedef Map<int, Ref< Queue<T> > > QueueByPriority;
    Ref<QueueByPriority> queueByPriority_;

    int size_;
};

} // namespace cc
