/*
 * Copyright (C) 2007-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>

namespace cc {

/** \internal
  * \brief Reference manually allocated objects
  *
  * Wrapper class to allow taking reference to classes not inherited
  * from cc::Object. Beware that it is impossible to reference
  * the same alien object by two different alien wrappers.
  */
template<class T>
class Alien: public Object
{
public:
    typedef void (*DelFunc)(T *);

    Alien(T *guest, DelFunc delFunc = nullptr):
        guest_(guest),
        delFunc_(delFunc)
    {}

    ~Alien()
    {
        if (guest_ != 0)
        {
            if (delFunc_) delFunc_(guest_);
            else delete guest_;
            guest_ = 0;
        }
    }

    inline T *get() const { return guest_; }

private:
    mutable T *guest_;
    DelFunc delFunc_;
};

} // namespace cc
