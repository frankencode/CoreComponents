/*
 * Copyright (C) 2007-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <stdint.h>
#include <cc/String>

namespace cc {

class Variant;

/** \class Version cc/Version
  * \ingroup misc
  * \brief Software version tuple
  */
class Version
{
public:
    /// Construct an invalid version version tuple (0, 0, 0)
    Version()
    {}

    /// Construct a new version software version tuple (\a major, \a minor, \a patch)
    Version(int major, int minor, int patch = 0):
        instance_{major, minor, patch}
    {}

    /// Construct a version from a C-string \a s
    Version(const char* s):
        instance_{String{s}}
    {}

    /// Construct a version by parsing a string \a s
    Version(const String &s):
        instance_{s}
    {}

    /// Construct a version by parsing a variant \a v
    Version(const Variant &v);

    inline static Version fromWord(uint32_t x)
    {
        return Version(x >> 24, (x >> 16) & 0xFF, x & 0xFFFF);
    }

    class Instance
    {
    public:
         /// Check if this version is valid
        inline bool isValid() const { return major_ > 0 || minor_ > 0; }

        /// Return the major version
        inline int major() const { return major_; }

        /// Return the minor version
        inline int minor() const { return minor_; }

        /// Return the patch version
        inline int patch() const { return patch_; }

        inline uint32_t toWord() const { return (uint32_t(major_) << 24) | (uint32_t(minor_) << 16) | uint32_t(patch_); }

        /// Stringify this version
        String toString() const;

    private:
        friend class Version;

        Instance():
            major_{0},
            minor_{0},
            patch_{0}
        {}

        Instance(int major, int minor, int patch):
            major_{uint8_t(major)},
            minor_{uint8_t(minor)},
            patch_{uint16_t(patch)}
        {}

        Instance(const String &s);

        uint8_t major_;
        uint8_t minor_;
        uint16_t patch_;
    };

    inline const Instance *operator->() const { return &instance_; }
    inline Instance *operator->() { return &instance_; }

    /** Comparism operators
      * @{
      */
    inline bool operator< (const Version &b) { return (*this)->toWord() <  b->toWord(); }
    inline bool operator<=(const Version &b) { return (*this)->toWord() <= b->toWord(); }
    inline bool operator> (const Version &b) { return (*this)->toWord() >  b->toWord(); }
    inline bool operator>=(const Version &b) { return (*this)->toWord() >= b->toWord(); }
    inline bool operator==(const Version &b) { return (*this)->toWord() == b->toWord(); }
    inline bool operator!=(const Version &b) { return (*this)->toWord() != b->toWord(); }
    /** @}
      */

    /// Conversion to string operator
    inline operator String() const { return (*this)->toString(); }

private:
    Instance instance_;
};

/// Stringify a software version tuple \a v
inline String str(Version v) { return v->toString(); }

} // namespace cc
