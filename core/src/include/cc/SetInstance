/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bucket>
#include <cc/containers>

namespace cc {

template<class T>
class Set;

/** \class SetInstance cc/SetInstance
  * \ingroup container_dynamic
  * \brief %Set data container
  * \see MultiSet, Map
  */
template<class T>
class SetInstance: public Object
{
public:
    typedef T Item; ///< item type
    typedef bucket::Weight Index; ///< index type
    typedef bucket::Iterator<T> Iterator; ///< iterator type
    typedef bucket::ConstIterator<T> ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    /** Create a new set
      * \return new object instance
      */
    static Ref<SetInstance> create() { return new SetInstance; }

    /** Create a copy of another set
      * \param other the list to copy
      * \return new object instance
      */
    static Ref<SetInstance> copy(const SetInstance *other) { return new SetInstance{other}; }

    /** Make a copy of this set
      * \return new object instance
      */
    Ref<SetInstance> copy() const { return SetInstance::copy(this); }

    /// Number of items
    Index count() const { return tree_->count(); }

    /// Iterator pointing to the beginning (on first item)
    Iterator begin() { return Iterator{&tree_}; }

    /// Iterator pointing to the end (behind last item)
    Iterator end() { return Iterator{&tree_, tree_->count()}; }

    /// Constant iterator pointing to the beginning (on first item)
    ConstIterator begin() const { return ConstIterator{tree_}; }

    /// Constant iterator pointing to the end (behind last item)
    ConstIterator end() const { return ConstIterator{tree_, tree_->count()}; }

    /// Iterator pointing to the item at \a index
    Iterator pos(Index index) { return Iterator{tree_, index}; }

    /// Constant iterator pointing to the item at \a index
    ConstIterator pos(Index index) const { return ConstIterator{tree_, index}; }

    /// Iterator pointing to the first item
    Iterator first() { return Iterator{tree_, 0}; }

    /// Iterator pointing to the last item
    Iterator last() { return Iterator{tree_, tree_->count() - 1}; }

    /// Constant iterator pointing to the first item
    ConstIterator first() const { return ConstIterator{tree_, 0}; }

    /// Constant iterator pointing to the last item
    ConstIterator last() const { return ConstIterator{tree_, tree_->count() - 1}; }

    /// Check if the set contains \a item
    bool contains(const T &item) const
    {
        return tree_->lookup<T>(item);
    }

    /// Check if an index is valid
    bool has(Index index) const {
        return 0 <= index && index < count();
    }

    /// Return a reference to the item at \a index
    const T &at(Index index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<T>(index);
    }

    /** Find a item value
      * \param item item to search for
      * \param target returns an Iterator to the item if found
      * \return true if a matching item was found
      */
    bool find(const T &item, ConstIterator *target) const
    {
        Index index = 0;
        bucket::Leaf<T> *node = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<T>(item, &index, &node, &egress);
        if (target) *target = ConstIterator{tree_, index, node, egress};
        return found;
    }

    /** Find a certain item value
      * \param item item to search for
      * \param target returns an Iterator to the item if found
      * \return true if a matching item was found
      */
    bool find(const T &item, Iterator *target)
    {
        Index index = 0;
        bucket::Leaf<T> *node = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<T>(item, &index, &node, &egress);
        if (target) *target = Iterator{tree_, index, node, egress};
        return found;
    }

    /** Insert a new item if no item with the same value exists already
      * \param item item value
      * \param target return iterator pointing the exiting or newly inserted key-value pair
      * \return true if the new item was inserted successfully
      */
    bool insert(const T &item, Iterator *target = nullptr)
    {
        bucket::Leaf<Item> *leaf = nullptr;
        unsigned egress = 0;
        Index index = 0;
        bool found = tree_->lookup<Item>(item, &index, &leaf, &egress);
        if (!found) tree_->pushAndTell<Item>(leaf, egress, item);
        if (target ) *target = Iterator{tree_, index, leaf, egress};
        return !found;
    }

    /** Remove the given \a item from the set
      * \param item item value
      * \return true if a matching item was found and removed
      */
    bool remove(const T &item)
    {
        bucket::Leaf<T> *target = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<T>(item, nullptr, &target, &egress);
        if (found) tree_->pop<T>(target, egress);
        return found;
    }

    /** Remove \a item at given \a target position */
    void remove(Iterator &target)
    {
        tree_->popAndStep(target);
    }

    /// Remove item at given \a index
    void removeAt(Index index)
    {
        assert(0 <= index && index < count());
        tree_->pop<T>(index);
    }

    /// Return the first item
    const T &min() const { return tree_->first<T>(); }

    /// Return the last item
    const T &max() const { return tree_->last<T>(); }

    /// Reset to an empty set
    void deplete() { tree_->deplete<T>(); }

    /** \name Syntax sugar
      */
    ///@{
    /** Insert \a item to the set */
    void operator<<(const T& item) { insert(item); }

    /** Remove and return first item */
    void operator>>(T& item) { if (count() > 0) { item = min(); removeAt(0); } }
    ///@}

private:
    friend class bucket::Internals;
    friend class Local<SetInstance>;
    friend class Set<T>;

    SetInstance() = default;

    SetInstance(const SetInstance *other)
    {
        tree_->populate<T>(other);
    }

    ~SetInstance() { tree_->deplete<T>(); }

    Local<bucket::Tree> tree_;
};

template<class T>
bool operator==(const SetInstance<T> &a, const SetInstance<T> &b) { return container::compare(&a, &b) == 0; }

template<class T>
bool operator!=(const SetInstance<T> &a, const SetInstance<T> &b) { return container::compare(&a, &b) != 0; }

template<class T>
bool operator<(const SetInstance<T> &a, const SetInstance<T> &b) { return container::compare(&a, &b) < 0; }

template<class T>
bool operator>(const SetInstance<T> &a, const SetInstance<T> &b) { return container::compare(&a, &b) > 0; }

template<class T>
bool operator<=(const SetInstance<T> &a, const SetInstance<T> &b) { return container::compare(&a, &b) <= 0; }

template<class T>
bool operator>=(const SetInstance<T> &a, const SetInstance<T> &b) { return container::compare(&a, &b) >= 0; }

} // namespace cc
