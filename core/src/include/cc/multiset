/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/MultiSet>
#include <cc/Format>

namespace cc {

template<class T>
class multiset {
public:
    typedef MultiSet<T> Instance;
    typedef typename Instance::Item Item;
    typedef typename Instance::Index index;
    typedef typename Instance::Item value_type;
    typedef typename Instance::iterator iterator;
    typedef typename Instance::const_iterator const_iterator;

    multiset():
        instance_{new Instance}
    {}

    multiset(std::initializer_list<T> b):
        instance_{new Instance}
    {
        for (auto &x: b) *instance_ << x;
    }

    multiset(const multiset &b) = default;

    multiset(multiset &&b):
        instance_{std::move(b.instance_)}
    {}

    multiset &operator=(const multiset &b) = default;

    multiset &operator=(multiset &&b) {
        instance_ = std::move(b.instance_);
        return *this;
    }

    explicit multiset(Instance *b):
        instance_{b}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }

    operator const Instance *() const { return instance_; }

    const T &operator[](index i) const { return instance_->at(i); }

    multiset &operator<<(const T& x) { *Cow::get(instance_) << x; return *this; }
    multiset &operator>>(T& x) { if (instance_->count() > 0) *Cow::get(instance_) >> x; return *this; }

private:
    Ref<Instance> instance_;
};

template<class T>
typename multiset<T>::index count(const multiset<T> &a) { return a->count(); }

template<class T>
typename multiset<T>::const_iterator begin(const multiset<T> &a) { return a->begin(); }

template<class T>
typename multiset<T>::const_iterator end(const multiset<T> &a) { return a->end(); }

template<class T>
typename multiset<T>::iterator begin(multiset<T> &a) { return a->begin(); }

template<class T>
typename multiset<T>::iterator end(multiset<T> &a) { return a->end(); }

template<class T>
bool operator==(const multiset<T> &a, const multiset<T> &b) { return container::compare(a, b) == 0; }

template<class T>
bool operator!=(const multiset<T> &a, const multiset<T> &b) { return container::compare(a, b) != 0; }

template<class T>
bool operator<(const multiset<T> &a, const multiset<T> &b) { return container::compare(a, b) < 0; }

template<class T>
bool operator>(const multiset<T> &a, const multiset<T> &b) { return container::compare(a, b) > 0; }

template<class T>
bool operator<=(const multiset<T> &a, const multiset<T> &b) { return container::compare(a, b) <= 0; }

template<class T>
bool operator>=(const multiset<T> &a, const multiset<T> &b) { return container::compare(a, b) >= 0; }

template<class T>
MultiSet<T> *mutate(multiset<T> &a) { return a; }

template<class T>
String str(const multiset<T> &a)
{
    Format f;
    f << "[ ";
    for (auto &x: a)
        f << x << (&x == &a->last() ? " ]" : ", ");
    return f;
}

} // namespace cc
