/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/PropertyBinding>
#include <cc/str>
#include <utility>

namespace cc {

/** %Property definition function
  * \tparam T %Property value type
  */
template<class T>
using Definition = std::function<T()>;

template<class T>
class PropertyMutator;

/** \class Property cc/Property
  * \ingroup misc
  * \brief %Property bindings
  * \tparam T Value type
  */
template<class T>
class Property
{
public:
    /** Create property with default value (T{})
      */
    Property():
        me{new State{this}}
    {}

    /** Create property with initial value \a b
      */
    Property(const T &b):
        me{new State{this, b}}
    {}

    /** Create property with initial value \a b
      * \todo improve list initialization
      */
    Property(std::initializer_list<T> b):
        me{new State{this, *b.begin()}}
    {}

    /** Create property with defining function \a f
      */
    explicit Property(std::function<T()> &&f):
        me{new State{this}}
    {
        define(std::move(f));
    }

    /** \internal
      * Implicitly create an alias of property \a b
      */
    Property(const Property &b):
        me{b.me}
    {}

    /** Create an alias of property \a b
      */
    explicit Property(Property *b):
        me{b->me}
    {}

    /** Assign value of \b (and break prior bindings)
      */
    Property &operator=(const Property &b)
    {
        return *this = b();
    }

    /** \internal
      */
    Property(Property &&b):
        me{std::move(b.me)}
    {
        if (me().owner_ == &b)
            me().owner_ = this;
    }

    /** \internal
      */
    Property &operator=(Property &&b)
    {
        me = std::move(b.me);
        if (me().owner_ == &b)
            me().owner_ = this;
        return *this;
    }

    /** Cleanup: disconnect all bindings and listeners
      */
    ~Property()
    {
        if (me && me().owner_ == this) {
            me().disband();
            me().f_ = nullptr;
            me().g_ = nullptr;
        }
    }

    /** Set a new defining function \a f
      */
    void define(std::function<T()> &&f)
    {
        me().clearDependencies();
        me().f_ = f;
        if (me().hasConsumers())
            me().cascade();
        else
            me().dirty_ = true;

        me().owner_ = this;
    }

    /** Assign a new value \a b (and break prior bindings)
      */
    void operator()(const T &b) { me().setValue(b); }

    /** \copydoc define()
      */
    void operator()(std::function<T()> &&f)
    {
        return define(std::move(f));
    }

    /** Setup restrictor function \a g
      */
    void restrict(std::function<bool(T&, T)> &&g)
    {
        me().g_ = g;
    }

    /** Register function \a f to be called when the property value changes
      */
    void onChanged(std::function<void()> &&f) const
    {
        if (me().dirty_) me.mutate().cascade();
        return me().changed.connect(std::move(f));
    }

    /** Evaluate current property value
      */
    T operator()() const { return me().value(); }

    /** Evaluate current property value
      */
    operator T() const { return me().value(); }

    /** Assign a new value \a b (and break prior bindings)
      */
    Property &operator=(const T &b) { me().setValue(b); return *this; }

    /** Assign a new value \a b (and break prior bindings)
      * \tparam T2 Value type
      */
    template<class T2>
    Property &operator=(const T2 &b) { me().setValue(static_cast<T>(b)); return *this; }

    /** Increment the current value by \a b (and break prior bindings)
      * \tparam T2 Delta type
      */
    template<class T2>
    Property &operator+=(const T2 &b) { me().setValue(me().value() + b); return *this; }

    /** Decrement the current value by \a b (and break prior bindings)
      * \tparam T2 Delta type
      */
    template<class T2>
    Property &operator-=(const T2 &b) { me().setValue(me().value() - b); return *this; }

    /** Multiply the current value by \a b (and break prior bindings)
      * \tparam T2 Multiplication factor type
      */
    template<class T2>
    Property &operator*=(const T2 &b) { me().setValue(me().value() * b); return *this; }

    /** Divide the current value by \a b (and break prior bindings)
      * \tparam T2 Divisor type
      */
    template<class T2>
    Property &operator/=(const T2 &b) { me().setValue(me().value() / b); return *this; }

    /** Shift left the current value by \a b (and break prior bindings)
      * \tparam T2 Shift distance type
      */
    template<class T2>
    Property &operator<<=(const T2 &b) { me().setValue(me().value() << b); return *this; }

    /** Shift right the current value by \a b (and break prior bindings)
      * \tparam T2 Shift distance type
      */
    template<class T2>
    Property &operator>>=(const T2 &b) { me().setValue(me().value() >> b); return *this; }

    /** Prefix increment operator: Add 1 to the current value and return the new value
      */
    Property &operator++() { return *this += 1; }

    /** Prefix decrement operator: Subtract 1 from the current value and return the new value
      */
    Property &operator--() { return *this += 1; }

    /** Postfix increment operator: Add 1 to the current value and return the old value
      */
    T operator++(int) { T old = *this(); ++(*this); return old; }

    /** Postfix decrement operator: Subtract 1 from the current value and return the old value
      */
    T &operator--(int) { T old = *this(); --(*this); return old; }

private:
    friend class PropertyMutator<T>;

    struct State: public PropertyBinding
    {
        State(void *owner, const T &b = T{}):
            PropertyBinding{owner, false},
            value_{b}
        {}

        const T &value() const
        {
            preAccess();
            return value_;
        }

        void setValue(const T &newValue)
        {
            if (f_) {
                clearDependencies();
                f_ = std::function<T()>{};
            }
            establish(newValue);
        }

        void evaluate() override
        {
            establish(f_());
        }

        void establish(T newValue)
        {
            if (g_ && !g_(newValue, value_))
                return;
            store(newValue);
        }

        void store(const T &newValue)
        {
            if (dirty_) dirty_ = false;
            if (value_ != newValue) {
                value_ = newValue;
                emit();
            }
        }

        mutable T value_;
        std::function<T()> f_;
        std::function<bool(T&, T)> g_;
    };

    Handle<State> me;
};

template<>
class Property<void>
{
public:
    /** Create property with default value (T{})
      */
    Property():
        me{new State{this}}
    {}

    /** Create property with defining function \a f
      */
    template<class F>
    explicit Property(const F &f):
        me{new State{this}}
    {
        define(f);
    }

    /** \internal
      */
    Property(const Property &b):
        me{b.me}
    {}

    /** \internal
      */
    Property &operator=(const Property &b) = delete;

    /** \internal
      */
    Property(Property &&b):
        me{std::move(b.me)}
    {
        if (me().owner_ == &b)
            me().owner_ = this;
    }

    /** \internal
      */
    Property &operator=(Property &&b)
    {
        me = std::move(b.me);
        if (me().owner_ == &b)
            me().owner_ = this;
        return *this;
    }

    /** Cleanup: disconnect all bindings and listeners
      */
    ~Property()
    {
        if (me && me().owner_ == this) {
            me().disband();
            me().f_ = nullptr;
            me().g_ = nullptr;
        }
    }

    /** Set a new defining function \a f
      */
    void define(std::function<void()> &&f)
    {
        me().clearDependencies();

        me().f_ = f;
        if (me().hasConsumers())
            me().cascade();
        else
            me().dirty_ = true;

        me().owner_ = this;
    }

    /** \copydoc define()
      */
    void operator()(std::function<void()> &&f)
    {
        return define(std::move(f));
    }

    /** Setup restrictor function \a g
      */
    void restrict(std::function<bool()> &&g)
    {
        me().g_ = g;
    }

    /** Register function \a f to be called when the property value has been reevaluated
      */
    void onChanged(std::function<void()> &&f) const
    {
        if (me().dirty_) me.mutate().cascade();
        me.mutate().changed.connect(std::move(f));
    }

    /** Evaluate current property value
      */
    void operator()() const { me().value(); }

private:
    struct State: public PropertyBinding
    {
        State(void *owner): PropertyBinding{owner, false} {}

        bool hasConsumers() const override { return true; }

        void value() const
        {
            const_cast<State *>(this)->cascade();
        }

        void evaluate() override
        {
            if (f_) {
                if (g_ && !g_()) return;
                f_();
                emit();
            }
        }

        std::function<void()> f_;
        std::function<bool()> g_;
    };

    Handle<State> me;
};

template<class T>
class PropertyMutator {
protected:
    static void store(Property<T> &property, const T &newValue) { property.me().store(newValue); }
};

class OnScopeExit {
public:
    OnScopeExit (const std::function<void()> &f): f_{f} {}
    ~OnScopeExit() { f_(); }
private:
    std::function<void()> f_;
};

template<class T>
inline String str(const Property<T> &property) { return str(property()); }

} // namespace cc
