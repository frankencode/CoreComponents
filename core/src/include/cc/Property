/*
 * Copyright (C) 2007-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>
#include <cc/PropertyBinding>
#include <utility>

namespace cc {

template<class T>
class PropertyMutator;

template<class T = void>
class Property
{
public:
    class Instance: public PropertyBinding {
    public:
        template<class F>
        void bind(const F &f)
        {
            clearDependencies();

            f_ = f;
            if (hasConsumers())
                cascade();
            else
                dirty_ = true;
        }

        template<class G>
        void restrict(const G &g)
        {
            g_ = g;
        }

        template<class H>
        void connect(const H &h)
        {
            if (dirty_) cascade();
            changed->connect(h);
        }

        void disband()
        {
            PropertyBinding::disband();
            value_ = T{};
            f_ = std::function<T()>{};
            g_ = std::function<bool(T&, T)>{};
        }

    private:
        friend class Property;
        friend class PropertyMutator<T>;

        template<class T2>
        friend Property<T2> alias(Property<T2> &p);

        static Ref<Instance> create(const T &b = T{}) { return new Instance{b}; }

        Instance(const T &b):
            PropertyBinding{false},
            value_{b}
        {}

        ~Instance()
        {
            disband();
        }

        Property alias() { return Property{this, true}; }

        const T &value() const
        {
            preAccess();
            return value_;
        }

        void setValue(const T &newValue)
        {
            if (f_) {
                clearDependencies();
                f_ = std::function<T()>{};
            }
            establish(newValue);
        }

        void evaluate() override
        {
            establish(f_());
        }

        void establish(T newValue)
        {
            if (g_ && !g_(newValue, value_))
                return;
            store(newValue);
        }

        void store(const T &newValue)
        {
            if (dirty_) dirty_ = false;
            if (value_ != newValue) {
                value_ = newValue;
                emit();
            }
        }

        mutable T value_;
        std::function<T()> f_;
        std::function<bool(T&, T)> g_;
    };

    Property(): instance_{Instance::create()} {}
    Property(const T &b): instance_{Instance::create(b)} {}

    explicit Property(const Property &b): instance_{b.instance_} {}

    Property(Property &&b): instance_{std::move(b.instance_)} {}
    Property &operator=(Property &&b) { instance_ = std::move(b.instance_); return *this; }

    explicit Property(const std::function<T()> &f): instance_{Instance::create()} { instance_->bind(f); }

    ~Property() {/* instance_->disband(); */}

    Instance *operator->() { return instance_; }
    const Instance *operator->() const { return instance_; }

    T operator()() const { return instance_->value(); }

    template<class F>
    void operator<<(const F &f) { instance_->bind(f); }

    template<class F>
    Property &operator>>(const F &f) { instance_->connect(f); return *this; }

    Property &operator=(const T &b) { instance_->setValue(b); return *this; }

    template<class T2>
    Property &operator=(const T2 &b) { instance_->setValue(T(b)); return *this; }

    template<class T2>
    Property &operator+=(const T2 &b) { instance_->setValue(instance_->value() + b); return *this; }

    template<class T2>
    Property &operator-=(const T2 &b) { instance_->setValue(instance_->value() - b); return *this; }

    template<class T2>
    Property &operator*=(const T2 &b) { instance_->setValue(instance_->value() * b); return *this; }

    template<class T2>
    Property &operator/=(const T2 &b) { instance_->setValue(instance_->value() / b); return *this; }

private:
    friend class Instance;

    explicit Property(Instance *instance, bool): instance_{instance} {}

    Ref<Instance> instance_;
};

template<>
class Property<void>
{
public:
    class Instance: public PropertyBinding {
    public:
        template<class F>
        void bind(const F &f)
        {
            clearDependencies();

            f_ = f;
            if (hasConsumers())
                cascade();
            else
                dirty_ = true;
        }

        template<class H>
        void connect(const H &h)
        {
            if (dirty_) cascade();
            changed->connect(h);
        }

        void disband()
        {
            PropertyBinding::disband();
            f_ = std::function<void()>{};
        }

    private:
        friend class Property;

        template<class T2>
        friend Property<T2> alias(Property<T2> &p);

        static Ref<Instance> create() { return new Instance; }

        Instance(): PropertyBinding{false} {}

        Property alias() { return Property{this, true}; }

        bool hasConsumers() const override { return true; }

        void value()
        {
            cascade();
        }

        void evaluate() override
        {
            if (f_) {
                f_();
                emit();
            }
        }

        std::function<void()> f_;
    };

    Property(): instance_{Instance::create()} {}

    Property(Property &&b): instance_{std::move(b.instance_)} {}
    Property &operator=(Property &&b) { instance_ = std::move(b.instance_); return *this; }

    explicit Property(const std::function<void()> &f): instance_{Instance::create()} { instance_->bind(f); }
    ~Property() {/* instance_->disband(); */}

    Instance *operator->() { return instance_; }
    const Instance *operator->() const { return instance_; }

    void operator()() const { instance_->value(); }

    template<class F>
    void operator<<(const F &f) { instance_->bind(f); }

    template<class F>
    Property &operator>>(const F &f) { instance_->connect(f); return *this; }

private:
    friend class Instance;

    explicit Property(Instance *instance, bool): instance_{instance} {}

    Ref<Instance> instance_;
};

template<class T>
inline Property<T> alias(Property<T> &p) { return p->alias(); }

template<class T>
class PropertyMutator {
protected:
    static void store(Property<T> &property, const T &newValue) { property->store(newValue); }
};

class OnScopeExit {
public:
    OnScopeExit (const std::function<void()> &f): f_{f} {}
    ~OnScopeExit() { f_(); }
private:
    std::function<void()> f_;
};

} // namespace cc
