/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/exceptions>
#include <cc/Signal>

namespace cc {

template<class> class SetInstance;

class PropertyBinding: public Object
{
protected:
    typedef Set< Ref<PropertyBinding> > Association;

    Signal changed;

    PropertyBinding(bool dirty);

    void preAccess() const;

    virtual bool hasConsumers() const;

    void clearDependencies();
    void clearSubscribers();

    void emit();
    void cascade();

    virtual void evaluate() = 0;
    void disband();

    bool dirty_;

private:
    friend class PropertyActivator;

    mutable Association dependencies_;
    mutable Association subscribers_;
    int cascadeDepth_ { 0 };
};

class PropertyBindingError: public Exception
{};

class PropertyBindingLoop: public PropertyBindingError
{
public:
    String message() const override;
};

} // namespace cc
