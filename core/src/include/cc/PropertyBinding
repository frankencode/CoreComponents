/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Notifier>

namespace cc {

template<class> class Set;

class PropertyBinding: public Object
{
protected:
    Notifier changed;

    typedef Set< Ref<PropertyBinding> > Association;

    PropertyBinding(bool dirty);

    void preAccess() const;

    Association *dependencies() const;
    Association *subscribers() const;

    bool hasConsumers() const;

    void clearDependencies();
    void clearSubscribers();

    void emit();
    void cascade();

    virtual void evaluate() = 0;
    virtual void evaluateLater() {}
    virtual void disband();

    bool dirty_;

private:
    static thread_local PropertyBinding *activeInstance_;

    mutable Ref<Association> dependencies_;
    mutable Ref<Association> subscribers_;
};

} // namespace cc
