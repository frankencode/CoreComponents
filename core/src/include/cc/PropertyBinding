/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Trigger>
#include <cc/Object>
#include <cc/Set>
#include <cc/exceptions>

namespace cc {

/** \internal
  */
struct PropertyBinding: public Object::State
{
    using Association = Set< Handle<PropertyBinding> >;

    Trigger changed;

    PropertyBinding(void *owner, bool dirty);

    void preAccess() const;

    virtual bool hasConsumers() const;

    void clearDependencies();
    void clearSubscribers();

    void emit();
    void cascade();

    virtual void evaluate() = 0;
    void disband();

    void *owner_ { nullptr };
    mutable bool dirty_;
    mutable Association dependencies_;
    mutable Association subscribers_;
    int cascadeDepth_ { 0 };
};

} // namespace cc
