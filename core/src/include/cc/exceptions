/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <errno.h>
#include <cc/Exception>

namespace cc {

/** \class UsageError cc/exceptions
  * \brief %User input ambiguous, report back to user and provide guidance
  */
class UsageError: public Exception
{
public:
    UsageError(const string &message = ""): message_{message} {}

    string message() const override { return message_; }

private:
    string message_;
};

/** \class HelpRequest cc/exceptions
  * \brief %User requested help
  */
class HelpRequest: public Exception
{
public:
    string message() const override { return "No help, yet ..."; }
};

/** \class VersionError cc/exceptions
  * \brief %User requested the application version
  */
class VersionRequest: public Exception
{
public:
    string message() const override { return "Application is not versioned, yet ..."; }
};

/** \class EncodingError cc/exceptions
  * \brief Some encoded data is malformed
  */
class EncodingError: public Exception
{};

/** \class UnicodeError cc/exceptions
  * \brief Encoding/decoding of an %Unicode string failed
  */
class UnicodeError: public EncodingError
{};

/** \class UnexpectedEndOfInputError cc/exceptions
  * \brief End of input reached although more data is needed
  */
class UnexpectedEndOfInputError: public Exception
{
public:
    string message() const override { return "Unexpected end of input"; }
};

/** \class BufferOverflow cc/exceptions
  * \brief Some buffer size is exceeded
  */
class BufferOverflow: public Exception
{
public:
    string message() const override { return "Buffer overflow"; }
};

/** \class Error cc/exceptions
  * \brief Generic application error
  */
class Error: public Exception
{
public:
    Error(int exitCode):
        exitCode_{exitCode}
    {}

    Error(const string &message, int exitCode = 1):
        message_{message},
        exitCode_{exitCode}
    {}

    string message() const override { return message_; }
    int exitCode() const { return exitCode_; }

    const Error *operator->() const { return this; }

private:
    string message_;
    int exitCode_;
};

/** \class DebugError cc/exceptions
  * \brief Debugging hint on internal system malfunction
  */
class DebugError: public Exception
{
public:
    DebugError(const string &reason, const char *source, int line):
        reason_{reason},
        source_{source},
        line_{line}
    {}

    string message() const override;

    const DebugError *operator->() const { return this; }

private:
    string reason_;
    const char *source_;
    int line_;
};

string systemError(int errorCode);

/** \class SystemError cc/exceptions
  * \brief %System call failed
  */
class SystemError: public Exception
{
public:
    SystemError(int errorCode): errorCode_{errorCode} {}

    int errorCode() const { return errorCode_; }

    string message() const override;

    const SystemError *operator->() const { return this; }

protected:
    int errorCode_;
};

/** \class SystemResourceError cc/exceptions
  * \brief %System call failed to perform an action on a named resource (e.g. a file)
  */
class SystemResourceError: public SystemError
{
public:
    SystemResourceError(int errorCode, const string &resource, const char *source, int line):
        SystemError{errorCode},
        resource_{resource},
        source_{source},
        line_{line}
    {}

    string resource() const { return resource_; }
    const char *source() const { return source_; }
    int line() const { return line_; }

    string message() const override;

    const SystemResourceError *operator->() const { return this; }

private:
    string resource_;
    const char *source_;
    int line_;
};

/** \class SystemDebugError cc/exceptions
  * \brief Debugging hint on system call failure
  */
class SystemDebugError: public SystemError
{
public:
    SystemDebugError(int errorCode, const char *source, int line):
        SystemError{errorCode},
        source_{source},
        line_{line}
    {}

    const char *source() const { return source_; }
    int line() const { return line_; }

    string message() const override;

    const SystemDebugError *operator->() const { return this; }

private:
    const char *source_;
    int line_;
};

#define CC_DEBUG_ERROR(reason) \
    throw DebugError(reason, __FILE__, __LINE__)

#define CC_SYSTEM_RESOURCE_ERROR(errorCode, resource) \
    throw SystemResourceError(errorCode, resource, __FILE__, __LINE__)

#define CC_SYSTEM_DEBUG_ERROR(errorCode) \
    throw SystemDebugError(errorCode, __FILE__, __LINE__)

#define CC_SYSTEM_ERROR(errorCode, resource) \
    { \
        if (resource != "") CC_SYSTEM_RESOURCE_ERROR(errorCode, resource); \
        else CC_SYSTEM_DEBUG_ERROR(errorCode); \
    }

/** \class TextError cc/exceptions
  * \brief General error related to a text (progam text, config file, etc.)
  */
class TextError: public Exception
{
public:
    string text() const { return text_; }
    int offset() const { return offset_; }
    string resource() const { return resource_; }

    void setResource(const string &resource) { resource_ = resource; }

    const TextError *operator->() const { return this; }

protected:
    TextError(const string &text, int offset, const string &resource = "");

    string text_;
    int offset_;
    string resource_;
};

/** \class SemanticError cc/exceptions
  * \brief Semantic error
  */
class SemanticError: public TextError
{
public:
    SemanticError(const string &reason, const string &text = "", int offset = -1, const string &resource = ""):
        TextError{text, offset, resource},
        reason_{reason}
    {}

    string reason() const { return reason_; }

    string message() const override;

    const SemanticError *operator->() const { return this; }

private:
    string reason_;
};

/** \class Timeout cc/exceptions
  * \brief Operation timed out
  */
class Timeout: public Exception
{
public:
    string message() const override;
};

/** \class ConnectionResetByPeer cc/exceptions
  * \brief Other end of a communication channel was closed (pipe or socket)
  */
class ConnectionResetByPeer: public Exception
{
public:
    string message() const override;
};

/** \class TransferError cc/exceptions
  * \brief A data transfer operation failed
  * \see Transfer
  */
class TransferError: public Exception
{
public:
    TransferError(const string &details);

    string message() const override;

private:
    string details_;
};

/** \class PermissionError cc/exceptions
  * \brief Insufficient permission to perform operation
  */
class PermissionError: public UsageError
{
public:
    string message() const override;
};

/** \class CommandNotFound cc/exceptions
  * \brief Command not found error
  */
class CommandNotFound: public UsageError
{
public:
    CommandNotFound(const string &command = ""):
        command_{command}
    {}

    string command() const { return command_; }

    string message() const override;

    const CommandNotFound *operator->() const { return this; }

private:
    string command_;
};

} // namespace cc
