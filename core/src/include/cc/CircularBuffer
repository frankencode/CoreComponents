/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/CircularBufferInstance>

namespace cc {

/** \class CircularBuffer cc/CircularBuffer
  * \ingroup container
  * \brief Circular buffer data container
  * \tparam T item type
  * \see Queue, CircularChannel
  * \todo provide constant iterator type
  */
template<class T>
class CircularBuffer
{
public:
    typedef CircularBufferInstance<T> Instance;
    typedef typename Instance::Item Item; ///< item type

    CircularBuffer() = default;

    CircularBuffer(int capacity):
        instance_{new Instance{capacity}}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return instance_; }

    CircularBuffer &operator<<(const T& x) { instance_->pushBack(x); return *this; }
    CircularBuffer &operator>>(T& x) { instance_->popFront(&x); return *this; }

    explicit operator bool() const { return instance_; }

private:
    Ref<Instance> instance_;
};

} // namespace cc
