/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/Set>

namespace cc {

/** \class SetValue cc/SetValue
  * \ingroup container_highlevel
  * \brief %Set data container
  * \see multiset, map
  */
template<class T>
class SetValue {
public:
    typedef Set<T> Instance;

    typedef typename Instance::Item Item; ///< item type
    typedef typename Instance::Index Index; ///< index type

    typedef typename Instance::Iterator Iterator; ///< iterator type
    typedef typename Instance::ConstIterator ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    SetValue():
        instance_{new Instance}
    {}

    SetValue(std::initializer_list<T> b):
        instance_{new Instance}
    {
        for (auto &x: b) *instance_ << x;
    }

    SetValue(const SetValue &b) = default;

    SetValue(SetValue &&b):
        instance_{std::move(b.instance_)}
    {}

    SetValue &operator=(const SetValue &b) = default;

    SetValue &operator=(SetValue &&b) {
        instance_ = std::move(b.instance_);
        return *this;
    }

    SetValue(Instance *b):
        instance_{b}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return Cow::get(instance_); }

    operator const Instance *() const { return instance_; }
    operator Instance *() { return Cow::get(instance_); }

    const T &operator[](Index i) const { return instance_->at(i); }

    SetValue &operator<<(const T& x) { *Cow::get(instance_) << x; return *this; }
    SetValue &operator>>(T& x) { if (instance_->count() > 0) *Cow::get(instance_) >> x; return *this; }

private:
    Ref<Instance> instance_;
};

template<class T>
typename SetValue<T>::Index count(const SetValue<T> &a) { return a->count(); }

template<class T>
typename SetValue<T>::ConstIterator begin(const SetValue<T> &a) { return a->begin(); }

template<class T>
typename SetValue<T>::ConstIterator end(const SetValue<T> &a) { return a->end(); }

template<class T>
typename SetValue<T>::Iterator begin(SetValue<T> &a) { return a->begin(); }

template<class T>
typename SetValue<T>::Iterator end(SetValue<T> &a) { return a->end(); }

template<class T>
bool operator==(const SetValue<T> &a, const SetValue<T> &b) { return container::compare(a, b) == 0; }

template<class T>
bool operator!=(const SetValue<T> &a, const SetValue<T> &b) { return container::compare(a, b) != 0; }

template<class T>
bool operator<(const SetValue<T> &a, const SetValue<T> &b) { return container::compare(a, b) < 0; }

template<class T>
bool operator>(const SetValue<T> &a, const SetValue<T> &b) { return container::compare(a, b) > 0; }

template<class T>
bool operator<=(const SetValue<T> &a, const SetValue<T> &b) { return container::compare(a, b) <= 0; }

template<class T>
bool operator>=(const SetValue<T> &a, const SetValue<T> &b) { return container::compare(a, b) >= 0; }

} // namespace cc
