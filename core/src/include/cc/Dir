/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Folder>
#include <cc/files>
#include <sys/types.h> // mode_t
#include <dirent.h> // DIR, opendir, closedir, readdir_r

namespace cc {

/** \class Dir cc/Dir
  * \ingroup file_system
  * \brief Work with directory files
  * \see File, CleanupGuard, DirWalker
  */
class Dir
{
public:
    class Instance: public Folder
    {
    public:
        /// Return the directory's file path
        String path() const;

        /** Read next directory entry
          * \param name return name of next entry
          * \return false if no more entries, else true
          */
        bool read(String *name) override;

        /** Open a file from this directory
          * \param path file path of the file to open
          * \return new content stream
          */
        Stream openFile(const String &path) override;

    private:
        friend class Dir;

        Instance(const String &path, DIR *dir = nullptr);
        ~Instance();

        String path_;
        DIR *dir_;
    };

    using Iterator = Instance::Iterator;

    Dir() = default; /// \todo improve logic

    /** Open an existing directory
      * \param path directory file path
      */
    Dir(const String &path):
        instance_{new Instance{path}}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return instance_; }

    explicit operator bool() const { return instance_; }

    /** Check access permissions
      * \param path directory file path
      * \param flags a combination of cc::Access
      * \return true if the calling process has needed credentials
      */
    static bool checkAccess(const String &path, FileAccess flags);

    /** Check if directory exists
      * \param path directory file path
      * \return true if a directory exists under given path
      */
    static bool exists(const String &path);

    /** Count number of files in directory
      * \param path directory file path
      * \return 0 if there is no such directory, otherwise number of files
      */
    static int count(const String &path);

    /** Create a new directory
      * \param path directory file path
      * \param mode a combination of cc::Mode
      */
    static void create(const String &path, FileMode mode = FileMode::DirDefault);

    /** Establish a new directory path
      * \param path directory file path
      * \param mode a combination of cc::Mode
      */
    static void establish(const String &path, FileMode mode = FileMode::DirDefault);

    /** Remove directory
      * \param path directory file path
      */
    static void remove(const String &path);

    /** Create a uniquely named directory
      * \param path directory file path pattern
      * \param mode a combination of cc::Mode
      * \param placeHolder place holder character in path to replace with random characters
      * \return name of the newly created directory
      */
    static String createUnique(const String &path, FileMode mode = FileMode::DirDefault, char placeHolder = '#');

    /** Create a temporary directory
      * \param path directory file path pattern
      * \param mode a combination of cc::Mode
      * \return name of the newly created directory
      */
    static String createTemp(FileMode mode = FileMode::DirDefault);

    /** Cleanup directory contents recursively
      * \param path directory file path
      * \see File::clean()
      */
    static void deplete(const String &path);

private:
    Ref<Instance> instance_;
};

inline Dir::Iterator begin(Dir &dir) { return dir->begin(); }
inline Dir::Iterator end  (Dir &dir) { return dir->end(); }

} // namespace cc
