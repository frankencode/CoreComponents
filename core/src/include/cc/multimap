/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <initializer_list>
#include <cc/MultiMap>
#include <cc/format>

namespace cc {

/** \class multimap cc/multimap
  * \ingroup container_highlevel
  * \brief Multi-map data container
  * \tparam K key type
  * \tparam T mapped type
  * \see map, multiset
  */
template<class K, class T = K>
class multimap {
public:
    typedef MultiMap<K, T> Instance;
    typedef K key_type;
    typedef T mapped_type;
    typedef typename Instance::value_type value_type;
    typedef typename Instance::size_type size_type;
    typedef typename Instance::iterator iterator;
    typedef typename Instance::const_iterator const_iterator;

    multimap():
        instance_{new Instance}
    {}

    multimap(std::initializer_list<pair<K, T>> b):
        instance_{new Instance}
    {
        for (auto &x: b) *instance_ << x;
    }

    multimap(const multimap &b) = default;

    multimap(multimap &&b):
        instance_{std::move(b.instance_)}
    {}

    multimap &operator=(const multimap &b) = default;

    multimap &operator=(multimap &&b) {
        instance_ = std::move(b.instance_);
        return *this;
    }

    multimap(Instance *b):
        instance_{b}
    {}

    Instance *operator->() { return Cow::get(instance_); }
    const Instance *operator->() const { return instance_; }

    operator const Instance *() const { return instance_; }
    operator Instance *() { return Cow::get(instance_); }

    const pair<K, T> &operator[](size_type i) const { return instance_->at(i); }

    multimap &operator<<(const pair<K, T>& x) { *Cow::get(instance_) << x; return *this; }
    multimap &operator>>(pair<K, T>& x) { if (instance_->count() > 0) *Cow::get(instance_) >> x; return *this; }

private:
    Ref<Instance> instance_;
};

template<class K, class T>
typename multimap<K, T>::size_type count(const multimap<K, T> &a) { return a->count(); }

template<class K, class T>
typename multimap<K, T>::const_iterator begin(const multimap<K, T> &a) { return a->begin(); }

template<class K, class T>
typename multimap<K, T>::const_iterator end(const multimap<K, T> &a) { return a->end(); }

template<class K, class T>
typename multimap<K, T>::iterator begin(multimap<K, T> &a) { return a->begin(); }

template<class K, class T>
typename multimap<K, T>::iterator end(multimap<K, T> &a) { return a->end(); }

template<class K, class T>
bool operator==(const multimap<K, T> &a, const multimap<K, T> &b) { return container::compare(a, b) == 0; }

template<class K, class T>
bool operator!=(const multimap<K, T> &a, const multimap<K, T> &b) { return container::compare(a, b) != 0; }

template<class K, class T>
bool operator<(const multimap<K, T> &a, const multimap<K, T> &b) { return container::compare(a, b) < 0; }

template<class K, class T>
bool operator>(const multimap<K, T> &a, const multimap<K, T> &b) { return container::compare(a, b) > 0; }

template<class K, class T>
bool operator<=(const multimap<K, T> &a, const multimap<K, T> &b) { return container::compare(a, b) <= 0; }

template<class K, class T>
bool operator>=(const multimap<K, T> &a, const multimap<K, T> &b) { return container::compare(a, b) >= 0; }

template<class K, class T>
string str(const pair<K, T> &a)
{
    return format{} << "(" << a->key() << ": " << a->value() << ")";
}

template<class K, class T>
string str(const multimap<K, T> &a)
{
    format f;
    f << "[ ";
    for (auto &x: a)
        f << x << (&x == &a->last() ? " ]" : ", ");
    return f;
}

} // namespace cc
