#pragma once

#include <cc/Stream>

namespace cc {

/** \class ReplaySource cc/ReplaySource
  * \ingroup binary_io
  * \brief Feed in data from an in-memory buffer
  * \see CaptureSink, ByteSource
  */
class ReplaySource: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        int read(CharArray *data) override
        {
            if (i_ == buffer_->count()) return 0;
            const CharArray::Index n =
                (i_ + data->count() <= buffer_->count()) ? data->count() : (buffer_->count() - i_);
            data->write(buffer_->select(i_, i_ + n));
            i_ += n;
            return n;
        }

    private:
        friend class ReplaySource;

        Instance(const CharArray *buffer):
            buffer_{buffer},
            i_{0}
        {}

        Ref<const CharArray> buffer_;
        CharArray::Index i_;
    };

    /** Create a new ReplaySource
      * \param buffer input buffer
      */
    ReplaySource(const CharArray *buffer):
        Stream{new Instance{buffer}}
    {}
};

} // namespace cc {
