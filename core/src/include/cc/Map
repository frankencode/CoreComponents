/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bucket>
#include <cc/containers>
#include <cc/pair>

namespace cc {

template<class K, class T>
class map;

/** \class Map cc/Map
  * \ingroup container_lowlevel
  * \brief %Map data container
  * \tparam K key type
  * \tparam T mapped type
  * \see MultiMap, Set, pair, KeySource, ValueSource
  */
template<class K, class T = K>
class Map: public Object
{
public:
    typedef pair<K, T> value_type; ///< item type
    typedef bucket::Weight size_type; ///< undex type
    typedef K key_type; ///< key type
    typedef T mapped_type; ///< mapped type

    typedef bucket::Iterator<value_type> iterator; ///< iterator type
    typedef bucket::ConstIterator<value_type> const_iterator; ///< constant iterator type

    /** Create a new map
      * \return new object instance
      */
    static Ref<Map> create() { return new Map; }

    /** Create a copy of another map
      * \param other the list to copy
      * \return new object instance
      */
    static Ref<Map> copy(const Map *other) { return new Map{other}; }

    /** Make a copy of this map
      * \return new object instance
      */
    Ref<Map> copy() const { return Map::copy(this); }

    /// Number of items
    size_type count() const { return tree_->count(); }

    /// Check if an index is valid
    bool has(size_type index) const {
        return 0 <= index && index < count();
    }

    /// Return a reference to the item at \a index
    const value_type &at(size_type index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<value_type>(index);
    }

    /// Iterator to the beginning (on first item)
    iterator begin() { return iterator{&tree_}; }

    /// Iterator pointing to the item at \a index
    iterator beginAt(size_type index) { return iterator{tree_, index}; }

    /// Iterator to the end (behind last item)
    iterator end() { return iterator{&tree_, tree_->count()}; }

    /// Constant iterator to the beginning (on first item)
    const_iterator begin() const { return const_iterator{tree_}; }

    /// Constant Iterator pointing to the item at \a index
    const_iterator beginAt(size_type index) const { return const_iterator{tree_, index}; }

    /// Constant iterator to the end (behind last item)
    const_iterator end() const { return const_iterator{tree_, tree_->count()}; }

    /// Check if the map contains \a key
    bool contains(const key_type &key) const
    {
        return tree_->lookup<value_type>(value_type{key});
    }

    /** Lookup key-value pair by given key
      * If a matching key-value pair is found the value is returned in 'value' and the
      * function returns with true. If a matching key could not be found 'value' is not set
      * and the function returns false.
      */
    template<class ReturnValue>
    bool lookup(const key_type &key, ReturnValue *value) const
    {
        bucket::Leaf<value_type> *target = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup(value_type{key}, nullptr, &target, &egress);
        if (found) *value = target->at(egress)->value();
        return found;
    }

    /** Find key-value pair by given key
      * \param key key to search for
      * \param target returns an iterator to the key-value if found
      * \return true if a matching key-value pair was found
      */
    bool find(const key_type &key, const_iterator *target) const
    {
        size_type index = 0;
        bucket::Leaf<value_type> *node = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<value_type>(value_type{key}, &index, &node, &egress);
        if (target) *target = const_iterator{tree_, index, node, egress};
        return found;
    }

    /** Find key-value pair by given key
      * \param key key to search for
      * \param target returns an iterator to the key-value if found
      * \return true if a matching key-value pair was found
      */
    bool find(const key_type &key, iterator *target)
    {
        size_type index = 0;
        bucket::Leaf<value_type> *node = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<value_type>(value_type{key}, &index, &node, &egress);
        if (target) *target = iterator{tree_, index, node, egress};
        return found;
    }

    /** Insert a new key-value pair if the map doesn't contain the key already
      * \param key search key
      * \param value new value
      * \param currentValue returns the current value if the map contains the given key already
      * \param currentIndex returns the index of the key if the map contains the given key already
      * \return true if the new key-value pair was inserted successfully
      */
    bool insert(const key_type &key, const mapped_type &value, mapped_type *currentValue = nullptr, size_type *currentIndex = nullptr)
    {
        bucket::Leaf<value_type> *target = nullptr;
        unsigned egress = 0;
        value_type item{key, value};
        bool found = tree_->lookup<value_type>(item, currentIndex, &target, &egress);
        if (!found) tree_->push<value_type>(target, egress, item);
        else if (currentValue) *currentValue = target->at(egress)->value();
        return !found;
    }

    /** Remove the given \a key from the map
      * \return true if a matching key was found and removed
      */
    bool remove(const key_type &key)
    {
        bucket::Leaf<value_type> *target = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<value_type>(value_type{key}, nullptr, &target, &egress);
        if (found) tree_->pop<value_type>(target, egress);
        return found;
    }

    /** Insert a new or overwrite an existing key-value mapping
      * \param key search key
      * \param value new value
      */
    void establish(const key_type &key, const mapped_type &value)
    {
        bucket::Leaf<value_type> *target = nullptr;
        unsigned egress = 0;
        value_type item{key, value};
        bool found = tree_->lookup<value_type>(item, nullptr, &target, &egress);
        if (found) target->at(egress) = item;
        else tree_->push<value_type>(target, egress, item);
    }

    /** Retrieve value of associated with a given \a key
      * \param key search key
      * \param fallback fallback value
      * \return retieved value if key was found, fallback value otherwise
      */
    mapped_type value(const key_type &key, const mapped_type &fallback = mapped_type{}) const
    {
        bucket::Leaf<value_type> *target = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup(value_type{key}, nullptr, &target, &egress);
        return found ? target->at(egress)->value() : fallback;
    }

    /** Modify value of an existing key-value mapping
      * \param key search key
      * \param value new value
      * \return true if key is was found, false otherwise
      */
    bool setValue(const key_type &key, const mapped_type &value)
    {
        bucket::Leaf<value_type> *target = nullptr;
        unsigned egress = 0;
        value_type item{key, value};
        bool found = tree_->lookup(item, nullptr, &target, &egress);
        if (found) target->at(egress) = item;
        return found;
    }

    /// Remove \a item at given \a target position
    void remove(iterator &target)
    {
        tree_->popAndStep(target);
    }

    /// Remove item at given \a index
    void removeAt(size_type index)
    {
        assert(0 <= index && index < count());
        tree_->pop<value_type>(index);
    }

    /// Modify value of the key-value mapping at given \a index
    void setValueAt(size_type index, const mapped_type &value)
    {
        assert(0 <= index && index < count());
        tree_->at<value_type>(index)->setValue(value);
    }

    /// Return the first item
    const value_type &first() const { return tree_->first<value_type>(); }

    /// Return the last item
    const value_type &last() const { return tree_->last<value_type>(); }

    /// Reset to an empty map
    void deplete() { tree_->deplete<value_type>(); }

    /** \name Syntax sugar
      */
    ///@{
    /** Insert \a item to the set */
    void operator<<(const value_type& item) { insert(item->key(), item->value()); }

    /** Remove and return first item */
    void operator>>(value_type& item) { if (count() > 0) { item = first(); removeAt(0); } }
    ///@}

protected:
    friend class bucket::Internals;
    friend class Local<Map>;
    friend class map<K, T>;

    Map() = default;

    Map(const Map *other)
    {
        tree_->populate<value_type>(other);
    }

    ~Map() { tree_->deplete<value_type>(); }

private:
    Local<bucket::Tree> tree_;
};

template<class K, class T>
bool operator==(const Map<K, T> &a, const Map<K, T> &b) { return container::compare(&a, &b) == 0; }

template<class K, class T>
bool operator!=(const Map<K, T> &a, const Map<K, T> &b) { return container::compare(&a, &b) != 0; }

template<class K, class T>
bool operator<(const Map<K, T> &a, const Map<K, T> &b) { return container::compare(&a, &b) < 0; }

template<class K, class T>
bool operator>(const Map<K, T> &a, const Map<K, T> &b) { return container::compare(&a, &b) > 0; }

template<class K, class T>
bool operator<=(const Map<K, T> &a, const Map<K, T> &b) { return container::compare(&a, &b) <= 0; }

template<class K, class T>
bool operator>=(const Map<K, T> &a, const Map<K, T> &b) { return container::compare(&a, &b) >= 0; }

} // namespace cc
