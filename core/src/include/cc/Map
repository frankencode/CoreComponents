/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/containers>
#include <cc/Source>
#include <cc/SearchTree>

namespace cc {

template<class, class> class KeyValuePair;
template<class, class> class MapIterator;

#ifndef NDEBUG
class MapTester;
#endif

/** \class Map Map.h cc/Map
  * \ingroup container
  * \brief %Map data container
  * \see Set, List
  */
template<class Key, class Value = Key>
class Map: public Object
{
public:
    /// Item type
    typedef KeyValuePair<Key, Value> Item;

    /** Create a new map
      * \return new object instance
      */
    inline static Ref<Map> create() { return new Map(); }

    /** Create a shallow copy of another map
      * \param other another map
      * \return new object instance
      */
    inline static Ref<Map> replicate(const Map *other) { return new Map(*other); }

    /// Number of key-value pairs stored in this map
    inline int count() const { return tree_.count(); }

    /// Check if an index is valid
    inline bool has(int index) const {
        return 0 <= index && index < count();
    }

    /** Return a reference to an item
      * \param index map index
      * \return reference to the item
      */
    inline const Item &at(int index) const {
        Node *node = 0;
        if (!tree_.lookupByIndex(index, &node))
            CC_ASSERT(false);
        return node->item_;
    }

    /** Return a reference to a key at a certain index
      * \param index map index
      * \return reference to the key
      */
    inline Key keyAt(int index) const { return at(index)->key(); }

    /** Return a reference to a value at a certain index (readonly)
      * \param index map index
      * \return reference to the value
      */
    inline Value valueAt(int index) const { return at(index)->value(); }

    /** Modify value at given \a index
      * \param index map index
      * \param newValue new value to establish
      * \see establish()
      */
    void setValueAt(int index, const Value &newValue) {
        Node *node = 0;
        if (!tree_.lookupByIndex(index, &node))
            CC_ASSERT(false);
        node->item_->setValue(newValue);
    }

    /** Return the index of the first item greater or equal _a_
      */
    inline int from(const Key &a) const { return tree_.findFirstAboveOrEqual(a); }

    /** Return the index of the first item lower or equal _b_
      */
    inline int to(const Key &b) const { return tree_.findLastBelowOrEqual(b); }

    /** Insert a key-value mapping if no key-value mapping with the same key exists already.
      * If currentValue is non-null the current value the giving key maps to is returned.
      * The function returns a non-NULL ordinal handle if the new key-value mapping was inserted successfully.
      * \return ordinal handle
      */
    inline void *insert(const Key &key, const Value &value, Value *currentValue = 0, int *index = 0)
    {
        bool found = false;
        bool below = true;
        Item e(key, value);
        Node *k = tree_.find(e, &found, &below, index);
        if (found) {
            if (currentValue)
                *currentValue = k->item_->value();
            return nullptr;
        }
        Node *kn = new Node(e);
        tree_.attach(k, kn, below);
        return kn;
    }

    /** Remove a key-value mapping
      * \param key item key
      * \param index return index the key-value mapping occupied
      * \return true if a matching key-value pair was found and removed
      */
    inline bool remove(const Key &key, int *index = 0)
    {
        bool found;
        Node *k = tree_.find(Item(key), &found, 0, index);
        if (found)
            tree_.remove(k);
        return found;
    }

    /** Remove a key-value mapping at a given index
      * \param index map index
      * \return true if a matching key-value pair was found and removed
      */
    inline bool removeAt(int index) {
        Node *node = 0;
        if (!tree_.lookupByIndex(index, &node)) return false;
        tree_.remove(node);
        return true;
    }

    /** Insert or overwrite a key-value mapping.
      * \param key item key
      * \param value item value
      */
    inline void establish(const Key &key, const Value &value) {
        int index = 0;
        if (!insert(key, value, 0, &index))
            setValueAt(index, value);
    }

    /** Get the current index of a storage location
      * \param handle ordinal handle
      * \return current index of the storage location
      */
    static int getIndexOf(void *handle) {
        return Tree::getIndexOf(handle);
    }

    /** Lookup key-value pair by given key.
      * If a matching key-value pair is found the value is returned in 'value' and the
      * function returns with true. If a matching key-value pair could not be found
      * 'value' is not set and the function returns false.
      */
    template<class Value2>
    inline bool lookup(const Key &key, Value2 *value = 0, int *index = 0) const
    {
        bool found = false;
        Node *k = tree_.find(Item(key), &found, 0, index);
        if (found && (value))
            *value = k->item_->value();
        return found;
    }

    /** Retrieve value of an existing key-value mapping.
      */
    inline Value value(const Key &key, const Value &fallback = Value()) const
    {
        Value value = fallback;
        lookup(key, &value);
        return value;
    }

    /** Modify value of an existing key-value mapping.
      * \param key item key
      * \param newValue new value to set
      * \return true if key is valid (i.e. has been inserted before), otherwise false
      */
    bool setValue(const Key &key, const Value &newValue)
    {
        int index = 0;
        bool found = lookup(key, (Value *)0, &index);
        if (found) setValueAt(index, newValue);
        return found;
    }

    /** Check if the map contains a given key
      * \param key item key
      * \return true if the map contains the given key
      */
    inline bool contains(const Key &key) const { return lookup<Value>(key); }

    /** Establish a new key-value mapping
      * \param item new key-value pair to establish
      */
    inline void push(const Item &item)
    {
        establish(item->key(), item->value());
    }

    /** Remove first key-value mapping
      * \param item return key-value pair
      */
    inline void pop(Item *item)
    {
        CC_ASSERT(count() > 0);
        Node *k = static_cast<Node *>(tree_.min());
        *item = k->item_;
        tree_.remove(k);
    }

    /** Remove first key-value mapping
      * \return key-value pair
      */
    inline Item pop() {
        Item item;
        pop(&item);
        return item;
    }

    /// Reset this map to an empty map
    inline void deplete() { tree_.clear(); }

    /// \copydoc push(const Item &item)
    inline void operator<<(const Item &item) { push(item); }

    /** C++ iterator declarations
      * @{
      */
    typedef MapIterator<Key, Value> iterator;
    typedef MapIterator<Key, Value> const_iterator;
    iterator begin();
    iterator end();
    const_iterator begin() const;
    const_iterator end() const;
    /** @} */

    /** Source adapters
      * @{
      */
    template<class OutputType = Item>
    inline Ref< Source<OutputType> > getAll() const { return ContainerSource< Map, Pass<Item, OutputType> >::open(this); }

    template<class OutputType = Item>
    inline Ref< Source<OutputType> > getFromTo(const Key &a, const Key &b) { return ContainerSource< Map, Pass<Item, OutputType> >::open(this, from(a), to(b)); }

    template<class OutputType = Key>
    inline Ref< Source<OutputType> > getAllKeys() const { return ContainerSource<Map, GetKey<OutputType> >::open(this); }

    template<class OutputType = Value>
    inline Ref< Source<OutputType> > getAllValues() const { return ContainerSource<Map, GetValue<OutputType> >::open(this); }
    /** @} */

protected:
#ifndef NDEBUG
    friend class MapTester;
#endif

    template<class O = Key>
    class GetKey {
    public:
        typedef O OutputType;
        static OutputType get(const Item &item) { return item->key(); }
    };

    template<class O = Value>
    class GetValue {
    public:
        typedef O OutputType;
        static OutputType get(const Item &item) { return item->value(); }
    };

    typedef SearchTree< SearchNode<Item> > Tree;
    typedef typename Tree::Node Node;

    Map() {}
    explicit Map(const Map &b): tree_(b.tree_) {}

    const Map &operator=(const Map &b);

    Tree tree_;
    mutable Item nullItem_;
};

/** \brief Key value pair
  * \see Map
  */
template<class Key, class Value>
class KeyValuePair
{
public:
    KeyValuePair()
    {}

    KeyValuePair(const Key &key):
        instance_(key)
    {}

    KeyValuePair(const Key &key, const Value &value):
        instance_(key, value)
    {}

    inline bool operator< (const KeyValuePair &b) const { return instance_.key_ <  b.instance_.key_; }
    inline bool operator> (const KeyValuePair &b) const { return instance_.key_ >  b.instance_.key_; }
    inline bool operator==(const KeyValuePair &b) const { return instance_.key_ ==  b.instance_.key_; }
    inline bool operator!=(const KeyValuePair &b) const { return instance_.key_ !=  b.instance_.key_; }
    inline bool operator<=(const KeyValuePair &b) const { return instance_.key_ <=  b.instance_.key_; }
    inline bool operator>=(const KeyValuePair &b) const { return instance_.key_ >=  b.instance_.key_; }

    class Instance {
    public:
        inline Key key() const { return key_; }
        inline Value value() const { return value_; }
        inline void setValue(const Value &value) { value_ = value; }

    private:
        friend class KeyValuePair;
        Instance()
        {}
        Instance(const Key &key):
            key_(key), value_(Value{})
        {}
        Instance(const Key &key, const Value& value):
            key_(key), value_(value)
        {}
        Key key_;
        Value value_;
    };

    inline Instance *operator->() { return &instance_; }
    inline const Instance *operator->() const { return &instance_; }

private:
    Instance instance_;
};

template<class Key, class Value>
class MapIterator {
public:
    MapIterator(const Map<Key, Value> *m, int i):
        m_(m),
        i_(i)
    {}

    inline const KeyValuePair<Key, Value> &operator*() { return m_->at(i_); }
    inline MapIterator &operator++() { ++i_; return *this; }

    inline bool operator!=(const MapIterator &b) { return i_ != b.i_; }

private:
    const Map<Key, Value> *m_;
    int i_;
};

template<class Key, class Value>
typename Map<Key, Value>::iterator Map<Key, Value>::begin() { return iterator(this, 0); }

template<class Key, class Value>
typename Map<Key, Value>::iterator Map<Key, Value>::end() { return iterator(this, count()); }

template<class Key, class Value>
typename Map<Key, Value>::const_iterator Map<Key, Value>::begin() const { return const_iterator(this, 0); }

template<class Key, class Value>
typename Map<Key, Value>::const_iterator Map<Key, Value>::end() const { return const_iterator(this, count()); }

#ifndef NDEBUG
class MapTester: public SearchTreeTester
{
public:
    template<class Map>
    static bool test(const Map *map) {
        return SearchTreeTester::test(&map->tree_);
    }
};
#endif

} // namespace cc
