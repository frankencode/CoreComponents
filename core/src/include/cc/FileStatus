/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <sys/types.h>
#include <sys/stat.h>
#include <cc/files>
#include <cc/String>
#include <cc/SystemStream>

namespace cc {

class File;

typedef struct stat StructStat;

/** \class FileStatus cc/FileStatus
  * \ingroup file_system
  * \brief Read %File attributes
  * \see File
  * \todo rename to FileInfo
  */
class FileStatus
{
public:
    class Instance: public StructStat, public Object {
    public:
        /// %File or directory path
        String path() const { return path_; }

        /// %File type
        FileType type() const { return static_cast<FileType>(st_mode & S_IFMT); }

        /// %File access mask
        FileMode mode() const { return static_cast<FileMode>(st_mode & (~S_IFMT)); }

        /// %File size in number of bytes
        off_t size() const { return st_size; }

        /// %File size in number of blocks
        off_t sizeInBlocks() const { return st_blocks; }

        /// Block size
        off_t sizeOfBlock() const { return st_blksize; }

        /// %File owner user ID
        uid_t ownerId() const { return st_uid; }

        /// %File owner group ID
        gid_t groupId() const { return st_gid; }

        /// Time when file was last accessed
        double lastAccess() const { return st_atime; }

        /// Time when file was last modified
        double lastModified() const { return st_mtime; }

        /// Time when file meta information was last modified
        double lastChanged() const { return st_ctime; }

        /** %Set the file times
          * \param lastAccess time when file was last accessed
          * \param lastModified time when file was last modified
          */
        void setTimes(double lastAccess, double lastModified);

        /// ID of devices containing the file
        dev_t storageId() const { return st_dev; }

        /// Inode number
        ino_t inodeNumber() const { return st_ino; }

        /// Number of hard links (number of directory entries)
        nlink_t numberOfHardLinks() const { return st_nlink; }

        /// Device ID (if device file)
        dev_t deviceId() const { return st_rdev; }

        /// Returns true if file exists otherwise false
        bool isValid() const { return isValid_; }

    private:
        friend class FileStatus;

        Instance(const String &path, bool followSymlink);
        bool update();
        String path_;
        bool isValid_;
        bool followSymlink_;
    };

    FileStatus(const String &path = "", bool followSymlink = true):
        instance_{new Instance{path, followSymlink}}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return instance_; }

    explicit operator bool() const { return (*this)->isValid(); }

private:
    Ref<Instance> instance_;
};

} // namespace cc
