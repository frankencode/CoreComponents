/*
 * Copyright (C) 2007-2018 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/containers>
#include <cc/Source>
#include <cc/PileTree>

namespace cc {

template<class Item, class Extent>
class PileStop;

template<class Item, class Extent>
class PileSource;

template<class ItemType, class ExtentType>
class Pile: public Object
{
public:
    typedef ItemType Item;
    typedef ExtentType Extent;

    static Ref<Pile> create() { return new Pile; }

    void insertAt(int index, const Item &item, Extent extent) {
        CC_ASSERT((0 <= index) && (index <= count()));
        tree_.insertAt(index, item, extent);
    }

    void updateAt(int index, const Item &item, Extent extent) {
        CC_ASSERT(has(index));
        tree_.updateAt(index, item, extent);
    }

    void removeAt(int index, Item *item = nullptr) {
        CC_ASSERT(has(index));
        tree_.removeAt(index, item);
    }

    void append(const Item &item, Extent extent) { insertAt(count(), item, extent); }

    int count() const { return tree_.count(); }
    Extent extent() const { return tree_.extent(); }

    Extent extentAt(int index) const {
        CC_ASSERT(has(index));
        return tree_.extentAt(index);
    }

    bool updateExtentAt(int index, Extent extent) {
        CC_ASSERT(has(index));
        return tree_.updateExtentAt(index, extent);
    }

    Extent updateExtentAt(int index, const std::function<Extent(Extent)> &f) {
        CC_ASSERT(has(index));
        return tree_.updateExtentAt(index, f);
    }

    void getItemExtentAt(int index, Item *item, Extent *extent) const {
        CC_ASSERT(has(index));
        tree_.getItemExtentAt(index, item, extent);
    }

    void getView(Extent pos0, Extent pos1, int *index0, int *index1, Extent *itemPos0) const {
        tree_.getView(pos0, pos1, index0, index1, itemPos0);
    }

    bool lookup(Extent pos, Item *item = nullptr, int *index = nullptr, Extent *itemPos = nullptr) const {
        return tree_.lookup(pos, item, index, itemPos);
    }

    Extent getPosAt(int index) const {
        CC_ASSERT(has(index));
        return tree_.getPosAt(index);
    }

    bool has(int index) const { return index < tree_.count() && 0 <= index; }
    Item &at(int index) {
        CC_ASSERT(has(index));
        return tree_.at(index);
    }
    const Item &at(int index) const {
        CC_ASSERT(has(index));
        return tree_.at(index);
    }

    /** \name C++ iterators
      * @{
      */
    typedef cc::Iterator<Pile> iterator;
    typedef cc::ConstIterator<Pile> const_iterator;
    iterator begin() { return iterator(this, 0); }
    iterator end() { return iterator(this, count()); }
    const_iterator begin() const { return const_iterator(this, 0); }
    const_iterator end() const { return const_iterator(this, count()); }
    /** @} */

    /** \name Source adapters
      * @{
      */
    Ref< PileSource<Item, Extent> > getAll() const { return PileSource<Item, Extent>::open(this, 0, count()); }
    Ref< PileSource<Item, Extent> > getInRange(Extent pos0, Extent pos1) const { return PileSource<Item, Extent>::open(this, pos0, pos1); }
    /** @} */

private:
    Pile() = default;

    typedef PileTree<Item, Extent> Tree;
    Tree tree_;
};

template<class Item, class Extent>
class PileStop {
public:
    PileStop()
    {}

    PileStop(Extent pos, Extent extent, const Item &item):
        instance_(pos, extent, item)
    {}

    class Instance {
    public:
        inline Extent pos() const { return pos_; }
        inline Extent extent() const { return extent_; }
        inline Item item() const { return item_; }

    private:
        friend class PileStop;

        Instance()
        {}

        Instance(Extent pos, Extent extent, const Item &item):
            pos_(pos),
            extent_(extent),
            item_(item)
        {}

        Extent pos_;
        Extent extent_;
        Item item_;
    };

    inline const Instance *operator->() const { return &instance_; }

private:
    Instance instance_;
};

template<class Item, class Extent>
class PileSource: public Source< PileStop<Item, Extent> >
{
public:
    static Ref<PileSource> open(const Pile<Item, Extent> *layout, Extent pos0, Extent pos1) {
        return new PileSource(layout, pos0, pos1);
    }

    bool read(PileStop<Item, Extent> *layoutItem) override
    {
        if (i_ < i1_) {
            Item item;
            Extent extent;
            layout_->getItemExtentAt(i_, &item, &extent);
            *layoutItem = PileStop<Item, Extent>(x_, extent, item);
            ++i_;
            x_ += extent;
            return true;
        }
        return false;
    }

private:
    PileSource(const Pile<Item, Extent> *layout, Extent pos0, Extent pos1):
        layout_(layout)
    {
        layout->getView(pos0, pos1, &i_, &i1_, &x_);
    }

    const Pile<Item, Extent> *layout_;
    int i_, i1_;
    Extent x_;
};

} // namespace cc
