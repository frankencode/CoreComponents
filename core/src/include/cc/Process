/*
 * Copyright (C) 2019-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/files>
#include <cc/Command>

namespace cc {

/** \class Process cc/Process
  * \ingroup concurrency
  * \brief Child process creation and current process state
  */
class Process
{
public:
    using Stage = Command;

    class Instance: public Object
    {
    public:
        /// %Process ID of the child process
        pid_t id() const;

        /** \brief Send signal to the child process
          * \param signal the signal to deliver
          */
        void kill(Signal signal = Signal::Terminate);

        /** \brief Wait for child process termination
          * \return exit status of child process (<0 if signaled, exit status = -signal number)
          */
        int wait();

        /// Attached standard input channel/stream (if any, nullptr otherwise)
        SystemStream *input() const;

        /// Attached standard output channel/stream (if any, nullptr otherwise)
        SystemStream *output() const;

        /// Attached standard error channel/stream (if any, nullptr otherwise)
        SystemStream *error() const;

    private:
        friend class Process;

        Instance(Command &command);
        Instance(Command::Instance *command);
        ~Instance();

        pid_t pid_;
        bool groupLead_ { false };
        int exitStatus_ { 0 };
        Ref<SystemStream> standardStreams_[3];
    };

    Process() = default;

    /** \brief Spawn a new child process
      * \param command Executable path plus command line arguments
      */
    Process(const String &command)
    {
        Command c{command};
        instance_ = new Instance{c};
    }

   /** \brief Spawn a new child process
      * \param command Sub-process staging instructions
      */
    Process(Command::Instance *command):
        instance_{new Instance{command}}
    {}

    const Instance *operator->() const { return instance_; }
    Instance *operator->() { return instance_; }

    explicit operator bool() const { return instance_; }

    /** Change the current working directory of this process
      * \param path new directory path to enter
      */
    static void setWorkingDirectory(const String &path);

    /// Current working directory of this process
    static String getWorkingDirectory();

    /// Actual pathname of the executed command
    static String exePath();

    /** Set the file mode creation mask
      * \param newMask the new file mode mask
      * \param oldMask optionally return the old mask
      */
    static void setUserMask(FileMode newMask, FileMode *oldMask = nullptr);

    /// Return the real user ID
    static uid_t getRealUserId();

    /// Return the real group ID
    static gid_t getRealGroupId();

    /// Return the effective user ID
    static uid_t getEffectiveUserId();

    /// Return the effective group ID
    static gid_t getEffectiveGroupId();

    /// Return true if this process runs as super-user
    static bool isSuperUser();

    /// Set the user ID
    static void setUserId(uid_t uid);

    /// Set the group ID
    static void setGroupId(gid_t gid);

    /// Set the effective user ID
    static void setEffectiveUserId(uid_t uid);

    /// Set the effective group ID
    static void setEffectiveGroupId(gid_t gid);

    /** Read an environment variable
      * \param name name of the environment variable
      * \return value of the environment variable or "" if no value is set
      */
    static String getEnv(const String &name);

    /** Read an environment variable
      * \param name name of the environment variable
      * \param defaultValue default value
      * \return value of the environment variable or \a defaultValue if no value is set
      */
    static String getEnv(const String &name, const String &defaultValue);

    /** Set an environment variable
      * \param name name of the environment variable
      * \param value value to set
      */
    static void setEnv(const String &name, const String &value);

    /// Unset an environment variable
    static void unsetEnv(const String &name);

    /// Return the current environment of this process
    static EnvMap getEnvMap();

    /// Get the process ID of calling process
    static pid_t getId();

    /// Get the process ID of the parent process of the calling process
    static pid_t getParentId();

    /// Send a signal to a process
    static void kill(pid_t processId, Signal signal = Signal::Terminate);

    /// Send a signal to a process group
    static void killGroup(pid_t processGroupId, Signal signal = Signal::Terminate);

    /// Raise a signal against the calling process
    static void raise(Signal signal);

    /** Returns the default signal mask of this process before any modifications
      * by Thread::blockSignals() or Thread::unblockSignals()
      */
    static SignalSet *defaultSignalMask();

    /** Terminate this process
      * \param exitCode exit code (0..255)
      */
    static void exit(int exitCode);

    /// Daemonize this process
    static void daemonize();

    /// Returns true if this process is daemonized
    static bool isDaemonized();

    /// Make this process a leader of a new login session if the this process is not already a process group leader
    static pid_t makeSessionLeader();

private:
    static char **&environ();

    Ref<Instance> instance_;
};

} // namespace cc
