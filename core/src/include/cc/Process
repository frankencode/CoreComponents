/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <sys/types.h> // pid_t
#include <spawn.h>
#include <cc/files>
#include <cc/exceptions>
#include <cc/SignalSet>
#include <cc/EnvMap>
#include <cc/IoChannel>

namespace cc {

/** \class Process cc/Process
  * \ingroup concurrency
  * \brief Child process creation and current process state
  * \TODO add support for setting the initial CWD of a child process once posix_spawn_file_actions_addchdir() becomes available
  */
class Process: public Object
{
public:
    /** \brief Child process staging helper
      */
    class Staging: public Object
    {
    public:
        /** \brief Set command line arguments
          * \param args Argument list, first entry is the executable name
          * \return pointer to this object
          */
        Staging *setArgs(const StringList *args);

        /** \brief Set environment map
          * \param envMap The environment map to use for the new child process (or zero pointer to inherit the parents environment map)
          * \return pointer to this object
          */
        Staging *setEnvMap(const EnvMap *envMap);

        /** \brief Set the process group
          * \param groupId Group ID of the process group to join or 0 to make the new process lead a new group
          * \return pointer to this object
          */
        Staging *setProcessGroup(pid_t groupId = 0);

        /** \brief Set the signal mask
          * \param mask Initial signal mask for the new child process
          * \return pointer to this object
          */
        Staging *setSignalMask(const SignalSet *mask);

        /** \brief Reset signal handling strategy to the default for specific signals
          * \param set Set of signals to reset to default signal handling behavior
          * \return pointer to this object
          */
        Staging *setSignalDefault(const SignalSet *set);

        /** \brief Set initial working directory
          * \param path directory path
          * \return pointer to this object
          */
        Staging *setWorkingDirectory(const String &path);

        /** \brief Set standard input channel
          * \param channel IoChannel to use for standard input
          * \return pointer to this object
          * \see InputPipe
          */
        Staging *setInputChannel(IoChannel *channel);

        /** \brief Set standard output channel
          * \param channel IoChannel to use for standard output
          * \return pointer to this object
          * \see OutputPipe
          */
        Staging *setOutputChannel(IoChannel *channel);

        /** \brief Set standard error channel
          * \param channel IoChannel to use for standard error
          * \return pointer to this object
          * \see OutputPipe
          */
        Staging *setErrorChannel(IoChannel *channel);

        /** \brief Attach an I/O channel
          * \param channel IoChannel to attach
          * \param targetFd target file descriptor in the child's file descriptor table
          * \return pointer to this object
          */
        Staging *attachChannel(IoChannel *channel, int targetFd);

        /** \brief Set standard input
          * \param stream SystemStream to use for standard input
          * \return pointer to this objects
          */
        Staging *setInput(SystemStream *stream);

        /** \brief Set standard input
          * \param stream SystemStream to use for standard output
          * \return pointer to this objects
          */
        Staging *setOutput(SystemStream *stream);

        /** \brief Set standard input
          * \param stream SystemStream to use for standard error
          * \return pointer to this objects
          */
        Staging *setError(SystemStream *stream);

        /** \brief Attach an I/O stream
          * \param stream SystemStream to attach
          * \param targetFd target file descriptor in the child's file descriptor table
          * \return pointer to this object
          */
        Staging *attach(SystemStream *stream, int targetFd);

        /** \brief Spawn a new child process
          * \return new object instance
          */
        Ref<Process> start();

        /** \brief Spawn a new child process with automatically attached standard input/output channels
          * \return new object instance
          */
        Ref<Process> open();

    private:
        friend class Process;

        Staging(const String &command);
        ~Staging();

        void enableSpawnFlag(short flag);

        String command_;
        String execPath_;
        Ref<const StringList> args_;
        Ref<const EnvMap> envMap_;

        int spawnFlags_ { 0 };
        posix_spawnattr_t spawnAttributes_;
        posix_spawn_file_actions_t fileActions_;
        bool groupLead_ { false };
        Ref<IoChannel> channelHead_;
        Ref<SystemStream> standardStreams_[3];
    };

    /** \brief Create a new parameter stage
      * \param command Executable path plus command line arguments
      * \return new object instance
      */
    static Ref<Staging> stage(const String &command = String{});

    /** \brief Spawn a new child process with automatically attached standard input/output channels
      * \param command Executable path plus command line arguments
      * \return new object instance
      */
    static Ref<Process> open(const String &command);

    /** \brief Spawn a new child process
      * \param command Executable path plus command line arguments
      * \return new object instance
      */
    static Ref<Process> start(const String &command);

    /** \brief Spawn a new child process and wait for its termintation
      * \param command Executable path plus command line arguments
      * \return exit status
      */
    static int execute(const String &command);

    /// %Process ID of child process
    pid_t pid() const;

    /** \brief Send signal to the child process
      * \param signal the signal to deliver
      */
    void kill(Signal signal = Signal::Terminate);

    /** \brief Wait for child process termination
      * \return exit status of child process (<0 if signaled, exit status = -signal number)
      */
    int wait();

    /// Attached standard input channel/stream (if any, nullptr otherwise)
    SystemStream *input() const;

    /// Attached standard output channel/stream (if any, nullptr otherwise)
    SystemStream *output() const;

    /// Attached standard error channel/stream (if any, nullptr otherwise)
    SystemStream *error() const;

    /** Change the current working directory of this process
      * \param path new directory path to enter
      */
    static void cd(const String &path);

    /// Current working directory of this process
    static String getCwd();

    /// Actual pathname of the executed command
    static String exePath();

    static mode_t setUserMask(mode_t mask);

    static uid_t realUserId();
    static gid_t realGroupId();
    static uid_t effectiveUserId();
    static gid_t effectiveGroupId();
    static bool isSuperUser();
    static void setUserId(uid_t uid);
    static void setEffectiveUserId(uid_t uid);
    static void setPersona(uid_t uid, gid_t gid);

    static String getEnv(const String &key);
    static String getEnv(const String &key, const String &defaultValue);
    static void setEnv(const String &key, const String &value);
    static void unsetEnv(const String &key);
    static char **&environ();

    static Ref<EnvMap> getEnvMap();

    static pid_t id();
    static pid_t parentId();

    static void kill(pid_t processId, Signal signal = Signal::Terminate);
    static void killGroup(pid_t processGroupId, Signal signal);

    static void raise(Signal signal);

    /** Returns the default signal mask of this process before any modifications
      * by Thread::blockSignals() or Thread::unblockSignals()
      */
    static SignalSet *defaultSignalMask();

    /** terminate this process
      * \param exitCode exit code (0..255)
      */
    static void exit(int exitCode);

    /// Daemonize this process
    static void daemonize();

    /// Returns true if this process is daemonized
    static bool isDaemonized();

    /// Make this process a leader of a new login session if the this process is not already a process group leader
    static pid_t makeSessionLeader();

private:
    friend class Staging;
    static Ref<Process> bootstrap(const Staging *staging);
    Process(pid_t pid, const Staging *staging);
    ~Process();
    pid_t pid_;
    bool groupLead_ { false };
    int exitStatus_ { 0 };
    Ref<SystemStream> standardStreams_[3];
};

} // namespace cc
