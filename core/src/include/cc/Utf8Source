/*
 * Copyright (C) 2007-2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ByteSource>

namespace cc {

/** \class Utf8Source cc/Utf8Source
  * \ingroup unicode
  * \brief %Unicode UTF-8 decoding data source
  */
class Utf8Source
{
public:
    class Instance
    {
    public:
        /** Read the next %Unicode character
          * \param ch returns the %Unicode character read if any
          * \return true if not end of information, false otherwise
          * \exception UnicodeError
          */
        bool read(uchar_t *ch)
        {
            bool more = byteSource_->hasMore();
            if (more) {
                *ch = byteSource_->readUInt8();
                if ((*ch & 0x80) != 0) // distinguish 7 bit ASCII from multibyte sequence
                    *ch = readMultiByte(*ch);
            }
            return more;
        }

    private:
        friend class Utf8Source;

        class DecodingError: public UnicodeError {
        public:
            String message() const override;
        };

        Instance(const Stream &stream, CharArray *buffer):
            byteSource_{stream, buffer}
        {}

        Instance(const CharArray *buffer):
            byteSource_{buffer}
        {}

        char32_t readMultiByte(char32_t ch);

        ByteSource byteSource_;
    };

    /** Open a new UTF-8 decoding data source
      * \param stream underlying data stream
      * \param buffer input buffer (optional)
      */
    Utf8Source(const Stream &stream, CharArray *buffer = nullptr):
        instance_{stream, buffer}
    {}

    /** Open a new UTF-8 decoding data source
      * \param buffer input buffer
      */
    Utf8Source(const CharArray *buffer):
        instance_{buffer}
    {}

    Instance *operator->() { return &instance_; }

private:
    Instance instance_;
};

} // namespace cc
