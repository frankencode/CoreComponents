/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/ByteSource>

namespace cc {

/** \class Utf8Source cc/Utf8Source
  * \ingroup unicode
  * \brief UTF-8 decoding data source
  * \exception UnicodeError
  */
class Utf8Source
{
public:
    /** Create a new UTF-8 decoding data source
      * \param stream Underlying data stream
      */
    Utf8Source(const Stream &stream):
        byteSource_{stream}
    {}

    /** Create a new UTF-8 decoding data source
      * \param stream Underlying data stream
      * \param buffer Input buffer
      */
    Utf8Source(const Stream &stream, const Bytes &buffer):
        byteSource_{stream, buffer}
    {}

    /** Create a new UTF-8 decoding data source
      * \param buffer Input buffer
      */
    Utf8Source(const Bytes &buffer):
        byteSource_{buffer}
    {}

    /** Read the next %Unicode character
      * \param ch Returns the %Unicode character read if any
      * \return True if not end of information, false otherwise
      */
    bool read(Out<char32_t> ch)
    {
        bool hasMore = byteSource_.prefetch();
        if (hasMore) {
            char32_t w = byteSource_.readUInt8();
            if ((w & 0x80) != 0) // distinguish 7 bit ASCII from multibyte sequence
                w = readMultiByte(w);
            ch << w;
        }
        return hasMore;
    }

private:
    class DecodingError: public UnicodeError {
    public:
        String message() const override;
    };

    char32_t readMultiByte(char32_t ch);

    ByteSource byteSource_;
};

} // namespace cc
