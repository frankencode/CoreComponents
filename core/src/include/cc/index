/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <string.h>
#include <iterator>
#include <limits>
#include <type_traits>
#include <cc/Local>
#include <cc/BucketMap>
#include <cc/debug> // DEBUG
#include <cc/Format> // DEBUG

namespace cc {
namespace index {

typedef int64_t Weight;

struct Branch;

struct Node
{
    static constexpr unsigned Capacity = 16;

    Node(bool isBranch = false):
        isBranch_{isBranch}
    {}

    bool isBranch_;
    unsigned fill_ { 0 };
    Branch *parent_ { nullptr };
    Node *succ_ { nullptr };
};

struct Head
{
    Weight weight_;
    Node *node_;
};

class Branch: public Node
{
public:
    Branch(): Node{true} {}

    Local<Head> at(unsigned nodeIndex) const {
        assert(nodeIndex < fill_);
        return Local<Head>{
            .weight_ = weight_[nodeIndex],
            .node_ = node_[nodeIndex]
        };
    }

    void push(unsigned nodeIndex, const Local<Head> &head);
    void pop(unsigned nodeIndex);

    Node *nodeAt(unsigned nodeIndex) const { assert(nodeIndex < fill_); return node_[nodeIndex]; }
    Weight weightAt(unsigned nodeIndex) const { assert(nodeIndex < fill_); return weight_[nodeIndex]; }
    Weight& weightAt(unsigned nodeIndex) { assert(nodeIndex < fill_); return weight_[nodeIndex]; }

    void copyToPred(Branch *pred);

private:
    Weight weight_[Node::Capacity];
    Node *node_[Node::Capacity];
};

template<class Item, bool Trivial>
class LeafData: public Node
{
public:
    LeafData() = default;

    Item &at(unsigned nodeIndex) { return slot_[map_->mapToSlot(nodeIndex, fill_)]; }
    const Item &at(unsigned nodeIndex) const { return slot_[map_->mapToSlot(nodeIndex, fill_)]; }

    void push(unsigned nodeIndex, const Item &item) { slot_[map_->pushEntry(nodeIndex, &fill_)] = item; }
    void pop(unsigned nodeIndex) { map_->popEntry(nodeIndex, &fill_); }

    void copyToPred(LeafData *pred) const
    {
        for (unsigned i = 0; i < fill_; ++i)
            pred->push(pred->fill_, at(i));
    }

private:
    Local<BucketMap<Node::Capacity>> map_;
    Item slot_[Node::Capacity];
};

template<class Item>
class LeafData<Item, true>: public Node
{
public:
    LeafData() = default;

    Item &at(unsigned nodeIndex)
    {
        assert(nodeIndex < fill_);
        return slot_[nodeIndex];
    }

    const Item &at(unsigned nodeIndex) const
    {
        assert(nodeIndex < fill_);
        return slot_[nodeIndex];
    }

    void push(unsigned nodeIndex, const Item &item)
    {
        assert(fill_ < Node::Capacity);
        assert(nodeIndex <= fill_);

        if (nodeIndex < fill_)
            ::memmove(&slot_[nodeIndex + 1], &slot_[nodeIndex], (fill_ - nodeIndex) * sizeof(Item));

        slot_[nodeIndex] = item;
        ++fill_;
    }

    void pop(unsigned nodeIndex)
    {
        assert(fill_ > 0);
        assert(nodeIndex < fill_);

        --fill_;
        if (nodeIndex < fill_) {
            ::memmove(&slot_[nodeIndex], &slot_[nodeIndex + 1], (fill_ - nodeIndex) * sizeof(Item));
        }
    }

    void copyToPred(LeafData *pred) const
    {
        assert(pred->fill_ + fill_ <= Node::Capacity);

        ::memcpy(&pred->slot_[pred->fill_], &slot_[0], fill_ * sizeof(Item));
        pred->fill_ += fill_;
    }

private:
    Item slot_[Node::Capacity];
};

template<class Item>
class Leaf: public LeafData<Item, std::is_trivially_copyable<Item>::value && sizeof(Item) <= 2 * sizeof(void *)>
{
public:
    using Node::isBranch_;

    Leaf() { isBranch_ = 0; }

    Weight weightAt(unsigned nodeIndex) const { return 1; }
};

class Path;
class SearchPath;

class TreeData
{
protected:
    friend class Path;
    friend class SearchPath;

    unsigned height_ { 0 };
    #ifndef NDEBUG
    uint64_t revision_ { 0 };
    #endif

    Weight rootWeight_ { 0 };
    Node *rootNode_ { nullptr };
};

class Path
{
public:
    Path():
        node_{nullptr}
    {}

    Path(const TreeData *tree):
        node_{tree->rootNode_},
        depth_{0}
    {
        egress_[0] = 0; // silence gcc
    }

    Path(const TreeData *tree, Weight index, bool insertion = false)
    {
        if (tree->height_ == 0) {
            node_ = tree->rootNode_;
            depth_ = 0;
            egress_[0] = index;
        }
        else {
            if (index + !insertion >= tree->rootWeight_) {
                unsigned depth = 0;
                Node *node = tree->rootNode_;
                while (node->isBranch_) {
                    const unsigned egress = node->fill_ - 1;
                    node = static_cast<Branch *>(node)->nodeAt(egress);
                    egress_[depth] = egress;
                    ++depth;
                }
                node_ = node;
                depth_ = depth;
                egress_[depth] = node->fill_ - !insertion;
            }
            else if (index <= 0) {
                unsigned depth = 0;
                Node *node = tree->rootNode_;
                while (node->isBranch_) {
                    node = static_cast<Branch *>(node)->nodeAt(0);
                    egress_[depth] = 0;
                    ++depth;
                }
                node_ = node;
                depth_ = depth;
                egress_[depth] = 0;
            }
            else {
                Weight offset0 = 0;
                unsigned depth = 0;
                Node *node = tree->rootNode_;
                while (node->isBranch_) {
                    Branch *branch = static_cast<Branch *>(node);
                    #if 0
                    int64_t sums[Node::Capacity];
                    {
                        int64_t sum = offset0;
                        for (unsigned i = 0; i < branch->fill_; ++i) {
                            sum += branch->weightAt(i);
                            sums[i] = sum;
                        }
                    }
                    unsigned i = 0;
                    {
                        unsigned j = branch->fill_ - 1;
                        while (true) {
                            unsigned m = (i + j) >> 1;
                            if (m == i) break;
                            if (sums[m] < index + 1) i = m;
                            else j = m;
                        }
                        if (sums[i] <= index) i = j;
                    }
                    node = branch->nodeAt(i);
                    egress_[depth] = i;
                    ++depth;
                    if (i > 0) offset0 = sums[i - 1];
                    #endif
                    #if 1
                    for (unsigned i = 0; i < branch->fill_; ++i) {
                        const Weight offset1 = offset0 + branch->weightAt(i);
                        if (index < offset1) {
                            node = branch->nodeAt(i);
                            egress_[depth] = i;
                            ++depth;
                            break;
                        }
                        offset0 = offset1;
                    }
                    #endif
                }
                node_ = node;
                depth_ = depth;
                egress_[depth] = index - offset0;
            }
        }
    }

    explicit operator bool() const { return node_; }
    Node *node() const { return node_; }
    Branch *branch() const { assert(node_ && node_->isBranch_); return static_cast<Branch *>(node_); }
    template<class Item> Leaf<Item> *leaf() const { assert(node_ && !node_->isBranch_); return static_cast<Leaf<Item> *>(node_); }

    unsigned depth() const { return depth_; }
    void grow() { ++depth_; ::memmove(egress_ + 1, egress_, depth_); egress_[0] = 0; }

    unsigned nodeIndex() const { return egress_[depth_]; }
    void setNodeIndex(unsigned newValue) { egress_[depth_] = newValue; }

    template<class Item> Item &item() const { return leaf<Item>()->at(egress_[depth_]); }

    bool hasPred() const
    {
        bool yes = false;
        for (unsigned i = 0; i < depth_; ++i) {
            if (egress_[i] != 0) {
                yes = true;
                break;
            }
        }
        return yes;
    }

    Path getPred() const { Local<Path> path{*this}; path->stepPred(); return path; }

    bool hasSucc() const { return node_ && node_->succ_; }
    Path getSucc() const { Local<Path> path{*this}; path->stepSucc(); return path; }

    bool hasParent() const { return depth_ > 0; }
    Path getParent() const { Local<Path> path{*this}; path->stepUp(); return path; }

    bool stepPred();
    bool stepSucc();

    unsigned getOrigin() const { assert(depth_ > 0); return egress_[depth_ - 1]; }
    void setOrigin(unsigned newValue) { assert(depth_ > 0); egress_[depth_ - 1] = newValue; }

    unsigned getOriginAtDepth(unsigned depth) const { assert(depth > 0); return egress_[depth - 1]; }
    void setOriginAtDepth(unsigned depth, unsigned newValue) { assert(depth > 0); egress_[depth - 1] = newValue; }

    String toString() const // DEBUG
    {
        return Format{} << "Path { depth: " << depth_ << ", getOrigin(): " << ((depth_ > 0) ? getOrigin() : 0u) << ", origin: 0x" << hex(getOrigin(), 16) << ", nodeIndex: " << nodeIndex() << ", node: " << (void *)node_ << ", fill: " << (node_ ? node_->fill_ : 0u) << ", parent: " << (void *)(node_ ? node_->parent_ : nullptr) << " }";
    }

protected:
    void stepUp()
    {
        assert(depth_ > 0);
        node_ = node_->parent_;
        --depth_;
    }

    char egress_[16];
    Node *node_;
    unsigned depth_;
};

class SearchPath: public Path
{
public:
    SearchPath(const TreeData *tree):
        Path{tree}
    {
        range_[0][0] = 0;
        range_[0][1] = tree->rootWeight_;
    }

    explicit operator bool() const { return node_ && !node_->isBranch_; }

    template<class Item>
    const Item &item() const {
        assert(bool(*this));
        return static_cast<const Leaf<Item> *>(node_)->at(egress_[depth_]);
    }

    void stepTo(Weight index)
    {
        assert(range_[0][0] <= index && index < range_[0][1]);

        Node *node = node_;
        unsigned depth = depth_;
        for (; depth > 0; --depth) {
            if (range_[depth][0] <= index && index < range_[depth][1])
                break;
            node = node->parent_;
        }

        Weight offset0 = range_[depth][0];
        if (node->isBranch_) {
            do {
                const Branch *branch = static_cast<const Branch *>(node);
                for (unsigned i = 0; i < branch->fill_; ++i) {
                    const Weight offset1 = offset0 + branch->weightAt(i);
                    if (index < offset1) {
                        node = branch->nodeAt(i);
                        egress_[depth] = i;
                        ++depth;
                        range_[depth][0] = offset0;
                        range_[depth][1] = offset1;
                        break;
                    }
                    offset0 = offset1;
                }
            }
            while (node->isBranch_);

            depth_ = depth;
            node_ = node;
        }
        egress_[depth] = index - offset0;
    }

    Weight count() const { return range_[0][1]; }

private:
    Weight range_[16][2];
};

template<class T>
class SearchArray
{
public:
    typedef T Item;
    typedef Weight Index;

    const Item &at(Index index) const
    {
        path_->stepTo(index);
        return path_->item<Item>();
    }

    const Path *pathTo(Index index) const
    {
        path_->stepTo(index);
        return path_;
    }

    Index count() const { return path_->count(); }

private:
    friend class Local<SearchArray>;
    SearchArray(const TreeData *tree):
        path_{tree}
    {}
    mutable Local<SearchPath> path_;
};

class Tree: public TreeData
{
public:
    template<class Item>
    Item &at(Weight index)
    {
        return getItemAt<Item>(index);
        #if 0
        return (height_ == 0) ?
            static_cast<Leaf<Item> *>(rootNode_)->at(index) :
            Local<index::Path>{this, index}->item<Item>();
        #endif
    }

    template<class Item>
    const Item &at(Weight index) const
    {
        return getItemAt<Item>(index);
        #if 0
        return (height_ == 0) ?
            static_cast<Leaf<Item> *>(rootNode_)->at(index) :
            Local<index::Path>{this, index}->item<Item>();
        #endif
    }

    template<class Item>
    Item &getItemAt(Weight index) const // FIXME: make a non-template method delivering leaf and offset (and make private)
    {
        assert(0 <= index && index < rootWeight_);

        Node *node = rootNode_;
        Weight offset0 = 0;
        while (node->isBranch_) {
            const Branch *branch = static_cast<const Branch *>(node);
            for (unsigned i = 0; i < branch->fill_; ++i) {
                Weight offset1 = offset0 + branch->weightAt(i);
                if (index < offset1) {
                    node = branch->nodeAt(i);
                    break;
                }
                offset0 = offset1;
            }
        }
        return static_cast<Leaf<Item> *>(node)->at(index - offset0);
    }

    Weight count() const { return rootWeight_; }

    template<class Item>
    void push(Weight index, const Item &item);

    template<class Item>
    void push(Path *path, const Item &item);

    template<class Item>
    void pop(Weight index);

    template<class Item>
    void pop(const Path *path);

    template<class Item>
    void deplete()
    {
        if (rootNode_) {
            deplete<Item>(rootNode_);
            *this = Tree{};
        }
    }

    #ifndef NDEBUG
    uint64_t revision() const { return revision_; }
    #endif

    String dotify() const;

private:
    unsigned commonDepth(const Path *first, const Path *second);

    template<class Node>
    void dissipateForward(const Path *pred, const Path *dest);

    template<class Node>
    void dissipateBackward(const Path *dest, const Path *succ);

    template<class Node>
    void dissipateToPred(Path *dest, Path *pred);

    template<class Node>
    void dissipateToSucc(Path *dest, Path *succ);

    template<class Item>
    void pushInitial(const Item &item);

    template<class Item>
    void deplete(Node *node);

    void updateWeights(const Path *path, Weight delta, unsigned minDepth);

    void updateWeights(const Path *path, Weight delta)
    {
        updateWeights(path, delta, 0);
        rootWeight_ += delta;
    }

    void shiftWeights(const Path *from, const Path *to, Weight delta)
    {
        unsigned minDepth = commonDepth(from, to);
        updateWeights(from, -delta, minDepth);
        updateWeights(to  ,  delta, minDepth);
    }

    template<class Node>
    void dissipate(Path *dest);

    template<class Node>
    void dissipateMax(Path *dest);

    void joinSucc(Path *path, Node *newNode);

    template<class Node>
    void relieve(const Path *dest, bool neighbor = false);

    template<class Node>
    void collapseSucc(const Path *dest, const Path *succ);

    void reduce();

    void dotifyNode(Format &format, const Node *node, Weight weight, unsigned origin = 0u) const;
};

template<class Node>
void Tree::dissipateForward(const Path *pred, const Path *dest)
{
    Node *a = static_cast<Node *>(pred->node());
    Node *b = static_cast<Node *>(dest->node());

    assert(b->fill_ < Node::Capacity);
    assert(a->fill_ > 0);

    Weight delta = a->weightAt(a->fill_ - 1);

    b->push(0, a->at(a->fill_ - 1));
    a->pop(a->fill_ - 1);

    shiftWeights(pred, dest, delta);
}

template<class Node>
void Tree::dissipateBackward(const Path *dest, const Path *succ)
{
    Node *a = static_cast<Node *>(dest->node());
    Node *b = static_cast<Node *>(succ->node());

    assert(a->fill_ < Node::Capacity);
    assert(b->fill_ > 0);

    Weight delta = b->weightAt(0);

    a->push(a->fill_, b->at(0));
    b->pop(0);

    shiftWeights(succ, dest, delta);
}

template<class Node>
void Tree::dissipateToPred(Path *dest, Path *pred)
{
    if (dest->nodeIndex() > 0) {
        dissipateBackward<Node>(pred, dest);
        dest->setNodeIndex(dest->nodeIndex() - 1);
    }
    else {
        *dest = *pred;
        dest->setNodeIndex(dest->node()->fill_);
    }
}

template<class Node>
void Tree::dissipateToSucc(Path *dest, Path *succ)
{
    if (dest->nodeIndex() < dest->node()->fill_) {
        dissipateForward<Node>(dest, succ);
    }
    else {
        *dest = *succ;
        dest->setNodeIndex(0);
    }
}

template<class Item>
void Tree::push(Weight index, const Item &item)
{
    do {
        if (height_ == 0) {
            Node *node = rootNode_;
            if (node) {
                if (node->fill_ < Node::Capacity) {
                    static_cast<Leaf<Item> *>(node)->push(index, item);
                    ++rootWeight_;
                    #ifndef NDEBUG
                    ++revision_;
                    #endif
                    break;
                }
            }
            else {
                Leaf<Item> *leaf = new Leaf<Item>;
                leaf->push(0, item);
                rootNode_ = leaf;
                rootWeight_ = 1;
                #ifndef NDEBUG
                ++revision_;
                #endif
                break;
            }
        }

        Local<Path> path{this, index, true};
        push(&path, item);
    }
    while (false);
}

template<class Item>
void Tree::push(Path *path, const Item &item)
{
    assert(*path);
    dissipate<Leaf<Item>>(path);
    static_cast<Leaf<Item> *>(path->node())->push(path->nodeIndex(), item);
    updateWeights(path, 1);
    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class Node>
void Tree::dissipate(Path *dest)
{
    do {
        if (dest->node()->fill_ < Node::Capacity) break;

        if (!dest->node()->isBranch_) {
            if (dest->hasSucc() && dest->hasPred()) {
                Local<Path> pred = dest->getPred();
                if (pred->node()->fill_ < Node::Capacity) {
                    dissipateToPred<Node>(dest, &pred);
                    break;
                }
            }
        }

        Local<Path> succ = dest->getSucc();

        if (!succ || succ->node()->fill_ == Node::Capacity) {
            joinSucc(dest, new Node);
            succ = dest->getSucc();
        }

        dissipateToSucc<Node>(dest, &succ);
    }
    while (false);
}

template<class Item>
void Tree::pop(Weight index)
{
    if (height_ == 0) {
        Node *node = rootNode_;
        if (count() > 1) {
            static_cast<Leaf<Item> *>(node)->pop(index);
            --rootWeight_;
        }
        else
            deplete<Item>();
    }
    else {
        Local<Path> path{this, index};
        pop<Item>(path);
    }

    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class Item>
void Tree::pop(const Path *path)
{
    if (count() > 1) {
        assert(*path);
        path->leaf<Item>()->pop(path->nodeIndex());
        updateWeights(path, -1);
        relieve<Leaf<Item>>(path);
        reduce();
    }
    else
        deplete<Item>();
}

template<class Node>
void Tree::relieve(const Path *dest, bool neighbor)
{
    const unsigned minFill = Node::Capacity >> 1;

    if (dest->node()->fill_ < minFill) {
        do {
            Local<Path> succ = dest->getSucc();
            if (succ) {
                if (succ->node()->fill_ > minFill) {
                    dissipateBackward<Node>(dest, succ);
                    break;
                }
            }

            Local<Path> pred = dest->getPred();
            if (pred) {
                if (pred->node()->fill_ > minFill) {
                    dissipateForward<Node>(pred, dest);
                    break;
                }
            }

            if (succ) collapseSucc<Node>(dest, succ);
            else if (pred) collapseSucc<Node>(pred, dest);
        }
        while (false);
    }
    else if (!neighbor && dest->hasSucc()) {
        if (dest->node()->succ_->fill_ < minFill) {
            Local<Path> succ = dest->getSucc();
            relieve<Node>(succ, true);
        }
    }
}

template<class Node>
void Tree::collapseSucc(const Path *dest, const Path *succ)
{
    unsigned succOrigin = succ->getOrigin();
    shiftWeights(succ, dest, succ->node()->parent_->weightAt(succOrigin));
    static_cast<Node *>(succ->node())->copyToPred(static_cast<Node *>(dest->node()));
    Local<Path> parent = succ->getParent();
    parent->branch()->pop(succOrigin);
    dest->node()->succ_ = succ->node()->succ_;
    delete static_cast<Node *>(succ->node());
    relieve<Branch>(parent);
}

template<class Item>
void Tree::deplete(Node *node)
{
    if (node->isBranch_) {
        Branch *branch = static_cast<Branch *>(node);
        for (unsigned i = 0; i < branch->fill_; ++i)
            deplete<Item>(branch->nodeAt(i));
        delete branch;
    }
    else {
        delete static_cast<Leaf<Item> *>(node);
    }
}

template<class Item, class Tree, class Node>
class TreeIterator:
    public std::iterator<
        /*iterator_category*/ std::forward_iterator_tag,
        /*value_type*/        Item,
        /*difference_type*/   Weight,
        /*pointer*/           void,
        /*reference*/         Item
    >
{
public:
    TreeIterator():
        index_{std::numeric_limits<Weight>::max()}
    {}

    TreeIterator(Tree *tree, Weight index):
        #ifndef NDEBUG
        tree_{tree},
        revision_{tree_->revision()},
        #endif
        index_{index}
    {
        Local<Path> path{tree, index_};
        node_ = path->node();
        nodeIndex_ = path->nodeIndex();
        if (!node_)
            index_ = std::numeric_limits<Weight>::max();
    }

    Item &operator*() {
        assert(node_); // cannot deference an exhausted iterator
        return static_cast<Leaf<Item> *>(node_)->at(nodeIndex_);
    }

    Item *operator->() const { return &**this; }

    TreeIterator &operator++()
    {
        assert(index_ != std::numeric_limits<Weight>::max()); // cannot increment an exhausted iterator
        assert(revision_ == tree_->revision()); // cannot modify container while iterating it
        ++index_;
        ++nodeIndex_;
        if (nodeIndex_ == node_->fill_) {
            nodeIndex_ = 0;
            node_ = node_->succ_;
            if (!node_)
                index_ = std::numeric_limits<Weight>::max();
        }

        return *this;
    }

    Weight operator-(const TreeIterator &b) const { return index_ - b.index_; }
    bool operator<(const TreeIterator &b) const { return index_ < b.index_; }

    bool operator==(const TreeIterator &b) const { return index_ == b.index_; }
    bool operator!=(const TreeIterator &b) const { return index_ != b.index_; }

private:
    #ifndef NDEBUG
    const Tree *tree_;
    uint64_t revision_;
    #endif
    Weight index_;
    Node *node_;
    unsigned nodeIndex_;
};

template<class Item>
using ConstIterator = TreeIterator<const Item, const Tree, Node>;

template<class Item>
using Iterator = TreeIterator<Item, Tree, Node>;

}} // namespace cc::index
