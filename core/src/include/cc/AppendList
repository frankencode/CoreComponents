/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <iterator>
#include <cassert>

namespace cc {

template<class T>
class AppendListIterator;

template<class T>
class AppendListTransaction;

template<class T>
struct AppendListNode
{
    T item_;
    AppendListNode *next_;
};

/** \class AppendList cc/AppendList
  * \ingroup container_lowlevel
  * \brief Single-linked list data container
  * \tparam T Item type
  *
  * AppendList is an as simple as it gets list data structure based on a single-linked list.
  * The AppendList out-performs the List for short lists (smaller than 10 items) in both speed and memory consumption.
  * Construction of an empty AppendList does not imply a memory allocation.
  */
template<class T>
class AppendList
{
public:
    using Item = T; ///< Item type

    /** Create an empty list
      */
    AppendList() = default;

    /** Construct with initial \a items
      */
    AppendList(std::initializer_list<T> items)
    {
        for (const auto &x: items) pushBack(x);
    }

    /** Create a deep copy of \a other
      */
    AppendList(const AppendList &other)
    {
        *this = other;
    }

    /** Take over \a other
      */
    AppendList(AppendList &&other)
    {
        *this = move(other);
    }

    /** Take over \a other
      */
    AppendList &operator=(AppendList &&other)
    {
        head_ = other.head_;
        tail_ = other.tail_;
        count_ = other.count_;
        other.head_ = nullptr;
        other.tail_ = nullptr;
        other.count_ = 0;
        return *this;
    }

    /** Create a deep copy of \a other
      */
    AppendList &operator=(const AppendList &other)
    {
        deplete();
        for (const T &item: other) pushBack(item);
        return *this;
    }

    /** Destroy the list
      */
    ~AppendList()
    {
        cleanup();
    }

    /** Insert a new last item
      * \param args construction arguments
      */
    template<class... Args>
    void emplaceBack(Args... args)
    {
        joinBack(new Node{args...});
    }

    /** Insert \a item as a new last item
      */
    void pushBack(const T &item)
    {
        joinBack(new Node{item});
    }

    /** \copydoc pushBack()
      */
    void append(const T &item)
    {
        joinBack(new Node{item});
    }

    /** Get constant reference to first item
      */
    const T &first() const { assert(!isEmpty()); return head_->item_; }

    /** Get constant reference to last item
      */
    const T &last() const { assert(!isEmpty()); return tail_->item_; }

    using Transaction = AppendListTransaction<T>; ///< %Transaction type

    Transaction transaction() { return Transaction{*this}; } ///< Begin a transaction

    using const_iterator = AppendListIterator<T>; ///< Readonly value iterator
    using iterator = const_iterator; ///< Readonly value iterator

    const_iterator begin() const { return const_iterator{head_}; } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator end() const { return const_iterator{}; } ///< %Return readonly iterator pointing behind the last item

    bool isEmpty() const { return !head_; } ///< %Tell if empty
    long count() const { return count_; } ///< %Get number of items
    long size() const { return count_; } ///< \copydoc count()

    /** Check if this list is non-empty
      */
    explicit operator bool() const { return count_ > 0; }

    /** \copydoc count()
      */
    long operator+() const { return count_; }

    /** Remove all items
      */
    void deplete()
    {
        cleanup();
        head_ = nullptr;
        tail_ = nullptr;
        count_ = 0;
    }

private:
    friend class AppendListIterator<T>;
    friend class AppendListTransaction<T>;

    using Node = AppendListNode<T>;

    void rollbackTo(Node *tailSaved)
    {
        if (tailSaved) {
            for (Node *node = tailSaved->next_; node;)
            {
                Node *prev = node;
                node = node->next_;
                delete prev;
                --count_;
            }
            tailSaved->next_ = nullptr;
        }
        else deplete();
    }

    void cleanup()
    {
        for (Node *node = head_; node;)
        {
            Node *prev = node;
            node = node->next_;
            delete prev;
        }
    }

    void joinBack(Node *node)
    {
        if (tail_)
            tail_->next_ = node;
        else
            head_ = node;

        tail_ = node;
        ++count_;
    }

    Node *head_ { nullptr };
    Node *tail_ { nullptr };
    long count_ { 0 };
};

/** \class AppendListTransaction cc/AppendList
  * \brief Optionally rollback one or many append operations in one go
  */
template<class T>
class AppendListTransaction
{
public:
    /** Create a transaction for \a list
      */
    AppendListTransaction(AppendList<T> &list):
        list_{list},
        tailSaved_{list.tail_}
    {}

    /** Rollback append operations
      */
    void rollback()
    {
        list_.rollbackTo(tailSaved_);
    }

    /** Check if this transaction does not contain any append operations
      */
    bool isEmpty() const
    {
        return !tailSaved_ || !tailSaved_->next_;
    }

private:
    using Node = typename AppendList<T>::Node;
    AppendList<T> &list_;
    Node *tailSaved_;
};

/** \class AppendListIterator cc/AppendList
  * \brief Value iterator type for the AppendList
  */
template<class T>
class AppendListIterator:
    public std::iterator<
        /*iterator_category*/ std::forward_iterator_tag,
        /*value_type*/        T,
        /*difference_type*/   unsigned,
        /*pointer*/           T *,
        /*reference*/         T &
    >
{
public:
    using Node = AppendListNode<T>;

    /** Create a null iterator
      */
    AppendListIterator():
        node_{nullptr}
    {}

    /** Check if this is a null iterator (explicitly cast to bool)
      */
    explicit operator bool() const { return node_; }

    /** Get readonly access to current item value
      */
    const T &operator*() const { return node_->item_; }

    /** Get access to current item value
      */
    T &operator*() { assert(node_); return node_->item_; }

    /** Readonly member access to current item value
      */
    const T *operator->() const { return &node_->item_; }

    /** Member access to current item value
      */
    T *operator->() { return &node_->item_; }

    /** Step to the next item (prefix increment operator)
      */
    AppendListIterator &operator++()
    {
        assert(node_);
        node_ = node_->next_;
        return *this;
    }

    /** Step to the next item and return the old iterator value (postfix increment operator)
      */
    AppendListIterator operator++(int)
    {
        assert(node_);
        auto old = *this;
        ++(*this);
        return old;
    }

    /** Get iterator value stepped \a delta items forward (addition operator)
      */
    AppendListIterator operator+(unsigned delta) const
    {
        AppendListIterator it = *this;
        for (; delta; --delta) ++it;
        return it;
    }

    /** Equal to operator
      */
    bool operator==(const AppendListIterator &other) const
    {
        return node_ == other.node_;
    }

    /** Not equal to operator
      */
    bool operator!=(const AppendListIterator &other) const
    {
        return node_ != other.node_;
    }

private:
    friend class AppendList<T>;

    explicit AppendListIterator(Node *node):
        node_{node}
    {}

    Node *node_;
};

} // namespace cc
