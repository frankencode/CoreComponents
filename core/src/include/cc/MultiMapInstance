/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bucket>
#include <cc/containers>
#include <cc/KeyValue>

namespace cc {

template<class K, class T>
class MultiMap;

/** \class MultiMapInstance cc/MultiMapInstance
  * \ingroup container_lowlevel
  * \brief Multi-map data container
  * \tparam K key type
  * \tparam T mapped type
  * \see Map, MultiSet, KeyValue, KeySource, ValueSource
  */
template<class K, class T = K>
class MultiMapInstance: public Object
{
public:
    typedef KeyValue<K, T> Item; ///< item type
    typedef bucket::Weight Index; ///< index type
    typedef K Key; ///< key type
    typedef T Value; ///< mapped value type

    typedef bucket::Iterator<Item> Iterator; ///< iterator type
    typedef bucket::ConstIterator<Item> ConstIterator; ///< constant iterator type

    typedef Iterator iterator; ///< \internal
    typedef ConstIterator const_iterator; ///< \internal

    /** Create a new relation
      * \return new object instance
      */
    static Ref<MultiMapInstance> create() { return new MultiMapInstance; }

    /** Create a copy of another map
      * \param other the map to copy
      * \return new object instance
      */
    static Ref<MultiMapInstance> copy(const MultiMapInstance *other) { return new MultiMapInstance{other}; }

    /** Make a copy of this map
      * \return new object instance
      */
    Ref<MultiMapInstance> copy() const { return MultiMapInstance::copy(this); }

    /// Iterator to the beginning (on first item)
    Iterator begin() { return Iterator{&tree_}; }

    /// Iterator to the end (behind last item)
    Iterator end() { return Iterator{&tree_, tree_->count()}; }

    /// Constant iterator pointing to the beginning (on first item)
    ConstIterator begin() const { return ConstIterator{tree_}; }

    /// Constant iterator pointing to the end (behind last item)
    ConstIterator end() const { return ConstIterator{tree_, tree_->count()}; }

    /// Iterator pointing to the item at \a index
    Iterator pos(Index index) { return Iterator{tree_, index}; }

    /// Constant iterator pointing to the item at \a index
    ConstIterator pos(Index index) const { return ConstIterator{tree_, index}; }

    /// Iterator pointing to the first item
    Iterator first() { return Iterator{tree_, 0}; }

    /// Iterator pointing to the last item
    Iterator last() { return Iterator{tree_, tree_->count() - 1}; }

    /// Constant iterator pointing to the first item
    ConstIterator first() const { return ConstIterator{tree_, 0}; }

    /// Constant iterator pointing to the last item
    ConstIterator last() const { return ConstIterator{tree_, tree_->count() - 1}; }

    /// Number of items
    Index count() const { return tree_->count(); }

    /// Check if an index is valid
    bool has(Index index) const {
        return 0 <= index && index < count();
    }

    /// Return a reference to the item at \a index
    Item &at(Index index)
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    /// Return a constant reference to the item at \a index
    const Item &at(Index index) const
    {
        assert(0 <= index && index < count());
        return tree_->at<Item>(index);
    }

    /// Check if the relation contains \a key
    bool contains(const Key &key) const
    {
        return tree_->lookup<Item>(Item{key});
    }

    /** Lookup key-value pair by given key
      * \tparam Search search strategy (FindFirst or FindLast)
      * \param key key to search for
      * \param target returns an iterator to a key-value if found
      * \return true if a matching key-value pair was found
      */
    template<class Search = FindFirst>
    bool find(const Key &key, ConstIterator *target) const
    {
        Index index = 0;
        bucket::Leaf<Item> *node = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<Item, Search>(Item{key}, &index, &node, &egress);
        if (target) *target = ConstIterator{tree_, index, node, egress};
        return found;
    }

    /** Lookup key-value pair by given key
      * \tparam Search search strategy (FindFirst or FindLast)
      * \param key key to search for
      * \param target returns an iterator to a key-value if found
      * \return true if a matching key-value pair was found
      */
    template<class Search = FindFirst>
    bool find(const Key &key, Iterator *target)
    {
        Index index = 0;
        bucket::Leaf<Item> *node = nullptr;
        unsigned egress = 0;
        bool found = tree_->lookup<Item, Search>(Item{key}, &index, &node, &egress);
        if (target) *target = Iterator{tree_, index, node, egress};
        return found;
    }

    /** Insert a new key-value pair
      * \param key search key
      * \param value new value
      */
    void insert(const Key &key, const Value &value)
    {
        bucket::Leaf<Item> *target = nullptr;
        unsigned egress = 0;
        Item item{key, value};
        bool found = tree_->lookup<Item, FindLast>(item, nullptr, &target, &egress);
        tree_->push<Item>(target, egress + found, item);
    }

    /** Remove all key-value pairs of given key
      * \param key search key
      * \return number of items removed
      */
    Index remove(const Key &key)
    {
        Index removalCount = 0;
        iterator target;
        find(key, &target);
        while (target && target->key() == key) {
            remove(target);
            ++removalCount;
        }
        return removalCount;
    }

    /** Remove \a item at given \a target position */
    void remove(Iterator &target)
    {
        tree_->popAndStep(target);
    }

    /// Remove item at given \a index
    void removeAt(Index index)
    {
        assert(0 <= index && index < count());
        tree_->pop<Item>(index);
    }

    /// Return the first item
    const Item &min() const { return tree_->first<Item>(); }

    /// Return the last item
    const Item &max() const { return tree_->last<Item>(); }

    /// Reset to an empty relation
    void deplete() { tree_->deplete<Item>(); }

protected:
    friend class bucket::Internals;
    friend class Local<MultiMapInstance>;
    friend class MultiMap<K, T>;

    MultiMapInstance() = default;

    MultiMapInstance(const MultiMapInstance *other)
    {
        tree_->populate<Item>(other);
    }

    ~MultiMapInstance() { tree_->deplete<Item>(); }

    Local<bucket::Tree> tree_;
};

} // namespace cc
