/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>
#include <cc/Exception>
#include <cc/SystemIo>
#include <cc/IoTarget>
#include <sys/types.h>
#include <sys/poll.h> // POLLIN, POLLOUT, etc.
#include <sys/socket.h> // SHUT_RD, etc.

namespace cc {

/** \class SystemStream cc/SystemStream
  * \ingroup binary_io
  * \brief Base class for all system streams
  * \todo rename to IoStream (which fits IoMonitor, etc.)
  */
class SystemStream: public Stream
{
public:
    /// Full duplex connection shutdown
    enum class Shutdown {
        Read  = SHUT_RD,  ///< Partially shutdown the communication channel for reading
        Write = SHUT_WR,  ///< Partially shutdown the communication channel for writing
        Full  = SHUT_RDWR ///< Fully shutdown the communication channel
    };

    class Instance: public Stream::Instance, public IoTarget
    {
    public:
        /// The underlying file descriptor
        int fd() const;

        /** Return true if this is a TTY (i.e. a terminal device).
          *
          * This method is useful to distinguish between interactive from non-interactive
          * invocation.
          * ~~~~~~~~~~~~~
          * if (stdIn()->isatty()) fout() << "Hello, Jane!" << nl;
          * else; // continue silently
          * ~~~~~~~~~~~~~
          */
        bool isatty() const;

        /// Enabled/disable echo of character input if this is a terminal device
        void echo(bool on);

        int read(CharArray *data) override;
        void write(const CharArray *data) override;
        void write(const StringList &parts) override;

        /// Convenience wrapper
        void write(const String &data) { write(static_cast<const CharArray *>(data)); }

        /// Convenience wrapper
        void write(const char *data) { write(String{data}); }

        /// Convenience wrapper
        void write(const Format &data);

        /** Wait for a system I/O event
          * \param events combination of SystemIo::WaitEvent flags
          * \param interval_ms the interval to wait at max (or infinite if < 0)
          * \return true if one of the indicated events occured, false on timeout
          */
        bool waitFor(IoReady ready, int interval_ms = -1);

        /** Shutdown a full duplex communication channel
          * \param type shutdown mode
          */
        void shutdown(Shutdown type = Shutdown::Full);

        /// Currently set I/O scatter limit
        int scatterLimit() const { return scatterLimit_; }

        /** %Set the I/O scatter limit
          *
          * Scatter writes via write(const StringList &) and write(const Format &) will be merge into a single block
          * if the total size of the scatter list is below the scatter limit.
          */
        void setScatterLimit(int newLimit) { scatterLimit_ = newLimit; }

        /** Duplicate this system stream
          * \param other the other system stream to take over
          *
          * The duplicate() method duplicates an entry in the file descriptor table.
          *
          * This for instance allows to set a file as standard input:
          * ~~~~~~~~~~~~~
          * File{"binary.dat"}->duplicateTo(stdIn());
          * ~~~~~~~~~~~~~
          * \see duplicate()
          */
        void duplicateTo(SystemStream &other);

        /** Issue device control requests
          * \param request device control request
          * \param arg input/ouput argument
          * \return can be a value returned by the request, otherwise 0
          */
        int ioctl(int request, void *arg);

        /// Close this stream
        void close();

        /** Duplicate a system stream
          * \param other the system stream to duplicate
          */
        void duplicate(const SystemStream &other);

        /** Establish a local socket connection
          * \param other the other system stream to connect to
          */
        void connect(SystemStream &other);

    protected:
        friend class SystemStream;

        Instance(int fd = -1);
        ~Instance();

        int fd_;
        int scatterLimit_;
    };

    /** Create an invalid SystemStream
      */
    SystemStream():
        Stream{new Instance}
    {}

    /** Create a new SystemStream
      * \param fd file descriptor
      */
    SystemStream(int fd):
        Stream{new Instance{fd}}
    {}

    Instance *operator->() const { return my<Instance>(); }
    operator Instance *() const { return my<Instance>(); }

    operator bool() const { return my<Instance>()->fd() != -1; }

protected:
    SystemStream(Instance *instance):
        Stream{instance}
    {}
};

} // namespace cc
