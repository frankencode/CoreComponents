/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/types>
#include <cc/iterators>

namespace cc {

namespace container {

template<class C>
int arrayCompare(const C &a, const C &b)
{
    typedef typename C::Item T;
    int n = a.count() > b.count() ? a.count() : b.count();
    for (int i = 0; i < n; ++i) {
        T x = (i < a.count()) ? a.at(i) : T{};
        T y = (i < b.count()) ? b.at(i) : T{};
        if (x < y) return -1;
        if (y < x) return 1;
    }
    return 0;
}

template<class C>
int iteratorCompare(const C &a, const C &b)
{
    typedef typename C::Item T;

    auto i = a.begin();
    auto j = b.begin();

    while (i || j) {
        T x = i ? *i : T{};
        T y = j ? *j : T{};
        if (x < y) return -1;
        if (y < x) return 1;
        ++i;
        ++j;
    }

    return 0;
}

template<class I, class J>
int iterate_compare(I i, J j)
{
    typedef typename I::value_type X;
    typedef typename J::value_type Y;

    X x0{};
    Y y0{};

    while (i || j) {
        const X &x = i ? *i : x0;
        const Y &y = j ? *j : y0;
        if (x < y) return -1;
        if (y < x) return 1;
        ++i;
        ++j;
    }

    return 0;
}

template<class C>
int compare(const C *a, const C *b)
{
    return iterate_compare(a->begin(), b->begin());
}

template<class C>
int compare(const C &a, const C &b)
{
    return iterate_compare(a->begin(), b->begin());
}

} // namespace container

// TODO: make a enum class
enum SortOrder { Desc = 0, Asc = 1, Descending = Desc, Ascending = Asc };

template<class T>
class AscendingSortOrder {
public:
    inline static bool below(const T &a, const T &b) { return a < b; }
};

template<class T>
class DescendingSortOrder {
public:
    inline static bool below(const T &a, const T &b) { return b < a; }
};

template<class T>
class FlexibleSortOrder {
public:
    FlexibleSortOrder(SortOrder order = Asc): asc_(order == Asc) {}
    inline bool below(const T &a, const T &b) { return (a < b) == asc_; }
protected:
    void setSortOrder(SortOrder order) { asc_ = (order == Asc); }
private:
    bool asc_;
};

template<class T, class Below>
class OtherSortOrder {
public:
    OtherSortOrder() {}
    inline bool below(const T &a, const T &b) { return below_(a, b); }

private:
    Below below_;
};

template<class T, int isAtomic = 0>
class SelectCopyMethod {
public:
    inline static T copy(const T &x) { return T::copy(x); }
};

template<class T>
class SelectCopyMethod<T, 1> {
public:
    inline static T copy(T x) { return x; }
};

template<class T>
class CopyMethod: public SelectCopyMethod< T, IsAtomic<T>::value > {};

} // namespace cc
