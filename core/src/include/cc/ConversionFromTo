/** From Andrei Alexandrescu's book "Modern C++ Design"
  */
#pragma once

namespace cc {

template<class T> class DerefPointerType { public: typedef T DerefType; };
template<class T> class DerefPointerType<T *> { public: typedef T DerefType; };

/** \todo replace by standard C++ type trait
  */
template<class T, class U>
class ConversionFromTo
{
protected:
    typedef char Small;
    class Big { char dummy[2]; };
    static Small test(U);
    static Big test(...);
    static T makeT();
public:
    enum {
        Exists = (sizeof(test(makeT())) == sizeof(Small)),
        SameType = 0
    };
};

template<class T>
class ConversionFromTo<T, T> {
public:
    enum { Exists = 1, SameType = 1 };
};

} // namespace cc
