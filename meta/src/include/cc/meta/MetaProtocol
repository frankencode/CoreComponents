/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/meta/MetaPrototype>

namespace cc {
namespace meta {

/** \class MetaProtocol cc/meta/MetaProtocol
  * \brief Duck-typed object protocol
  */
class MetaProtocol: public Object
{
public:
    static Ref<MetaProtocol> create(const MetaProtocol *parent = nullptr);

    template<class Prototype>
    void define(const String &className)
    {
        define(Prototype::create(className));
    }

    template<class Prototype>
    void define()
    {
        define(static_cast<const MetaPrototype *>(Prototype::create()));
    }

    void define(const MetaPrototype *prototype);

    template<class Prototype>
    static Ref<MetaPrototype> createPrototype()
    {
        Ref<Prototype> prototype = Prototype::create();
        prototype->define();
        return prototype;
    }

    virtual const MetaPrototype *lookup(const String &className) const;

    int minCount() const { return minCount_; }
    int maxCount() const { return maxCount_; }
    void minCount(int newCount) { minCount_ = newCount; }
    void maxCount(int newCount) { maxCount_ = newCount; }

    bool lookup(const String &className, const MetaPrototype **prototype) const;

protected:
    friend class YasonSyntax;

    MetaProtocol(const MetaProtocol *parent = nullptr);

    virtual Ref<MetaObject> produce(const MetaPrototype *prototype) const;

private:
    Ref<const MetaProtocol> parent_;

    typedef Map<String, Ref<const MetaPrototype> > Prototypes;
    Ref<Prototypes> prototypes_;

    int minCount_;
    int maxCount_;
};

}} // namespace cc::meta
