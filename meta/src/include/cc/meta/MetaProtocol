/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/meta/MetaObject>

namespace cc {
namespace meta {

/** \class MetaProtocol cc/meta/MetaProtocol
  * \brief Duck-typed object protocol
  */
class MetaProtocol: public Object
{
public:
    static Ref<MetaProtocol> create()
    {
        return new MetaProtocol;
    }

    bool isDefined() const { return prototypes_->count() > 0; }

    template<class Prototype>
    void define(const String &className)
    {
        define(Prototype::create(className));
    }

    template<class Prototype>
    void define()
    {
        define(Prototype::create());
    }

    void define(MetaObject *prototype)
    {
        prototype->define();
        prototypes_->insert(prototype->className(), prototype);
    }

    template<class Prototype>
    static Ref<MetaObject> createPrototype()
    {
        Ref<MetaObject> prototype = Prototype::create();
        prototype->define();
        return prototype;
    }

    virtual const MetaObject *lookup(const String &className) const
    {
        const MetaObject *prototype = nullptr;
        prototypes_->lookup(className, &prototype);
        return prototype;
    }

    int minCount() const { return minCount_; }
    int maxCount() const { return maxCount_; }
    void minCount(int newCount) { minCount_ = newCount; }
    void maxCount(int newCount) { maxCount_ = newCount; }

    bool lookup(const String &className, const MetaObject **prototype) const
    {
        *prototype = lookup(className);
        return *prototype;
    }

protected:
    friend class YasonSyntax;

    MetaProtocol():
        prototypes_{Prototypes::create()},
        minCount_{0},
        maxCount_{cc::intMax}
    {}

    virtual Ref<MetaObject> produce(const MetaObject *prototype) const
    {
        return prototype->produce();
    }

private:
    typedef Map<String, Ref<const MetaObject> > Prototypes;
    Ref<Prototypes> prototypes_;
    int minCount_;
    int maxCount_;
};

}} // namespace cc::meta
