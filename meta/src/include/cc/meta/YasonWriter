/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Format>
#include <cc/meta/MetaObject>

namespace cc {
namespace meta {

/** \class YasonWriter cc/meta/YasonWriter
  * \brief Generate YSON representation of a meta object tree
  */
class YasonWriter: public Object
{
public:
    /** Create a new YSON writer
      * \param sink data stream to write the formatted output to
      * \param indent whitespace to use for each indentation step
      * \return new object instance
      */
    static Ref<YasonWriter> create(Stream *sink = nullptr, const string &indent = "  ");

    /** Convert a meta value into YSON notation
      * \param value meta-value
      */
    void write(variant value);

private:
    YasonWriter(Stream *sink, const string &indent);
    void writeValue(variant value, int depth);
    void writeList(variant value, int depth);
    bool isIdentifier(const string &name) const;
    void writeObject(variant value, int depth);
    void writeIndent(int depth);

    template<class T>
    void writeTypedList(variant value, int depth);

    Format format_;
    string indent_;
};

}} // namespace cc::meta
