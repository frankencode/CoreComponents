/*
 * Copyright (C) 2007-2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/syntax/SyntaxDefinition>
#include <cc/meta/yason>

namespace cc { template<class> class Singleton; }

namespace cc {
namespace meta {

using namespace cc::syntax;

class YasonSyntax: public SyntaxDefinition
{
public:
    static const YasonSyntax *instance();

    Variant parse(const CharArray *text, const MetaProtocol *protocol = nullptr) const;
    Ref<MetaObject> readObject(const CharArray *text, const Token *token, const MetaProtocol *protocol = nullptr, const MetaPrototype *prototype = nullptr) const;

protected:
    friend class Singleton<YasonSyntax>;

    const Token *getMemberNameToken(const CharArray *text, const Token *objectToken, const String &memberName) const;
    const Token *getMemberValueToken(const CharArray *text, const Token *objectToken, const String &memberName) const;
    const Token *getChildToken(const Token *objectToken, int childIndex) const;

    enum Options {
        GenerateComments     = 1,
        GenerateEscapedChars = 2
    };
    YasonSyntax(int options = 0);

    String readName(const CharArray *text, const Token *token) const;
    Variant readValue(const CharArray *text, const Token *token, VariantType expectedType = VariantType::Undefined, VariantType expectedItemType = VariantType::Undefined) const;
    Variant readList(const CharArray *text, const Token *token, VariantType expectedItemType = VariantType::Undefined) const;
    String readText(const CharArray *text, const Token *token) const;

    template<class T>
    Ref< List<T> > parseTypedList(const CharArray *text, const Token *token, VariantType expectedItemType) const;

    int item_;
    int line_;
    int string_;
    int document_;
    int text_;
    int boolean_;
    int true_;
    int false_;
    int integer_;
    int float_;
    int color_;
    int version_;
    int name_;
    int className_;
    int object_;
    int list_;
    int message_;
};

template<class T>
Ref< List<T> > YasonSyntax::parseTypedList(const CharArray *text, const Token *token, VariantType expectedItemType) const
{
    Ref< List<T> > list = List<T>::create(token->countChildren());
    int i = 0;
    for (const Token *child = token->firstChild(); child; child = child->nextSibling()) {
        list->at(i) = readValue(text, child, expectedItemType);
        ++i;
    }
    return list;
}

}} // namespace cc::meta
