/*
 * Copyright (C) 2019-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/String>
#include <cstdint>

namespace cc::cia {

/** \class Selector cc/cia/Selector
  * \ingroup cia
  * \brief Object dictionary address (index, sub-index)
  * \todo API docs
  */
class Selector
{
public:
    using Index = std::uint_fast16_t;
    using SubIndex = std::uint_fast8_t;
    using Key = std::uint_fast32_t;

    /** Create a zero selector (objcet index and sub-index equal zero)
      */
    Selector():
        index_{0},
        subIndex_{0}
    {}

    /** Create a selector for object \a index and \a subIndex
      */
    explicit Selector(Index index, SubIndex subIndex = 0):
        index_{index},
        subIndex_{subIndex}
    {}

    /** %Object index
      */
    Index index() const { return index_; }

    /** %Objcet sub-index
      */
    SubIndex subIndex() const { return subIndex_; }

    /** Combinded object index and sub-index
      */
    Key key() const { return (static_cast<Key>(index_) << 8) | subIndex_; }

    /** %Syntax sugar for key()
      */
    Key operator+() const { return key(); }

    /** Equal to operator
      */
    bool operator==(const Selector &other) const
    {
        return
            index_    == other.index_ &&
            subIndex_ == other.subIndex_;
    }

    /** Not equal to operator
      */
    bool operator!=(const Selector &other) const
    {
        return
            index_    != other.index_ ||
            subIndex_ != other.subIndex_;
    }

    /** Less than operator
      */
    bool operator<(const Selector &other) const
    {
        return
            index_ < other.index_ || (
                index_ == other.index_ &&
                subIndex_ < other.subIndex_
            );
    }

private:
    Index index_;
    SubIndex subIndex_;
};

String str(Selector selector);

} // namespace cc::cia
