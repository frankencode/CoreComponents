/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/HashSink>

namespace cc::cia {

/** \class Crc16Sink cc/cia/Crc16Sink
  * \ingroup cia
  * \brief CRC-16 check sum generator
  */
class Crc16Sink final: public HashSink
{
public:
    /** CRC-16 checksum size
      */
    static constexpr int HashSize = 2;

    /** %Default CRC-16 seed
      */
    static constexpr uint16_t DefaultSeed = 0;

    /** Create a new CRC-16 sink
      * \param seed %Initial checksum value
      */
    Crc16Sink(uint16_t seed = DefaultSeed);

    /** %Current CRC-16 checksum value
      */
    uint16_t sum() const;


private:
    friend uint16_t crc16(const void *buffer, long size);
    friend uint16_t crc16(const char *buffer);
    friend uint16_t crc16(const Bytes &buffer);

    struct State;

    const State &me() const;
};

uint16_t crc16(const void *buffer, long size);
uint16_t crc16(const char *buffer);
uint16_t crc16(const Bytes &buffer);

} // namespace cc::cia
