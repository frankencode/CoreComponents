/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/EventHandler>
#include <cc/can/SafetyEventHandler>
#include <cc/can/CanMedia>
#include <cc/Map>
#include <cc/Mutex>
#include <cc/Semaphore>
#include <cc/Worker>

namespace cc { class Worker; }

namespace cc {
namespace can {

class EventMonitor: public Object
{
public:
    static Ref<EventMonitor> create(const CanMedia &media);

    void start();

private:
    friend class Event;

    EventMonitor(const CanMedia &media);
    ~EventMonitor();

    void init();
    void registerEvent(Event *event);

    void shutdown();

    void run();

    CanMedia media_;

    Map< int, Ref<Event> > events_;

    Worker worker_;
    Mutex mutex_;
    Semaphore start_;
    Semaphore shutdown_;
};

}} // namespace cc::can
