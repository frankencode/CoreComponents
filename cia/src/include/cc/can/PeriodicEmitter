/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/can/CanMedia>
#include <cc/can/Emission>
#include <cc/can/SafetyEmission>
#include <cc/Set>
#include <cc/Mutex>
#include <cc/Worker>
#include <cc/Semaphore>

namespace cc {
namespace can {

class PeriodicEmitter: public Object
{
public:
    static Ref<PeriodicEmitter> create(CanMedia *media);

    void start();
    void shutdown();

private:
    friend class Emission;

    PeriodicEmitter(CanMedia *media);
    ~PeriodicEmitter();

    void init();
    void registerEmission(Emission *emission);

    void run();

    Ref<CanMedia> media_;

    Set< Ref<Emission> > emissions_;
    Mutex mutex_;

    Worker worker_;
    Semaphore start_;
    Semaphore shutdown_;
};

}} // namespace cc::can
