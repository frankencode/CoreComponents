/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <functional>
#include <cc/can/SafetyEvent>

namespace cc {
namespace can {

class SafetyEventHandler: public SafetyEvent
{
public:
    typedef std::function<void(const String &)> OnReceived;
    typedef std::function<void(SafetyError error)> OnError;

    static Ref<SafetyEventHandler> create(
        EventMonitor *monitor,
        int canId, int invCanId,
        double idleInterval, double validationInterval,
        OnReceived onReceived, OnError onError
    );

private:
    friend class SafetyEvent;

    SafetyEventHandler(
        int canId, double idleInterval,
        OnReceived onReceived, OnError onError
    );

    void onReceived(CanMedia *media, const String &data) override;
    void onError(CanMedia *media, SafetyError error) override;

    OnReceived onReceived_;
    OnError onError_;
};

}} // namespace cc::can
