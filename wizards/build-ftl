#! /bin/bash

CWD_SAVED=$PWD

if [ "$(dirname $0)" != "." ]; then
	cd $(dirname $0)
fi

CONFIGURE=0
CONFIGURE_CLEAN=0

. ./build-options-git

if [ $# -gt 0 ]; then
	if [ "$1" != "git" ]; then
		CHECKOUT=0
	fi
else
	CHECKOUT=0
fi

if [ $CHECKOUT -eq 0 ]; then
	. ./build-options
fi

function msg() { echo "$(basename $0): $1"; }
function debug() { echo "$(basename $0): $1" 1>&2; }

function err() {
	ret=$?
	if [ "$1" != "" ]; then echo "$(basename $0): $1" 1>&2; fi
	cd $CWD_SAVED
	if [ $ret -ne 0 ]; then exit $ret; else exit 1; fi
}

function version_max() {
	let XM=0 YM=0 ZM=0
	FALLBACK="master"
	for t in $(git tag); do
		IFS_SAVED=$IFS
		IFS='.-'
		let i=0
		for v in $t; do
			[ $i -eq 0 ] && let X=$v
			[ $i -eq 1 ] && let Y=$v
			[ $i -eq 2 ] && let Z=$v
			let i=i+1;
		done
		IFS=$IFS_SAVED
		if [ $i -eq 3 ]; then
			[ $X -gt $XM ] && let XM=$X YM=$Y ZM=$Z
			[ $X -eq $XM ] && [ $Y -gt $YM ] && let YM=$Y ZM=$Z
			[ $X -eq $XM ] && [ $Y -eq $YM ] && [ $Z -gt $ZM ] && let ZM=$Z
		fi
		FALLBACK=$t
	done
	if [ $XM -eq 0 ] && [ $YM -eq 0 ] && [ $ZM -eq 0 ]; then
		debug "Warning: No stable version tag found (format: \"x.y.z\")."
		echo "$FALLBACK"
	else
		echo "$XM.$YM.$ZM"
	fi
}

function checkout() {
	if [ ! -e $SOURCE_FOLDER ]; then
		git clone --no-checkout $GIT_REPOSITORY $SOURCE_FOLDER || err "Failed to clone the git repository."
	fi
	
	cd $SOURCE_FOLDER
	
	if [ $GIT_VERSION == "stable" ]; then
		GIT_VERSION=$(version_max)
	elif [ $GIT_VERSION == "testing" ]; then
		GIT_VERSION="master"
	fi
	
	git checkout $GIT_VERSION || err "Failed to checkout latest version."
}

function configure-lib() {
	CWD_SAVED=$PWD
	mkdir -p $TARGET_FOLDER/libftl/$1
	cd $TARGET_FOLDER/libftl/$1
	if [ $CONFIGURE -eq 0 ]; then
		if [ -e CMakeCache.txt ]; then
			return 0
		fi
	fi
	echo
	msg "Configuring $PWD..."
	EXTRA=""
	if echo $1|grep static > /dev/null; then
		EXTRA="-D BUILD_SHARED_LIBS=OFF"
	fi
	cmake -D CMAKE_BUILD_TYPE=Debug $EXTRA $SOURCE_FOLDER || err
	ret=$?
	cd $CWD_SAVED
	return $ret
}

function configure() {
	if [ $BUILD_DEBUG -ne 0 ]; then
		if [ $BUILD_SHARED -ne 0 ]; then configure-lib debug || err; fi
		if [ $BUILD_STATIC -ne 0 ]; then configure-lib debug-static || err; fi
	fi
	if [ $BUILD_SHARED -ne 0 ]; then configure-lib release || err; fi
	if [ $BUILD_STATIC -ne 0 ]; then configure-lib release-static || err; fi
}

function build-lib() {
	CWD_SAVED=$PWD
	cd $TARGET_FOLDER/libftl/$1
	echo
	msg "Building $PWD..."
	make $MAKEFLAGS
	ret=$?
	cd $CWD_SAVED
	return $ret
}

function build() {
	if [ $BUILD_DEBUG -ne 0 ]; then
		if [ $BUILD_SHARED -ne 0 ]; then build-lib debug || err; fi
		if [ $BUILD_STATIC -ne 0 ]; then build-lib debug-static || err; fi
	fi
	if [ $BUILD_SHARED -ne 0 ]; then build-lib release || err; fi
	if [ $BUILD_STATIC -ne 0 ]; then build-lib release-static || err; fi
}

function configure-clean() {
	for c in $(find $TARGET_FOLDER/libftl -name CMakeCache.txt); do
		CMD="rm -rf $c"
		echo "$CMD"
		$CMD || err
	done
}

function build-clean() {
	CMD="rm -rf $TARGET_FOLDER/libftl"
	echo $CMD
	$CMD || err
}

if [ $# -gt 0 ]; then
	OK=0
	if [ "$1" == "local" ]; then OK=1; fi
	if [ "$1" == "git" ]; then OK=1; fi
	if [ "$1" == "conf-clean" ]; then configure-clean; OK=1; fi
	if [ "$1" == "clean" ]; then build-clean; OK=1; fi
	if [ "$1" == "help" ]; then
		echo "$(basename $0) [OPTION]"
		echo
		echo "Options:"
		echo "  local      ... build from local source tree (default)"
		echo "  git        ... build latest stable version from git"
		echo "  conf-clean ... clean configuration"
		echo "  clean      ... clean all build files"
		echo "  help       ... print this help"
		echo ""
		exit 0
	fi
	if [ $OK -ne 1 ]; then
		echo "Illegal option \"$1\", try: \"$(basename $0) help\"."
		exit 0
	fi
fi

if [ $CHECKOUT -ne 0 ]; then
	checkout || err
	CONFIGURE_CLEAN=1
fi
if [ $BUILD_CLEAN -ne 0 ]; then
	build-clean
	CONFIGURE_CLEAN=0
fi
if [ $CONFIGURE_CLEAN -ne 0 ]; then
	configure-clean
fi
configure || err
if [ $BUILD -ne 0 ]; then
	build || err
fi

cd $CWD_SAVED
