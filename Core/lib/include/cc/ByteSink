/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Composite>
#include <cc/Stream>
#include <cc/Array>
#include <cc/exceptions>
#include <cc/bits>

namespace cc {

/** \class ByteSink cc/ByteSink
  * \ingroup streams
  * \brief Byte encoding sink
  * \exception OutputExhaustion
  */
class ByteSink
{
public:
    /** Open a new ByteSink
      * \param sink Datra sink to write bytes to
      * \param buffer Output buffer
      * \param endian Endianess for writing multi-byte words
      */
    ByteSink(const Stream &sink, const Bytes &buffer, ByteOrder endian = ByteOrder::LittleEndian):
        me{sink, buffer, endian}
    {}

    /** Open a new ByteSink
      * \param sink Sink to write bytes to
      * \param endian Endianess for writing multi-byte words
      */
    ByteSink(const Stream &sink, ByteOrder endian = ByteOrder::LittleEndian):
        me{sink, Bytes::allocate(0x1000), endian}
    {}

    /** Open a new ByteSink
      * \param buffer Output buffer
      * \param endian Endianess for writing multi-byte words
      */
    ByteSink(const Bytes &buffer, ByteOrder endian = ByteOrder::LittleEndian):
        me{Stream{}, buffer, endian}
    {}

    ~ByteSink()
    {
        if (me().sink &&  me().i > 0) flush();
    }

    /** Write character \a ch
      */
    void write(char ch) { writeUInt8((uint8_t)ch); }

    /** Write all characters of \a s
      */
    void write(const char *s)
    {
        for (const char *p = s; *p; ++p) write(*p);
    }

    /** Write string \a s
      */
    void write(const Bytes &s);

    /** Write byte \a x
      */
    void writeUInt8(uint8_t x) { me().write(x); }

    /** Write 2-byte word \a x
      */
    void writeUInt16(uint16_t x);

    /** Write 4-byte word \a x
      */
    void writeUInt32(uint32_t x);

    /** Write 8-byte word \a x
      */
    void writeUInt64(uint64_t x);

    /** Write signed byte \a x
      */
    void writeInt8(int8_t x) { me().write(static_cast<uint8_t>(x)); }

    /** Write signed 2-byte word \a x
      */
    void writeInt16(int16_t x) { writeUInt16(static_cast<uint16_t>(x)); }

    /** Write signed 4-byte word \a x
      */
    void writeInt32(int32_t x) { writeUInt32(static_cast<uint32_t>(x)); }

    /** Write signed 8-byte word \a x
      */
    void writeInt64(int64_t x) { writeUInt64(static_cast<uint64_t>(x)); }

    /** Flush the output buffer and write cached bytes to the output sink
      */
    void flush() { me().flush(); }

    /** The output sink
      */
    Stream sink() const { return me().sink; }

    /** The output buffer
      */
    const Bytes &buffer() const { return me().buffer; }

    /** Byte-order for encoding multi-byte words
      */
    ByteOrder endian() const { return me().endian; }

    /** %Set byte-order
      */
    void setEndian(ByteOrder endian) { me().endian = endian; }

    /** Total number of bytes written
      */
    long long currentOffset() const { return me().i0 + me().i; }

private:
    struct State
    {
        Stream sink;
        Bytes buffer;
        ByteOrder endian;
        long long i0 { 0 };
        long i { 0 };

        inline void flush()
        {
            if (!sink) throw OutputExhaustion{};

            sink.write(buffer, i);
            i0 += i;
            i = 0;
        }

        inline void write(uint8_t x)
        {
            if (i == buffer.count()) flush();
            buffer.item<uint8_t>(i++) = x;
        }
    };

    Composite<State> me;
};

inline void ByteSink::write(const Bytes &s)
{
    for (int i = 0, n = s.count(); i < n; ++i)
        me().write(s.item<uint8_t>(i));
}

inline void ByteSink::writeUInt16(uint16_t x)
{
    if (me().endian == ByteOrder::LittleEndian) {
        writeUInt8(uint8_t(x));
        writeUInt8(uint8_t(x >> 8));
    }
    else {
        writeUInt8(uint8_t(x >> 8));
        writeUInt8(uint8_t(x));
    }
}

inline void ByteSink::writeUInt32(uint32_t x)
{
    if (me().endian == ByteOrder::LittleEndian) {
        writeUInt8(uint8_t(x));
        writeUInt8(uint8_t(x >> 8));
        writeUInt8(uint8_t(x >> 16));
        writeUInt8(uint8_t(x >> 24));
    }
    else {
        writeUInt8(uint8_t(x >> 24));
        writeUInt8(uint8_t(x >> 16));
        writeUInt8(uint8_t(x >> 8));
        writeUInt8(uint8_t(x));
    }
}

inline void ByteSink::writeUInt64(uint64_t x)
{
    if (me().endian == ByteOrder::LittleEndian) {
        for (int i = 0; i < int(sizeof(x)); ++i, x >>= 8)
            writeUInt8(uint8_t(x));
    }
    else {
        for (int i = (int(sizeof(x))-1) * 8; i >= 0; i -= 8)
            writeUInt8(uint8_t(x >> i));
    }
}

} //namespace cc
