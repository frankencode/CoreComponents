/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/HashSink>
#include <cstdint>

namespace cc {

/** \class Crc32Sink cc/Crc32Sink
  * \ingroup streams
  * \brief CRC-32 checksum generator
  */
class Crc32Sink final: public HashSink
{
public:
    /** CRC-32 checksum size
      */
    static constexpr int HashSize = 4;

    /** %Default CRC-32 seed
      */
    static constexpr std::uint32_t DefaultSeed = ~std::uint32_t(0);

    /** Create a null CRC-32 sink
      */
    Crc32Sink() = default;

    /** Create a new CRC-32 sink
      * \param seed %Initial checksum value
      */
    explicit Crc32Sink(std::uint32_t seed = DefaultSeed);

    /** %Current CRC-32 checksum value
      */
    std::uint32_t sum() const;

private:
    friend std::uint32_t crc32(const void *buffer, long size);
    friend std::uint32_t crc32(const char *s);
    friend std::uint32_t crc32(const Bytes &s);

    struct State;

    const State &me() const;
};

/** Generate CRC-32 checksum
  * \ingroup streams
  * \param buffer Input buffer
  * \param size Number of bytes
  */
std::uint32_t crc32(const void *buffer, long size);

/** Generate CRC-32 checksum
  * \ingroup streams
  * \param buffer Input C-string
  */
std::uint32_t crc32(const char *buffer);

/** Generate CRC-32 checksum
  * \ingroup streams
  * \param buffer Input buffer
  */
std::uint32_t crc32(const Bytes &buffer);

} // namespace cc
