/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/MetaObject>
#include <cc/Stream>

namespace cc {

/** \class YasonWriter cc/YasonWriter
  * \brief Generate YASON representations of variant values
  * \ingroup meta
  */
class YasonWriter: public Object
{
public:
    /** Create a new YASON writer
      * \param sink %Data stream to write the formatted output to
      * \param indent %Whitespace to use for each indentation step
      */
    explicit YasonWriter(const Stream &sink, const String &indent = "  ");

    /** Write \a value
      */
    void write(const Variant &value);

    /** Write \a object
      * \param object %Meta-object
      * \param names %Selected members (and their order) to output
      */
    void writeObject(const MetaObject &object, const List<String> &names = List<String>{});

private:
    struct State;

    State &me();
};

} // namespace cc
