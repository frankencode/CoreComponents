/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/IoStream>

namespace cc {

/** \class IoChannel cc/IoChannel
  * \brief Inter-process communication channel
  */
class IoChannel: public IoStream
{
public:
    /** Create a null I/O channel
      */
    IoChannel() = default;

    /** Communication end of the sub-process
      */
    int slaveFd() const { return me().slaveFd_; }

protected:
    friend class Command;

    struct State: public IoStream::State
    {
        /** Called upon successful creation of the sub-process
          */
        virtual void onStart() {}

        int slaveFd_ { -1 };
    };

    explicit IoChannel(State *newState):
        IoStream{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
