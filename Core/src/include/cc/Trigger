/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Queue>
#include <cc/Function>

namespace cc {

/** \class Trigger cc/Trigger
  * \ingroup misc
  * \brief Callback mechanism: get notified on state changes
  */
class Trigger
{
public:
    /** Connect a new listener \a f
      */
    void connect(Function<void()> &&f) const { queue_.emplaceBack(std::move(f)); }

    /** Report state change to all listeners
      */
    void emit() const { for (auto &f: queue_) f(); }

    /** Check if anyone is listening
      */
    bool hasListeners() const { return queue_.count() > 0; }

    /** Remove all listeners
      */
    void disband() { queue_.deplete(); }

    /** \copydoc connect()
      */
    void operator()(Function<void()> &&f) const { connect(std::move(f)); }

    /** \copydoc emit()
      */
    void operator()() const { emit(); }

private:
    friend struct PropertyBinding;

    mutable Queue<Function<void()>> queue_;
};

} // namespace cc
