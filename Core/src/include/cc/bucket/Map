/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cassert>
#include <cstdint>

namespace cc {
namespace bucket {

/** \internal
  * \brief Bitmap based allocation scheme
  */
template<unsigned Capacity>
class Map
{
private:
    std::uint8_t map_[Capacity];
};

template<>
class Map<16>
{
public:
    static constexpr unsigned Capacity = 16;

    unsigned mapToSlot(unsigned bucketIndex, unsigned fill) const;
    unsigned mapToBucket(unsigned slotIndex, unsigned fill) const;

    unsigned pushEntry(unsigned bucketIndex, unsigned *fill);
    unsigned popEntry(unsigned bucketIndex, unsigned *fill);

private:
    std::uint64_t map_ { UINT64_C(0x0123456789ABCDEF) };
};

inline unsigned Map<16>::mapToSlot(unsigned bucketIndex, unsigned fill) const
{
    assert(bucketIndex < fill);

    return (map_ >> (bucketIndex << 2u)) & 0xFu;
}

inline unsigned Map<16>::mapToBucket(unsigned slotIndex, unsigned fill) const
{
    unsigned i = 0;
    for (std::uint64_t m = map_; (m & 0xFu) ^ slotIndex; m >>= 4) ++i;
    return i;
}

inline unsigned Map<16>::pushEntry(unsigned bucketIndex, unsigned *fill)
{
    assert(*fill < Map::Capacity);
    assert(bucketIndex <= *fill);

    const std::uint64_t slotIndex = map_ >> 60u;

    const unsigned bucketShift = bucketIndex << 2u;
    const std::uint64_t highMask = (~UINT64_C(0)) << bucketShift;
    const std::uint64_t lowMask  = ~highMask;

    map_ = ((map_ & highMask) << 4u) | (map_ & lowMask) | (slotIndex << bucketShift);

    ++*fill;
    return slotIndex;
}

inline unsigned Map<16>::popEntry(unsigned bucketIndex, unsigned *fill)
{
    assert(*fill > 0);
    assert(bucketIndex < *fill);

    const std::uint64_t slotIndex = mapToSlot(bucketIndex, *fill);

    const unsigned bucketShift = bucketIndex << 2u;
    const std::uint64_t highMask = (~UINT64_C(0)) << bucketShift;
    const std::uint64_t lowMask  = ~highMask;

    map_ = (slotIndex << 60u) | ((map_ >> 4u) & highMask) | (map_ & lowMask);

    --*fill;
    return slotIndex;
}

}} // namespace cc::bucket
