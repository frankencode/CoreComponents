/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/List>
#include <cc/KeyValue>

namespace cc {

/** \class MultiMap cc/MultiMap
  * \ingroup container
  * \brief Multi-map data container
  * \tparam K Key type
  * \tparam T Value type
  * \tparam O Search order
  */
template<class K, class T = K, class O = DefaultOrder>
class MultiMap {
public:
    using Key = K; ///< Key type
    using Value = T; ///< Value type
    using Item = KeyValue<K, T>; ///< Item type
    using Order = O; ///< Search order

    /** \name Construction and Assignment
      */
    ///@{

    /** Construct an empty multi-map
      */
    MultiMap() = default;

    /** Construct a copy of \a other
      */
    MultiMap(const MultiMap &other) = default;

    /** Construct with initial \a items
      */
    MultiMap(std::initializer_list<Item> items)
    {
        for (const auto &x: items) insert(x.key(), x.value());
    }

    /** Take over the right-side multi-map \a other
      */
    MultiMap(MultiMap &&other):
        me{std::move(other.me)}
    {}

    /** Assign multi-map \a other
      */
    MultiMap &operator=(const MultiMap &other) = default;

    /** Take over the right-side multi-map \a other
      */
    MultiMap &operator=(MultiMap &&other)
    {
        me = std::move(other.me);
        return *this;
    }

    /** Get corresponding list representation
      */
    List<Item> toList() const
    {
        return List<Item>{me};
    }

    ///@}

    /** \name Item Access
      */
    ///@{

    /** Get a locator pointing to the first item
      */
    Locator head() const { return me().head(); }

    /** Get a locator pointing to the last item
      */
    Locator tail() const { return me().tail(); }

    /** Get a locator pointing to the item at \a index
      */
    Locator from(long index) const { return me().from(index); }

    /** Get the number of items stored in the multi-map
      */
    long count() const { return me().count(); }

    /** \copydoc count()
      */
    long size() const { return me().count(); }

    /** Check if \a i is a valid index
      */
    bool has(long i) const { return i < me().count() && 0 <= i; }

    /** Check if this multi-map is non-empty
      */
    explicit operator bool() const { return count() > 0; }

    /** \copydoc count()
      */
    long operator+() const { return me().count(); }

    /** Get constant reference to the item at position \a pos
      */
    const Item &at(Locator pos) const
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get constant reference to the item at \a index
      */
    const Item &at(long index) const
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** Get reference to the item at position \a pos
      */
    Item &at(Locator pos)
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get reference to the item at \a index
      */
    Item &at(long index)
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }


    /** \copydoc at(long) const
      */
    const Item &operator[](long index) const { return at(index); }

    /** Get constant reference to first item
      */
    const Item &first() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to last item
      */
    const Item &last() const
    {
        assert(count() > 0);
        return me().last();
    }

    /** Tell if \a item is the first item
      */
    bool firstIs(const Item &item) const
    {
        return &item == &first();
    }

    /** Tell if \a item is the last item
      */
    bool lastIs(const Item &item) const
    {
        return &item == &last();
    }

    /** Get constant reference to the first item
      */
    const Item &min() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to the last item
      */
    const Item &max() const
    {
        assert(count() > 0);
        return me().last();
    }

    ///@}

    /** \name Multi-Map Operations
      */
    ///@{

    /** Search for a key in the multi-map
      * \tparam Search search strategy (FindFirst, FindLast or FindAny)
      * \param pattern %Key search pattern
      * \param pos Returns the position of the item that was found
      * \return True if key was found
      */
    template<class Search = FindFirst, class Pattern>
    bool find(const Pattern &pattern, Out<Locator> pos = None{}) const
    {
        return me().template find<Order, Search>(pattern, &pos);
    }

    /** Convenience function to check if the map contains \a pattern
      * \tparam Pattern %Pattern type (must be comparable with Key)
      * \param pattern %Pattern to search for
      * \return True if \a pattern was found
      */
    template<class Pattern>
    bool contains(const Pattern &pattern) const
    {
        return find<FindAny>(pattern);
    }

    /** Convenience function to find the start of a search range
      * \tparam Pattern %Pattern type (must be comparable with Key)
      * \param pattern %Pattern to search for
      * \returns %Locator position
      * \note \a pattern is included in the search range
      * \see forEachInRange()
      */
    template<class Pattern>
    Locator lowerBound(const Pattern &pattern) const
    {
        Locator pos;
        find<FindFirst>(pattern, &pos);
        return pos;
    }

    /** Convenience function to find the end of a search range
      * \tparam Pattern %Pattern type (must be comparable with Key)
      * \param pattern %Pattern to search for
      * \returns %Locator position
      * \note \a pattern is included in the search range
      * \see forEachInRange()
      */
    template<class Pattern>
    Locator upperBound(const Pattern &pattern) const
    {
        Locator pos;
        if (!find<FindLast>(pattern, &pos)) --pos;
        return pos;
    }

    /** Insert a new key-value pair
      * \param key %Search key
      * \param value %New value
      * \note The insertion order of ambiguous keys is maintained.
      */
    void insert(const Key &key, const Value &value)
    {
        return me().template insertLast<Order>(Item{key, value}); // FIXME: performance, needless copy
    }

    /** Remove all matching keys
      * \param key %Search key
      * \return Number of items removed
      * \todo optimize performance
      */
    long remove(const Key &key)
    {
        long removalCount = 0;
        Locator pos;
        if (find<FindFirst>(key, &pos)) {
            while (pos && at(pos) == key) {
                removeAt(pos);
                ++removalCount;
            }
        }
        return removalCount;
    }

    ///@}

    /** \name Positional Operations
      */

    ///@{

    /** Remove \a item at position \a pos (and increment \a pos)
      */
    void removeAt(Locator &pos)
    {
        me().popAndStep(pos);
    }

    /** Remove item at \a index
      */
    void removeAt(long index)
    {
        assert(0 <= index && index < count());
        me().pop(index);
    }

    ///@}

    /** \name Global Operations
      */
    ///@{

    /** Call function \a f for each item
      * \tparam F Function type (lambda or functor)
      * \param f Unary function which gets called for each item
      */
    template<class F>
    void forEach(F f) const
    {
        for (auto &x: *this) f(x);
    }

    /** Call function \a f for each item in range [lower, upper]
      * \tparam F Function type (lambda or functor)
      * \param lower Lower boundary
      * \param upper Upper boundary
      * \param f Unary function which gets called for each item
      * \note \a lower and \a upper are included in the iteration range.
      */
    template<class F, class Pattern>
    void forEachInRange(const Pattern &lower, const Pattern &upper, F f) const
    {
        Locator pos;
        find<FindFirst>(lower, &pos);
        for (; pos; ++pos) {
            auto &item = at(pos);
            if (upper < item.key()) break;
            f(item);
        }
    }

    /** Remove all items
      */
    void deplete()
    {
        me().deplete();
    }

    ///@}

    /** \name Standard Iterators
      */
    ///@{

    using value_type = Item; ///< Item value type
    using size_type = long; ///<  Type of the container capacity

    using iterator = Iterator<BucketVector<Item>>; ///< Value iterator

    iterator begin() { me(); return head(); } ///< %Return iterator pointing to the first item (if any)
    iterator end  () { me(); return Locator{count()}; } ///< %Return iterator pointing behind the last item

    using const_iterator = Iterator<const BucketVector<Item>>; ///< Readonly value iterator

    const_iterator begin () const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator cbegin() const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator end   () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item
    const_iterator cend  () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item

    using reverse_iterator = ReverseIterator<BucketVector<Item>>; ///< Reverse value iterator

    reverse_iterator rbegin() { me(); return tail(); } ///< %Return reverse iterator pointing to the last item (if any)
    reverse_iterator rend  () { me(); return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    using const_reverse_iterator = ReverseIterator<const BucketVector<Item>>; ///< Readonly reverse value iterator

    const_reverse_iterator rbegin () const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator crbegin() const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator rend   () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item
    const_reverse_iterator crend  () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    ///@}

    /** \name Comparism Operators
      */
    ///@{

    /** Equality operator
      */
    template<class Other>
    bool operator==(const Other &other) const { return container::equal(*this, other); }

    ///@}

private:
    Cow<BucketVector<Item>> me;
};

} // namespace cc
