/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>
#include <cc/exceptions>

namespace cc {

/** \class TransferLimiter cc/TransferLimiter
  * \ingroup streams
  * \brief Limit the maximum number of bytes transferred
  * \exception InputExhaustion Read limit exceeded
  * \exception OutputExhaustion Write limit exceeded
  */
class TransferLimiter final: public Stream
{
public:
    /** Create an undefined transfer limiter
      */
    TransferLimiter() = default;

    /** Create a new transfer limiter
      */
    explicit TransferLimiter(const Stream &stream, long long readLimit, long long writeLimit = -1);

    /** Get the read transfer limit
      */
    long long readLimit() const;

    /** Get the write transfer limit
      */
    long long writeLimit() const;

    /** Get the total number of bytes read
      */
    long long totalRead() const;

    /** Get the total number of bytes written
      */
    long long totalWritten() const;

    /** Reset the transfer counter to zero
      */
    void reset();

private:
    struct State;

    explicit TransferLimiter(State *state);

    const State &me() const;
    State &me();
};

} // namespace cc
