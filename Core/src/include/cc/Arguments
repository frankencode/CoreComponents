/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#include <cc/Variant>
#include <cc/Composite>
#include <cc/exceptions>

namespace cc
{

/** \class Arguments cc/Arguments
  * \ingroup misc
  * \brief %Command line arguments parser
  */
class Arguments {
public:
    /** \brief Read command line arguments and separate options from items
      * \param argc Number of arguments
      * \param argv Argument values
      * \exception HelpRequest Command line contains a help option (-h or --help)
      * \exception VersionRequest Command line contains a version option (-v or --version)
      */
    Arguments(int argc, char *argv[]);

    /** Parse and validate command line options
      * \return %Command line items
      * \exception UsageError if a non-existing option or an option of invalid type is encountered
      */
    List<String> read(Out<Map<String, Variant>> options = None{})
    {
        if (options != None{}) {
            validate(options);
            override(&options);
        }
        else {
            validate(Map<String, Variant>{});
        }
        return items();
    }

    /** Check validity of command line arguments according to a prototype configuration
      * \param prototype Prototype configuration
      * \exception UsageError if a non-existing option or an option of invalid type is encountered
      */
    void validate(const Map<String, Variant> &prototype);

    /** Override \a config with command line options
      */
    void override(InOut<Map<String, Variant>> config) const;

    /** %Command line options (e.g.: "x=1", "-x" or "--x")
      */
    Map<String, Variant> options() const { return me().options; }

    /** %Command line item arguments
      */
    List<String> items() const { return me().items; }

    /** Execution path
      */
    String execPath() const { return me().execPath; }

private:
    struct State {
        String execPath;
        Map<String, Variant> options;
        List<String> items;
    };
    Composite<State> me;
};

} // namespace cc
