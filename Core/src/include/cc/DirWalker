/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/String>
#include <cc/SourceIterator>
#include <cc/Object>

namespace cc {

/** \class DirWalker cc/DirWalker
  * \ingroup file_system
  * \brief Recursive directory tree traversal
  */
class DirWalker: public Object
{
public:
    using Item = String; ///< Item type

    /** Create a null directory walker
      */
    DirWalker() = default;

    /** Open directory at \a path for recursive tree traversal
      */
    explicit DirWalker(const String &path);

    /** Read next path
      * \param path Returns the next path
      * \param isDir True if the returned path points to a directory
      * \return True if not end of information
      */
    bool read(Out<String> path, Out<bool> isDir = None{});

    /** %Set maximum tree traversal recursion depth (or -1 if none)
      */
    void setMaxDepth(int depth);

    /** Ignore hidden files and directories during recursive tree traversal (defaults to false)
      */
    void setIgnoreHidden(bool on);

    /** Follow symbolic links during recursive tree traversal (defaults to false)
      */
    void setFollowSymlink(bool on);

    /** Child-first recursive tree traversal order (defaults to false)
      */
    void setDeleteOrder(bool on);

    /** Iteration start
      */
    SourceIterator<DirWalker> begin() { return SourceIterator<DirWalker>{this}; }

    /** Iteration end
      */
    SourceIterator<DirWalker> end() { return SourceIterator<DirWalker>{}; }

private:
    // template<class>
    // friend class SourceIterator;

    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
