/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/ArrayIterator>
#include <cc/Format>
#include <cc/str>
#include <initializer_list>
#include <cmath>
#include <cassert>

namespace cc {

/** \class Vector cc/Vector
  * \ingroup math
  * \brief Algebraic vector
  * \tparam T Item type
  * \tparam N Number of components
  */
template<class T, int N>
class Vector
{
public:
    /** Item type
      */
    using Item = T;

    /** Number of components
      */
    static constexpr int Count = N;

    /** \name Construction and Assignment
      */
    ///@{

    /** Create a null vector
      */
    Vector(): v{} {}

    /** Create a vector with initial components \a l
      */
    Vector(std::initializer_list<T> l)
    {
        unsigned i = 0;
        for (auto b: l) {
            assert(i < N);
            v[i++] = b;
        }
        if (l.size() < N) {
            for (auto b: l) {
                if (i == N) break;
                v[i++] = b;
            }
        }
    }

    /** Create a vector with all components initialized with \a b
      */
    Vector(T b)
    {
        for (int i = 0; i < N; ++i) v[i] = b;
    }

    ///@}

    /** \name Item Access
      */
    ///@{

    /** Get the number of components
      */
    static constexpr int count() { return N; }

    /** Get reference to component at \a i
      */
    T &at(int i)
    {
        assert(0 <= i && i < N);
        return v[i];
    }

    /** Get constant reference to component at \a i
      */
    const T &at(int i) const
    {
        assert(0 <= i && i < N);
        return v[i];
    }

    /** \copydoc at(int)
      */
    T &operator[](int i) { return at(i); }

    /** \copydoc at(int) const
      */
    const T &operator[](int i) const { return at(i); }

    T x() const { assert(2 <= N); return v[0]; } ///< Get value of the first component
    T y() const { assert(2 <= N); return v[1]; } ///< Get value of the second component
    T z() const { assert(3 <= N); return v[2]; } ///< Get value of the third component

    ///@}

    /** \name Global Operations
      */
    ///@{

    /** Negate all components of the vector
      */
    Vector operator-() const
    {
        Vector b{*this};
        for (unsigned i = 0; i < N; ++i)
            b.v[i] = -v[i];
        return b;
    }

    /** Add component-vise vector \a b
      */
    Vector &operator+=(const Vector &b)
    {
        for (unsigned i = 0; i < N; ++i)
            v[i] += b.v[i];
        return *this;
    }

    /** Substract component-vise vector \a b
      */
    Vector &operator-=(const Vector &b)
    {
        for (unsigned i = 0; i < N; ++i)
            v[i] -= b.v[i];
        return *this;
    }

    /** Multiply component-vise vector \a b
      */
    Vector &operator*=(const Vector &b)
    {
        for (unsigned i = 0; i < N; ++i)
            v[i] *= b.v[i];
        return *this;
    }

    /** Divide component-vise vector \a b
      */
    Vector &operator/=(const Vector &b)
    {
        for (unsigned i = 0; i < N; ++i)
            v[i] /= b.v[i];
        return *this;
    }

    /** Multiply each component with \a b
      */
    Vector &operator*=(T b)
    {
        for (unsigned i = 0; i < N; ++i)
            v[i] *= b;
        return *this;
    }

    /** Divide each component with \a b
      */
    Vector &operator/=(T b)
    {
        for (unsigned i = 0; i < N; ++i)
            v[i] /= b;
        return *this;
    }

    /** Add vector \a b and return result
      */
    Vector operator+(const Vector &b) const { return Vector{*this} += b; }

    /** Substract vector \a b and return result
      */
    Vector operator-(const Vector &b) const { return Vector{*this} -= b; }

    /** Component-wise multiply vector \a b and return result
      */
    Vector operator*(const Vector &b) const { return Vector{*this} *= b; }

    /** Component-wise divide vector \a b and return result
      */
    Vector operator/(const Vector &b) const { return Vector{*this} /= b; }


    /** Multiply each component with \a b and return result
      */
    Vector operator*(T b) const { return Vector{*this} *= b; }

    /** Divide each component with \a b and return result
      */
    Vector operator/(T b) const { return Vector{*this} /= b; }

    /** Get a copy of this vector with each component rounded
      */
    Vector round() const
    {
        Vector result{*this};
        for (unsigned i = 0; i < N; ++i)
            result[i] = std::round(result[i]);
        return result;
    }

    /** Get a copy of this vector with each component rounded upwards
      */
    Vector ceil() const
    {
        Vector result{*this};
        for (unsigned i = 0; i < N; ++i)
            result[i] = std::ceil(result[i]);
        return result;
    }

    /** Get the smallest component value
      */
    T min() const
    {
        T m = v[0];
        for (unsigned i = 1; i < N; ++i) {
            if (v[i] < m) m = v[i];
        }
        return m;
    }

    /** Get the greatest component value
      */
    T max() const
    {
        T m = v[0];
        for (unsigned i = 1; i < N; ++i) {
            if (m < v[i]) m = v[i];
        }
        return m;
    }

    /** Magnitude squared
      */
    T absPow2() const
    {
        T s = 0;
        for (unsigned i = 0; i < N; ++i) s += v[i] * v[i];
        return s;
    }

    /** Magnitude
      */
    T abs() const
    {
        return std::sqrt(absPow2());
    }

    /** Compute the average of all component values
      */
    T avg() const
    {
        T s = 0;
        for (unsigned i = 0; i < N; ++i) s += v[i];
        return s / N;
    }

    ///@}

    /** \name Standard Iterators
      */
    ///@{

    using value_type = Item; ///< Item value type
    using size_type = long; ///< Type of the container capacity

    using iterator = ArrayIterator<Vector, 1>; ///< Value iterator

    iterator begin() { return iterator{*this, 0}; } ///< %Return iterator pointing to the first item (if any)
    iterator end  () { return iterator{*this, count()}; } ///< %Return iterator pointing behind the last item

    using const_iterator = ArrayIterator<const Vector, 1>; ///< Readonly value iterator

    const_iterator begin () const { return const_iterator{*this, 0}; } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator cbegin() const { return const_iterator{*this, 0}; } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator end   () const { return const_iterator{*this, count()}; } ///< %Return readonly iterator pointing behind the last item
    const_iterator cend  () const { return const_iterator{*this, count()}; } ///< %Return readonly iterator pointing behind the last item

    using reverse_iterator = ArrayIterator<Vector, -1>; ///< Reverse value iterator

    reverse_iterator rbegin() { return reverse_iterator{*this, count() - 1}; } ///< %Return reverse iterator pointing to the last item (if any)
    reverse_iterator rend  () { return reverse_iterator{*this, -1}; } ///< %Return reverse iterator pointing before the first item

    using const_reverse_iterator = ArrayIterator<const Vector, -1>; ///< Readonly reverse value iterator

    const_reverse_iterator rbegin () const { return const_reverse_iterator{*this, count() - 1}; } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator crbegin() const { return const_reverse_iterator{*this, count() - 1}; } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator rend   () const { return const_reverse_iterator{*this, -1}; } ///< %Return reverse iterator pointing before the first item
    const_reverse_iterator crend  () const { return const_reverse_iterator{*this, -1}; } ///< %Return reverse iterator pointing before the first item

    ///@}

    /** \name Comparism Operators
      */
    ///@{

    /** Equal to operator
      */
    bool operator==(const Vector &b) const
    {
        for (unsigned i = 0; i < N; ++i) {
            if (v[i] != b.v[i])
                return false;
        }
        return true;
    }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Vector &b) const
    {
        for (unsigned i = 0; i < N; ++i) {
            auto ordering = v[i] <=> b.v[i];
            if (ordering < 0) return std::strong_ordering::less;
            if (ordering > 0) return std::strong_ordering::greater;
        }
        return std::strong_ordering::equal;
    }

    ///@}

private:
    T v[N];
};

/** Multiply a scalar with a vector
  * \ingroup math
  */
template<class S, class T, int N>
inline Vector<T, N> operator*(S a, const Vector<T, N> &b) { return b * T(a); }

/** Stringify vector \a v
  */
template<class T, int N>
inline String str(const Vector<T, N> &v)
{
    Format f;
    f << "( ";
    for (auto x: v) f << x << " ";
    f << ")";
    return f;
}

/** Stringify vector \a v (fixed notation)
  * \param v Vector to ne stringified
  * \param nf Number of fractional digits
  */
template<class T, int N>
inline String fixed(const Vector<T, N> &v, int nf)
{
    return fixed(v, 0, nf);
}

/** Stringify vector \a v (fixed notation)
  * \param v Vector to ne stringified
  * \param ni Number of integral digits
  * \param nf Number of fractional digits
  */
template<class T, int N>
inline String fixed(const Vector<T, N> &v, int ni, int nf)
{
    Format f;
    f << "( ";
    for (auto x: v) f << fixed(x, ni, nf) << " ";
    f << ")";
    return f;
}

} // namespace cc
