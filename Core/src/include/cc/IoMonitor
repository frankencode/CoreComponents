/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/IoStream>
#include <cc/Fun>

namespace cc {

/** \class IoActivity cc/IoMonitor
  * \brief Entry on the I/O watch list of an I/O monitor
  */
class IoActivity final: public Object
{
public:
    /** \internal
      */
    IoActivity() = default;

    /** Monitored I/O stream
      */
    IoStream target() const { return me().target_; }

    /** Type of I/O event that occured
      */
    IoEvent event() const { return me().event_; }

private:
    friend class IoMonitor;

    struct State final: public Object::State
    {
        State(const IoStream &target, IoEvent mask):
            target_{target},
            mask_{mask}
        {}

        IoStream target_;
        IoEvent mask_;
        IoEvent event_ { IoEvent::None };
    };

    IoActivity(const IoStream &target, IoEvent mask):
        Object{new State{target, mask}}
    {}

    /** Types of I/O events to wait for
      */
    IoEvent mask() const { return me().mask_; }

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

/** \class IoMonitor cc/IoMonitor
  * \ingroup streams
  * \brief Wait for I/O events
  */
class IoMonitor final: public Object
{
public:
    /** Create a new I/O monitor
      * \param maxCount Maximum number of I/O streams to monitor
      */
    IoMonitor();

    /** Add an entry to the watch list
      * \param target I/O stream to monitor
      * \param mask I/O event mask
      */
    void watch(const IoStream &target, IoEvent mask = IoEvent::ReadyReadOrWrite);

    /** Remove an entry from the watch list
      * \param target I/O stream to stop monitoring
      */
    void unwatch(const IoStream &target);

    /** Wait for I/O events
      * \param onReady %Callback function to handle I/O events
      * \param timeout %Timeout in milliseconds (or infinite if < 0)
      */
    bool wait(const Fun<void(const IoActivity &)> &onReady, int timeout = -1);

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
