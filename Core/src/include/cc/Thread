/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/SignalSet>
#include <cc/Signal>
#include <cc/SystemError>
#include <cc/Object>
#include <cc/Function>
#include <functional>
#include <sched.h>

namespace cc {

/** Thread scheduling policy
  */
enum class SchedulingPolicy: int
{
    Other      = SCHED_OTHER, ///< best guess scheduling
    Fifo       = SCHED_FIFO,  ///< priority based scheduling
    RoundRobin = SCHED_RR     ///< priority based fixed time-slice scheduling
};

inline int operator+(SchedulingPolicy policy) { return static_cast<int>(policy); }

/** \class Thread cc/Thread
  * \ingroup threads
  * \brief Single thread of execution
  * \see System::concurrency()
  */
class Thread final: public Object
{
public:
    /** Create a null thread
      */
    Thread() = default;

    /** Create a new thread
      * \param f Entry point for thread execution
      * \param stackSize Size of stack to allocate for the new thread (-1 for system default)
      */
    explicit Thread(Function<void()> &&f, long stackSize = -1);

    /** Start the thread
      */
    void start();

    /** Tell if the thread has been started
      * \note It is safe to invoke this method on a null thread, in which case it returns false.
      */
    bool started() const;

    /** Wait for the thread to finish its execution
      */
    void wait();

    /** Send a signal to the thread
      */
    void kill(Signal signal);

    /** Check if the thread is still running
      */
    bool isRunning() const;

    /** %Set the thread's name for debugging
      */
    void setName(const char *name);

    /** Check if this is a non-null thread
      */
    explicit operator bool() const { return isNull(); }

    /** Get an unique ID indentifying the calling thread
      */
    static uint64_t id();

    /** Suspend execution of the current thread for \a duration seconds
      */
    static void sleep(double duration);

    /** Suspend execution of the current thread until \a time
      * \see System::now()
      */
    static void sleepUntil(double time);

    /** Block signals of given \a set
      */
    static void blockSignals(const SignalSet &set);

    /** Unblock signals of given \a set
      */
    static void unblockSignals(const SignalSet &set);

    /** Query the currently active signal mask
      */
    static SignalSet signalMask();

    /** Get minimum priority level supported by the sytem under giving scheduling policy
      */
    static int getMinPriority(SchedulingPolicy policy);

    /** Get maximum priority level supported by the sytem under giving scheduling policy
      */
    static int getMaxPriority(SchedulingPolicy policy);

    /** %Set scheduling policy of the calling thread
      */
    static void setSchedulingPolicy(SchedulingPolicy policy, int priority = 0);

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
