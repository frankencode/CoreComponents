/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/IoStream>
#include <cc/Format>

namespace cc {

/** \brief Generate formatted text on the standard output stream
  * \ingroup strings
  */
inline Format fout(const String &pattern = "") { return Format{pattern, IoStream::output()}; }

/** \brief Generate formatted text on the standard error stream
  * \ingroup strings
  */
inline Format ferr(const String &pattern = "") { return Format{pattern, IoStream::error()}; }

inline void print(const String &message)
{
    IoStream::output().write(message);
}

inline void error(const String &message)
{
    IoStream::output().write(message);
}

template<typename... Args>
inline void print(const String &pattern, Args... args)
{
    Format format { pattern, IoStream::output() };
    (format << ... << args);
}

template<typename... Args>
inline void error(const String &pattern, Args... args)
{
    Format format { pattern, IoStream::error() };
    (format << ... << args);
}

template<typename... Args>
inline Format format(const String &pattern, Args... args)
{
    Format format { pattern };
    (format << ... << args);
    return format;
}

} // namespace cc
