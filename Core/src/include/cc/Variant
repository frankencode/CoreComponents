/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/VariantType>
#include <cc/Composite>
#include <initializer_list>
#include <cassert>

namespace cc {

/** \class Variant cc/Variant
  * \ingroup misc
  * \brief Duck-typed value
  * \todo provide iterator for child iteration
  * \todo introduce VariantTypeMismatch debug exception
  */
class Variant
{
public:
    /** Automatically sense type and read value from string \a s
      */
    static Variant read(const String &s);

    /** Create a variant without an value
      */
    Variant():
        me{&VariantType<void>::info()}
    {}

    /** Create a variant with \a value
      */
    template<class T>
    Variant(T value):
        me{&VariantType<T>::info()}
    {
        VariantType<T>::store(me().bytes, value);
    }

    /** Convenience function for calling Variant(long)
      */
    Variant(int value):
        me{&VariantType<long>::info()}
    {
        VariantType<long>::store(me().bytes, static_cast<long>(value));
    }

    /** Convenience function for calling Variant(double)
      */
    Variant(float value):
        me{&VariantType<double>::info()}
    {
        VariantType<double>::store(me().bytes, static_cast<double>(value));
    }

    /** Convenience function for calling Variant(const String &)
      */
    Variant(const char *value):
        me{&VariantType<String>::info()}
    {
        VariantType<String>::store(me().bytes, String{value});
    }

    /** Create a variant storing a list of strings
      */
    Variant(std::initializer_list<const char *> values)
    {
        if (values.size() == 1) {
            me().typeInfo = &VariantType<String>::info();
            VariantType<String>::store(me().bytes, String{*values.begin()});
        }
        else {
            me().typeInfo = &VariantType<List<String>>::info();
            List<String> list;
            for (const char *value: values) list.append(String{value});
            VariantType<List<String>>::store(me().bytes, list);
        }
    }

    /** Create a variant storing a list of longs
      */
    Variant(std::initializer_list<int> values)
    {
        if (values.size() == 1) {
            me().typeInfo = &VariantType<long>::info();
            VariantType<long>::store(me().bytes, static_cast<long>(*values.begin()));
        }
        else {
            me().typeInfo = &VariantType<List<long>>::info();
            List<long> list;
            for (int value: values) list.append(value);
            VariantType<List<long>>::store(me().bytes, list);
        }
    }

    /** Create a variant storing a list of longs
      */
    Variant(std::initializer_list<long> values)
    {
        if (values.size() == 1) {
            me().typeInfo = &VariantType<long>::info();
            VariantType<long>::store(me().bytes, *values.begin());
        }
        else {
            me().typeInfo = &VariantType<List<long>>::info();
            List<long> list;
            for (int value: values) list.append(value);
            VariantType<List<long>>::store(me().bytes, list);
        }
    }

    /**  Create a variant storing a list of doubles
      */
    Variant(std::initializer_list<double> values):
        me{&VariantType<List<double>>::info()}
    {
        if (values.size() == 1) {
            me().typeInfo = &VariantType<double>::info();
            VariantType<double>::store(me().bytes, *values.begin());
        }
        else {
            List<double> list;
            for (double value: values) list.append(value);
            VariantType<List<double>>::store(me().bytes, list);
        }
    }

    /** Copy-constructor
      */
    Variant(const Variant &b):
        Variant{}
    {
        *this = b;
    }

    /** R-value constructor
      */
    Variant(Variant &&b):
        me{b.me}
    {
        b.me().typeInfo = &VariantType<void>::info();
    }

    /** \internal
      *  Automatic cleanup
      */
    ~Variant()
    {
        me().typeInfo->cleanup(me().bytes);
    }

    /** Assignment operator
      */
    Variant &operator=(const Variant &b)
    {
        me().typeInfo->cleanup(me().bytes);
        me().typeInfo = b.me().typeInfo;
        me().typeInfo->assign(me().bytes, b.me().bytes);
        return *this;
    }

    /** R-value assignment operator
      */
    Variant &operator=(Variant &&b)
    {
        me() = b.me();
        b.me().typeInfo = &VariantType<void>::info();
        return *this;
    }

    /** Check if stored value is of type \a T
      */
    template<class T>
    bool is() const { return me().typeInfo == &VariantType<T>::info(); }

    /** Retrieve stored value of type \a T
      * \note The type of the stored value must be exactly of type T.
      */
    template<class T>
    T to() const { return VariantType<T>::retrieve(me().bytes, *me().typeInfo); }

    /** \copydoc to()
      */
    template<class T>
    explicit operator T() const { return to<T>(); }

    /** Stringify this variant
      */
    operator String() const { return is<String>() ? to<String>() : str(*this); }

    /** Check if this variant is of the same type as variant \a b
      */
    bool sameTypeAs(const Variant &b) const
    {
        return me().typeInfo == b.me().typeInfo;
    }

    /** Get the type name of the store value
      */
    const char *typeName() const { return me().typeInfo->typeName(); }

    /** Convenience method to get the value of a member of this meta-object value
      */
    Variant operator()(const String &key) const;

    /** Convenience method to get/set the value of a member of this meta-object value
      */
    Variant &operator()(const String &key);

    /** Convenience method to get the child at \a index of this meta-object value
      */
    Variant operator[](long index) const;

    /** Convenience method to get the number of children of this meta-object value
      */
    long count() const;

    /** Compare for equality with \a b
      */
    bool operator==(const Variant &other) const
    {
        return
            me().typeInfo == other.me().typeInfo &&
            me().typeInfo->equal(me().bytes, other.me().bytes);
    }

    /** Compare for equality with \a b
      */
    bool operator==(const char *other) const
    {
        return static_cast<String>(*this) == other;
    }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Variant &other) const
    {
        const auto &a = me();
        const auto &b = other.me();
        return a.typeInfo->order(a.bytes, b.bytes);
    }

private:
    friend String str(const Variant &);

    String toString() const { return me().typeInfo->str(me().bytes); }

    struct State {
        const TypeInfo *typeInfo;
        char bytes[8]; // FIXME: use std::byte?
    };
    Composite<State> me;
};

/** Convert \a value to string
  */
inline String str(const Variant &value) { return value.toString(); }

/** Convert \a list to string
  */
inline String str(const List<Variant> &list) { return str(Variant{list}); }

} // namespace cc
