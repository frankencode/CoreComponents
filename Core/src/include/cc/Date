/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/String>
#include <cc/Cow>

namespace cc {

/** Day of week
  */
enum Weekday {
    Sun = 0, ///< Sunday
    Mon = 1, ///< Monday
    Tue = 2, ///< Tuesday
    Wed = 3, ///< Wednesday
    Thu = 4, ///< Thursday
    Fri = 5, ///< Friday
    Sat = 6  ///< Saturday
};


static constexpr int SecondsPerHour = 3600; ///< %Number of seconds per hour
static constexpr int SecondsPerDay = 24 * SecondsPerHour; ///< %Number of seconds per day

/** Convenience method to translate minutes to seconds
  */
inline constexpr double minutes(double n) { return n * 60; }

/** Convenience method to translate hours to seconds
  */
inline constexpr double hours(double n) { return n * SecondsPerHour; }

/** Convenience method to translate days to seconds
  */
inline constexpr double days(double n) { return n * SecondsPerDay; }

/** \class Date cc/Date
  * \ingroup sysinfo
  * \brief Calendar date and time
  * \todo toString(): fully enable ms resolution (ss.fraction in String output)
  * \see Timezone
  */
class Date
{
public:
    /** Get the current UTC date and time
      */
    static Date now();

    /** Create an invalid date
      */
    Date();

    /** Create a calendar date by breaking down a timestamp
      * \param time \copydoc time()
      * \param offset \copydoc offset()
      */
    explicit Date(double time, int offset = 0);

    /** Compose a calendar date from calendar components
      * \param year \copydoc year()
      * \param month \copydoc month()
      * \param day \copydoc day()
      * \param hour \copydoc hour()
      * \param minutes \copydoc minutes()
      * \param seconds \copydoc seconds()
      * \param offset \copydoc offset()
      */
    Date(int year, int month, int day, int hour = 0, int minutes = 0, int seconds = 0, int offset = 0);

    /** Tell if this is a date is valid
      */
    bool isValid() const;

    /** Seconds since the begin of Epoch (1st Jan 1970 00:00:00)
      */
    double time() const { return me().time; }

    /** \copydoc isValid()
      */
    explicit operator bool() const { return isValid(); }

    /** \copydoc time() const
      */
    operator double() const { return me().time; }

    /** \copydoc toString() const
      */
    operator String() const { return toString(); }

    /** Time zone offset in seconds
      * \see Timezone::offset()
      */
    int offset() const { return me().offset; }

    /** Year number (1, 2,..., 2020, etc.)
      */
    int year() const { return me().year; }

    /** Month number (1..12)
      */
    int month() const { return me().month; }

    /** Day of month (1..31)
      */
    int day() const { return me().day; }

    /** Day of the week (0..6)
      */
    int weekDay() const { return me().weekDay; }

    /** Day of the year (1..365)
      */
    int yearDay() const { return me().yearDay; }

    /** Hour of the day (0..23)
      */
    int hour() const { return me().hour; }

    /** Minutes (0..60)
      */
    int minutes() const { return me().minutes; }

    /** Seconds (0..60)
      */
    int seconds() const { return me().seconds; }

    /** Name of the month ("Jan", "Feb", ..., "Dec")
      */
    String monthName() const;

    /** Name of the weekday ("Sun", "Mon", ..., "Sat")
      */
    String dayName() const;

    /** %Return textual representation of this date
      */
    String toString() const;

    /** Time difference in number of seconds
      */
    double operator-(const Date &other) const { return time() - other.time(); }

    /** Equal to operator
      */
    bool operator==(const Date &other) const { return time() == other.time(); }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Date &other) const
    {
        if (time() < other.time()) return std::strong_ordering::less;
        else if (other.time() < time()) return std::strong_ordering::greater;
        return std::strong_ordering::equal;
    }

private:
    struct State
    {
        double time { 0 };
        int offset { 0 };
        int year { 0 };
        int month { 0 };
        int day { 0 };
        int hour { 0 };
        int minutes { 0 };
        int seconds { 0 };
        int weekDay { 0 };
        int yearDay { 0 };

        void timeToCalendar();
        void calendarToTime();
        String toString() const;
    };

    Cow<State> me;
};

inline String str(const Date &date) { return date.toString(); }

} // namespace cc
