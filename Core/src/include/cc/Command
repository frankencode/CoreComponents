/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/IoChannel>
#include <cc/SignalSet>
#include <cc/Process>
#include <cc/String>
#include <cc/Map>
#include <cc/Object>

namespace cc {

/** \class Command cc/Command
  * \brief Parameters for process creation
  * \exception SystemError
  */
class Command: public Object
{
public:
    /** Create a new command
      */
    Command();

    /** Create a new command with executable name and arguments extracted from \a command
      */
    explicit Command(const String &command);

    /** %Set command line arguments to \a args (args[0] provides the executable name)
      */
    Command &args(const List<String> &args);

    /** %Set environment map to \a map
      */
    Command &env(const Map<String> &map);

    /** %Set the process group to \a groupId (pass zero to start a new process group)
      */
    Command &group(int groupId = 0);

    /** %Set the signal mask to \a mask
      */
    Command &signalMask(const SignalSet &mask);

    /** Reset signal handling strategy to the default for the signals in \a set
      */
    Command &signalDefault(const SignalSet &set);

    /** %Set initial working directory to \a path
      * \warning This method is not thread-safe on all platforms! This is especially true on glibc before v2.29.
      */
    Command &workDir(const String &path);

    /** Setup I/O channel \a channel to appear in the child's files descriptor table under \a fd
      */
    Command &io(int fd, const IoChannel &channel);

    /** Setup I/O stream \a stream to appear in the child's files descriptor table under \a fd
      */
    Command &io(int fd, const IoStream &stream);

private:
    friend class Process;

    void start(Process &process);
    void open(Process &process);

    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
