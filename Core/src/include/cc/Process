/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Signal>
#include <cc/IoStream>
#include <cc/Map>
#include <cc/String>
#include <cc/Object>
#include <cc/files>

namespace cc {

class Command;

/** \class Process cc/Process
  * \ingroup process
  * \brief %Process creation and current process state
  * \exception SystemError
  */
class Process: public Object
{
public:
    /** Create a null sub-process
      */
    Process() = default;

    /** Start a new sub-process executing \a command (executable path + arguments)
      */
    explicit Process(const String &command);

   /** Start a new sub-process executing \a command
     */
    explicit Process(const Command &command);

    /** Start process and wait for its completion (convenience method)
      */
    static int exec(const String &command);

    /** Start process wand wait for its completion (convenience method)
      */
    static int exec(const List<String> &args);

    /** %Process ID of the sub-process
      */
    int id() const;

    /** Wait for sub-process termination and return exit status
      */
    int wait();

    /** Standard input of sub-process
      */
    IoStream input() const;

    /** Standard output of sub-process
      */
    IoStream output() const;

    /** Standard error of sub-process
      */
    IoStream error() const;

    /** Check if exit status indicates termination by an unhandled signal
      */
    static bool isSignaled(int status) { return status < 0; }

    /** Translate \a status to signal number
      */
    static Signal signalNumber(int status) { return static_cast<Signal>(-status); }

    /** Send \a signal to process with ID \a pid
      */
    static void kill(int pid, Signal signal = Signal::Terminate);

    /** Send \a signal to process group with ID \a gid
      */
    static void killGroup(int gid, Signal signal = Signal::Terminate);

    /** Send a signal to the calling process
      */
    static void raise(Signal signal);

    /** Terminate this process with exit code \a status [0, 255]
      */
    static void exit(int status);

    /** Get current process ID
      */
    static int currentId();

    /** Get parent process ID
      */
    static int parentId();

    /** Get the file path of the currently running executable
      */
    static String execPath();

    /** Get environment variable by \a name
      */
    static String env(const String &name);

    /** Get environment variable by \a name and if undefined return \a fallback
      */
    static String env(const String &name, const String &fallback);

    /** %Set environment variable \a name to \a value
      */
    static void setEnv(const String &name, const String &value);

    /** Unset environment variable \a name to an undefined value
      */
    static void unsetEnv(const String &name);

    /** Get the current environment map
      */
    static Map<String> envMap();

    /** Get the current working directory
      */
    static String cwd();

    /** %Set the current working directory to \a path
      */
    static void cd(const String &path);

    /** %Set the file mode creation mask to \a newMask and optionally return the old mask in \a oldMask
      */
    static void setUserMask(FileMode newMask, Out<FileMode> oldMask = None{});

    /** Get the real user ID
      */
    static int realUserId();

    /** Get the real group ID
      */
    static int realGroupId();

    /** Get the effective user ID
      */
    static int effectiveUserId();

    /** Get the effective group ID
      */
    static int effectiveGroupId();

    /** Check for super-user
      */
    static bool isSuperUser();

    /** %Set user ID to \a uid
      */
    static void setUserId(int uid);

    /** %Set the group ID to \a gid
      */
    static void setGroupId(int gid);

    /** %Set the effective user ID to \a uid
      */
    static void setEffectiveUserId(int uid);

    /** %Set the effective group ID to \a gid
      */
    static void setEffectiveGroupId(int gid);

    /** Daemonize this process
      */
    static void daemonize();

    /** Check if daemonized
      */
    static bool isDaemonized();

    /** Start a new login session
      */
    static void startSession();

private:
    friend class Command;

    static char **&environ();

    struct State: public Object::State
    {
        ~State();
        int wait();

        int pid_ { -1 };
        bool groupLead_ { false };
        int exitStatus_ { 0 };
        IoStream standardStreams_[3];
    };

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc
