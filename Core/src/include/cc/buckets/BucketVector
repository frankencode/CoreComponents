/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/buckets/BucketIndexTree>
#include <cc/Locator>
#include <cc/InOut>
#include <cc/find>

namespace cc::buckets {

/** \internal
  * \brief Implementation of a variable length vector on top of \a BucketIndexTree
  * \todo drop Item type and Item emplacement and separate storage of key and values into distinct vectors
  */
template<class T>
class BucketVector final: public BucketIndexTree
{
public:
    using Item = T;

    class Leaf final: public Node
    {
    public:
        Leaf() = default;

        ~Leaf() {
            if (!std::is_trivial<Item>::value) {
                for (unsigned i = 0; i < fill_; ++i) {
                    Item *p = &at(i);
                    p->~Item();
                }
            }
        }

        Item &at(unsigned egress) { return slotAt(map_.mapToSlot(egress)); }
        const Item &at(unsigned egress) const { return slotAt(map_.mapToSlot(egress)); }

        unsigned count() const { return fill_; }

        template<class... Args>
        void emplace(unsigned egress, Args... args)
        {
            unsigned slotIndex = map_.pushEntry(egress, fill_);
            ++fill_;
            Item *p = &slotAt(slotIndex);
            new (p) Item{args...};
        }

        void push(unsigned egress, Item &&item)
        {
            unsigned slotIndex = map_.pushEntry(egress, fill_);
            ++fill_;
            new (&slotAt(slotIndex)) Item{std::move(item)};
        }

        void push(unsigned egress, const Item &item)
        {
            unsigned slotIndex = map_.pushEntry(egress, fill_);
            ++fill_;
            Item *p = &slotAt(slotIndex);
            if (!std::is_trivial<Item>::value) new (p) Item{item};
            else *p = item;
        }

        Item &drop(unsigned egress)
        {
            unsigned slotIndex = map_.popEntry(egress, fill_);
            --fill_;
            return slotAt(slotIndex);
        }

        static long weightAt(unsigned egress) { return 1; }

        long dissipateForwardTo(Leaf *succ)
        {
            assert(fill_ > 0);
            assert(succ->fill_ < Capacity);

            succ->push(0, std::move(drop(fill_ - 1)));
            return 1;
        }

        long dissipateBackwardTo(Leaf *pred)
        {
            assert(fill_ > 0);
            assert(pred->fill_ < Capacity);

            pred->push(pred->fill_, std::move(drop(0)));
            return 1;
        }

        long distributeHalfForwardTo(Leaf *succ)
        {
            assert(fill_ == Capacity);
            assert(succ->fill_ <= HalfCapacity);

            for (unsigned i = 0; i < HalfCapacity; ++i)
            {
                succ->push(i, std::move(drop(HalfCapacity)));
            }

            return HalfCapacity;
        }

        long distributeQuarterForwardTo(Leaf *succ)
        {
            assert(fill_ == Capacity);
            assert(succ->fill_ <= Capacity - QuarterCapacity);

            for (unsigned k = Capacity - 1; k >= Capacity - QuarterCapacity; --k)
            {
                succ->push(0, std::move(drop(k)));
            }

            return QuarterCapacity;
        }

        long distributeQuarterBackwardTo(Leaf *pred)
        {
            assert(fill_ == Capacity);
            assert(pred->fill_ == HalfCapacity);

            for (unsigned k = HalfCapacity; k < HalfCapacity + QuarterCapacity; ++k)
            {
                pred->push(k, std::move(drop(0)));
            }

            return QuarterCapacity;
        }

        void adoptChildrenOfSucc(const Leaf *succ)
        {
            assert(fill_ + succ->fill_ <= Node::Capacity);

            for (unsigned k = 0; k < succ->fill_; ++k) {
                push(fill_, std::move(succ->slotAt(succ->map_.mapToSlot(k))));
            }
        }

        template<class Pattern>
        std::strong_ordering operator<=>(const Pattern &pattern) const
        {
            if (at(fill_ - 1) < pattern) return std::strong_ordering::less;
            if (pattern < at(0)) return std::strong_ordering::greater;
            return std::strong_ordering::equal;
        }

    private:
        Item &slotAt(unsigned slotIndex) {
            return reinterpret_cast<Item *>(data_)[slotIndex];
        }

        const Item &slotAt(unsigned slotIndex) const {
            return reinterpret_cast<const Item *>(data_)[slotIndex];
        }

        BucketSlotMap<Capacity> map_;
        std::byte data_[Capacity * sizeof(Item)] alignas(Item);
    };

    BucketVector() = default;

    BucketVector(const BucketVector &other)
    {
        for (auto pos = other.head(); pos; ++pos) {
            pushBack(other.at(pos));
        }
    }

    ~BucketVector()
    {
        deplete();
    }

    Locator head() const
    {
        return Locator{revision(), 0, getMinNode(), 0};
    }

    Locator tail() const
    {
        long index = count() - 1;
        Node *node = lastLeaf_;
        unsigned egress = node ? node->fill_ - 1 : 0;
        return Locator{revision(), index, node, egress};
    }

    Locator from(long index) const
    {
        unsigned egress = 0;
        Node *node = stepDownTo(index, &egress);
        if (weight_ <= index) node = nullptr;
        return Locator{revision(), index, node, egress};
    }

    template<class Access = Item>
    static Access &value(const Locator &target)
    {
        assert(*target.revisionPtr_ == target.revisionSaved_); // cannot access container with undefined locator
        assert(target); // locator needs to be valid

        return static_cast<Leaf *>(target.stop_)->at(target.egress_);
    }

    Item &at(const Locator &target) const
    {
        assert(target.revisionPtr_ == &revision_); // locator needs to belong to this container
        assert(*target.revisionPtr_ == target.revisionSaved_); // cannot access container with undefined locator
        assert(target); // locator needs to be valid

        return static_cast<Leaf *>(target.stop_)->at(target.egress_);
    }

    Item &operator[](long index) const
    {
        return at(index);
    }

    Item &at(long index) const
    {
        unsigned egress;
        return static_cast<Leaf *>(stepDownTo(index, &egress))->at(egress);
    }

    Item &first() const
    {
        Node *firstLeaf = getMinNode();
        return static_cast<Leaf *>(firstLeaf)->at(0);
    }

    Item &last() const
    {
        return static_cast<Leaf *>(lastLeaf_)->at(lastLeaf_->fill_ - 1);
    }

    template<class... Args>
    void emplaceAt(Locator &target, Args... args);

    template<class... Args>
    void emplaceAt(long index, Args... args);

    void push(long index, const Item &item);

    template<class... Args>
    void emplaceLast(Args... args)
    {
        emplace(lastLeaf_, lastLeaf_ ? lastLeaf_->fill_ : 0, args...);
    }

    void pushBack(const Item &item)
    {
        push(lastLeaf_, lastLeaf_ ? lastLeaf_->fill_ : 0, item);
    }

    template<class... Args>
    void emplace(Node *target, unsigned egress, Args... args)
    {
        Leaf *leaf = target ? static_cast<Leaf *>(target) : nullptr;
        emplaceAndTell(leaf, egress, args...);
    }

    void push(Node *target, unsigned egress, const Item &item)
    {
        Leaf *leaf = target ? static_cast<Leaf *>(target) : nullptr;
        pushAndTell(leaf, egress, item);
    }

    template<class... Args>
    void emplaceAndTell(Leaf *&target, unsigned &egress, Args... args);

    void pushAndTell(Leaf *&target, unsigned &egress, const Item &item);

    template<class... Args>
    void emplaceAndStep(Locator &target, Args... args)
    {
        if (count() == 0) emplaceLast(args...);
        else assert(bool(target)); // cannot insert an item using an invalid locator
        emplace(target.index_, args...);
        target = from(target.index_);
    }

    void pushAndStep(Locator &target, const Item &item)
    {
        if (count() == 0) pushBack(item);
        else {
            assert(bool(target)); // cannot insert an item using an invalid locator
            push(target.index_, item);
        }
        target = from(target.index_);
    }

    void pushAndTell(Locator &target, const Item &item)
    {
        assert(target);
        Leaf *leaf = static_cast<Leaf *>(target.stop_);
        unsigned egress = target.egress_;
        pushAndTell(leaf, egress, item);
        target.stop_ = leaf;
        target.egress_ = egress;
    }

    void pop(long index);

    void pop(Node *target, unsigned egress);

    void popAndStep(Locator &pos)
    {
        assert(bool(pos)); // cannot remove an item using an invalid locator
        pop(static_cast<Node *>(pos.stop_), pos.egress_);
        pos = from(pos.index_);
    }

    void deplete()
    {
        if (root_) {
            Node *leaf = lastLeaf_;
            Branch *parent = leaf->parent_;
            while (leaf) {
                Node *pred = leaf->pred();
                delete static_cast<Leaf *>(leaf);
                leaf = pred;
            }
            while (parent) {
                Node *branch = parent;
                parent = parent->parent_;
                while (branch) {
                    Node *pred = branch->pred();
                    delete branch;
                    branch = pred;
                }
            }
            #ifndef NDEBUG
            unsigned revisionSaved = revision_;
            #endif
            *this = BucketVector{};
            #ifndef NDEBUG
            revision_ = revisionSaved + 1;
            #endif
        }
    }

    class SearchShim
    {
    public:
        explicit SearchShim(const BucketIndexTree *tree):
            tree_{tree},
            idealLeafCount_{tree->idealLeafCount()}
        {}

        const Leaf &at(long index) const
        {
            return *static_cast<const Leaf *>(tree_->idealLeafAt(index));
        }

        long count() const { return idealLeafCount_; }

    private:
        const BucketIndexTree *tree_;
        long idealLeafCount_;
    };

    template<class Search = FindAny, class Pattern = Item>
    bool lookup(const Pattern &pattern, long *finalIndex = nullptr, Leaf **target = nullptr, unsigned *egress = nullptr) const;

    template<class Search = FindAny, class Pattern = Item>
    bool find(const Pattern &pattern, Out<Locator> target = None{}) const
    {
        long index = 0;
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup<Search, Pattern>(pattern, &index, &leaf, &egress);
        if (found && target.requested()) target = Locator{revision(), index, leaf, egress};
        return found;
    }

    bool insertUnique(const T &item, Out<Locator> target = None{})
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        long index = 0;
        bool found = lookup(item, &index, &leaf, &egress);
        if (!found) pushAndTell(leaf, egress, item);
        if (target.requested()) target = Locator{revision(), index, leaf, egress};
        return !found;
    }

    void insertLast(const T &item)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup<FindLast>(item, nullptr, &leaf, &egress);
        push(leaf, egress + found, item);
    }

    void establish(const T &item)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup(item, nullptr, &leaf, &egress);
        if (found) leaf->at(egress) = item;
        else push(leaf, egress, item);
    }

    template<class Pattern = Item>
    bool remove(const Pattern &pattern)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup(pattern, nullptr, &leaf, &egress);
        if (found) pop(leaf, egress);
        return found;
    }

    /** \todo optimize reverse() operation
      */
    void reverse()
    {
        using std::swap;

        if (count() > 2) {
            auto hi = head();
            auto ti = tail();
            while (hi < ti) {
                swap(at(hi), at(ti));
                ++hi;
                --ti;
            }

            #ifndef NDEBUG
            ++revision_;
            #endif
        }
    }
};

template<class T>
template<class... Args>
void BucketVector<T>::emplaceAt(Locator &target, Args... args)
{
    assert(target);
    assert(target.revisionPtr_ == &revision_); // locator needs to belong to this container
    assert(target.revisionSaved_ == revision_); // locator needs to be up-to-date

    unsigned egress = target.egress_;
    Leaf *leaf = static_cast<Leaf *>(target.stop_);
    emplaceAndTell(leaf, egress, args...);
    target.egress_ = egress;
    target.stop_ = leaf;
    #ifndef NDEBUG
    target.revisionSaved_ = revision_;
    #endif
}

template<class T>
template<class... Args>
void BucketVector<T>::emplaceAt(long index, Args... args)
{
    unsigned egress = 0;
    Node *node = stepDownTo(index, &egress);
    emplace(node, egress, args...);
}

template<class T>
void BucketVector<T>::push(long index, const Item &item)
{
    unsigned egress = 0;
    Node *node = stepDownTo(index, &egress);
    push(node, egress, item);
}

template<class T>
template<class... Args>
void BucketVector<T>::emplaceAndTell(Leaf *&target, unsigned &egress, Args... args)
{
    if (target) {
        dissipate(target, egress);
        target->emplace(egress, args...);
        updateWeights(target, 1);
    }
    else {
        target = new Leaf;
        egress = 0;
        target->emplace(egress, args...);
        weight_ = 1;
        root_ = target;
        lastLeaf_ = target;
        ++height_;
        // firstLeaf_ = leaf;
        // leafCount_ = 1;
    }
    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class T>
void BucketVector<T>::pushAndTell(Leaf *&target, unsigned &egress, const Item &item)
{
    if (target) {
        dissipate(target, egress);
        target->push(egress, item);
        updateWeights(target, 1);
    }
    else {
        target = new Leaf;
        egress = 0;
        target->push(egress, item);
        weight_ = 1;
        root_ = target;
        lastLeaf_ = target;
        ++height_;
        // firstLeaf_ = leaf;
        // leafCount_ = 1;
    }
    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class T>
void BucketVector<T>::pop(long index)
{
    unsigned egress = 0;
    Leaf *target = static_cast<Leaf *>(stepDownTo(index, &egress));
    pop(target, egress);
}

template<class T>
void BucketVector<T>::pop(Node *target, unsigned egress)
{
    if (weight_ > 1) {
        Leaf *leaf = static_cast<Leaf *>(target);
        leaf->drop(egress).~Item();
        updateWeights(leaf, -1);
        if (leaf->succ_) isDense_ = false;
        relieve(leaf);
        reduce();
    }
    else {
        delete static_cast<Leaf *>(root_);
        root_ = nullptr;
        weight_ = 0;
        lastLeaf_ = nullptr;
        // leafCount_ = 0;
        --height_;
        isDense_ = true;
    }
    #ifndef NDEBUG
    ++revision_;
    #endif
}

template<class T>
template<class Search, class Pattern>
bool BucketVector<T>::lookup(const Pattern &pattern, long *finalIndex, Leaf **target, unsigned *egress) const
{
    bool found = false;
    if (height_ == 0) {
        Leaf *leaf = static_cast<Leaf *>(root_);
        long i = 0;
        found = Search::find(leaf, pattern, &i);
        if (finalIndex) *finalIndex = i;
        if (target) *target = leaf;
        if (egress) *egress = i;
    }
    else if (height_ > 0) {
        Leaf *leaf = static_cast<Leaf *>(lastLeaf_);
        if (leaf->at(leaf->fill_ - 1) < pattern) {
            if (finalIndex) *finalIndex = weight_;
            if (target) *target = leaf;
            if (egress) *egress = leaf->fill_;
        }
        else {
            SearchShim shim{this};
            long j = 0;
            bool lookInside = Search::find(&shim, pattern, &j);
            long i = 0;
            leaf = static_cast<Leaf *>(locateIdealLeaf(j, &i));
            if (lookInside) {
                unsigned k = 0;
                found = Search::find(leaf, pattern, &k);
                i += k;
                if (egress) *egress = k;
            }
            if (finalIndex) *finalIndex = i;
            if (target) *target = leaf;
        }
    }
    else if (finalIndex) {
        *finalIndex = 0;
    }
    return found;
}

} // namespace cc::buckets
