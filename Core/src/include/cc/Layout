/*
 * Copyright (C) 2007-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/bst/LayoutTree>
#include <cc/ArrayIterator>
#include <cc/SourceIterator>
#include <cc/Cow>
#include <cc/container>
#include <cassert>

namespace cc {

/** \class Layout cc/Layout
  * \ingroup container
  * \brief %Layout data container
  * \tparam T Item type
  * \tparam E Extent type
  * \todo add support for item spacing
  */
template<class T, class E>
class Layout
{
public:
    using Item = T; ///< Item type
    using Extent = E; ///< Extent type

    /** Create an empty layout
      */
    Layout() = default;

    /** Insert at \a index the \a item with given \a extent
      */
    void insertAt(long index, const Item &item, Extent extent)
    {
        assert(0 <= index && index <= count());
        me().insertAt(index, item, extent);
    }

    /** Remove the item at \a index and optionally return a copy in \a item
      */
    void removeAt(long index, Out<Item> item = None{})
    {
        assert(has(index));
        me().removeAt(index, item);
    }

    /** Insert \a item at the front
      */
    void pushFront(const Item &item, Extent extent)
    {
        me().insertAt(0, item, extent);
    }

    /** Insert \a item at the back
      */
    void pushBack(const Item &item, Extent extent)
    {
        me().insertAt(me().count(), item, extent);
    }

    /** Sum of all item extents
      */
    Extent extent() const { return me().extent(); }

    /** \brief %Access item value and associated layout properties
      */
    class Access
    {
    public:
        /** Create a null item access
          */
        Access() = default;

        /** Get access to the current item value
          */
        const Item &item() const { return node_->item_; }

        /** Get access to the current item value
          */
        Item &item() { return node_->item_; }

        /** Get the current item's extent
          */
        const Extent &extent() const { return node_->itemExtent_; }

        /** Set the current item's extent
          */
        void setExtent(Extent newValue) { node_->setItemExtent(newValue); }

        /** Get the current item's layout position
          */
        Extent pos() const { return node_->getPos(); }

    private:
        friend class Layout;
        Access(Layout::Tree::Node *node):
            node_{node}
        {}
        Layout::Tree::Node *node_ { nullptr };
    };

    /** Number of items
      */
    long count() const { return me().count(); }

    /** Check if \a index is valid
      */
    bool has(long index) const
    {
        return index < me().count() && 0 <= index;
    }

    /** Get access to the item at \a index
      */
    Access at(long index) const
    {
        assert(has(index));
        return me().getNodeAt(index);
    }

    /** Get access to the item at \a index
      */
    Access operator[](long index) const { return at(index); }

    /** \brief %Layout stop (item access with precomputed layout position)
      */
    class Stop: public Access
    {
    public:
        /** Create a null layout stop
          */
        Stop() = default;

        Extent pos() const { return pos_; } ///< Layout position of this item

    private:
        friend class Layout::Range;
        friend class Layout;

        Stop(Layout::Tree::Node *node, Extent pos):
            Access{node},
            pos_{pos}
        {}

        Extent pos_;
    };

    /** \brief %Range for reading all layout stops within a given layout range
      */
    class Range
    {
    public:
        using Item = Stop;

        /** Create a new view range for all stops of \a layout
          */
        explicit Range(const Layout &layout):
            layout_{layout},
            i_{0},
            i1_{layout.count()},
            y_{0}
        {}

        /** Create a new view range for \a layout in range [\a pos0, \a pos1)
          */
        Range(const Layout &layout, Extent pos0, Extent pos1):
            layout_{layout}
        {
            layout->getView(pos0, pos1, &i_, &i1_, &y_);
        }

        /** Read the next layout stop \a stop
          */
        bool read(Out<Stop> stop)
        {
            if (i_ < i1_) {
                stop = Stop{layout_->getNodeAt(i_), y_};
                ++i_;
                y_ += stop->extent();
                return true;
            }
            return false;
        }

        using iterator = SourceIterator<Range>; ///< \internal Value iterator
        using value_type = Stop; ///< \internal Item value type
        using size_type = long; ///< \internal Type of the container capacity

        iterator begin() { return iterator{this}; }
        iterator end() { return iterator{}; }

    private:
        Layout layout_;
        long i_, i1_;
        Extent y_;
    };

    /** Get a iterateable source for reading all layout stops in layout range [\a pos0, \a pos1)
      */
    Range operator()(Extent pos0, Extent pos1) const { return Range{*this, pos0, pos1}; }

    /** Get a iterateable source for reading all layout stops
      */
    Range operator()() const { return Range{*this}; }

    /** Find the item covering layout position \a target
      */
    Stop find(Extent target) const
    {
        Extent itemPos = 0;
        auto node = me().find(target, None{}, &itemPos);
        return Stop{node, itemPos};
    }

    /** Get index of \a item (if \a Item supports IndexTracking)
      */
    long indexOf(const Item &item) const
    {
        return me().getIndexOf(item);
    }

    /** Remove \a item from the layout (if \a Item supports IndexTracking)
      */
    void remove(const Item &item)
    {
        removeAt(indexOf(item));
    }

private:
    friend void testLayout(const auto &layout);

    using Tree = bst::LayoutTree<Item, Extent>;

    const Tree *operator->() const { return &me(); }

    Cow<Tree> me;
};

} // namespace cc
