/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

namespace cc {

/** \class KeyValue cc/KeyValue
  * \brief Key-value pair
  */
template<class K, class V = K>
class KeyValue
{
public:
    using Key = K; ///< key type
    using Value = V; ///< value type

    /** Create an undefined key-value pair
      */
    KeyValue()
    {}

    /** Create a search key
      */
    KeyValue(const Key &key):
        key_{key}
    {}

    /** Create a defined key-value pair
      */
    KeyValue(const Key &key, const Value &value):
        key_{key},
        value_{value}
    {}

    /** Get key
      */
    const Key &key() const { return key_; }

    /** Get value
      */
    const Value &value() const { return value_; }

    /** Get mutable value
      */
    Value &value() { return value_; }

    /** %Set new value
      */
    void setValue(const Value &newValue) { value_ = newValue; }

    /** Comparism operators
      * @{
      */
    bool operator< (const KeyValue &b) const { return key_ <  b.key_; }
    bool operator> (const KeyValue &b) const { return key_ >  b.key_; }
    bool operator==(const KeyValue &b) const { return key_ == b.key_; }
    bool operator!=(const KeyValue &b) const { return key_ != b.key_; }
    bool operator<=(const KeyValue &b) const { return key_ <= b.key_; }
    bool operator>=(const KeyValue &b) const { return key_ >= b.key_; }
    /** @}
      */

private:
    Key key_;
    Value value_;
};

template<class K, class V, class P>
inline bool operator<(const KeyValue<K, V> &a, const P &b) { return a.key() < b; }

template<class K, class V, class P>
inline bool operator<(const P &a, const KeyValue<K, V> &b) { return a < b.key(); }

} // namespac cc
