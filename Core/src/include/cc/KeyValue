/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

namespace cc {

/** \class KeyValue cc/KeyValue
  * \brief Key-value pair
  */
template<class K, class V = K>
class KeyValue
{
public:
    using Key = K; ///< key type
    using Value = V; ///< value type

    /** Create an undefined key-value pair
      */
    KeyValue()
    {}

    /** Create a search key
      */
    KeyValue(const Key &key):
        key_{key}
    {}

    /** Create a defined key-value pair
      */
    KeyValue(const Key &key, const Value &value):
        key_{key},
        value_{value}
    {}

    KeyValue(const Key &&key, const Value &&value):
        key_{std::move(key)},
        value_{std::move(value)}
    {}

    /** Get key
      */
    const Key &key() const { return key_; }

    /** Get value
      */
    const Value &value() const { return value_; }

    /** Get mutable value
      */
    Value &value() { return value_; }

    /** %Set new value
      */
    void setValue(const Value &newValue) { value_ = newValue; }

    /** Comparism operators
      * @{
      */

    /** Equality operator
      */
    bool operator==(const KeyValue &other) const { return key_ == other.key_; }

    /** Equality operator
      */
    template<class Pattern>
    bool operator==(const Pattern &pattern) const { return key_ == pattern; }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const KeyValue &other) const { return key_ <=> other.key_; }

    /** Ordering operator
      */
    template<class Pattern>
    std::strong_ordering operator<=>(const Pattern &pattern) const { return key_ <=> pattern; }

    /** @}
      */

private:
    Key key_;
    Value value_;
};

} // namespac cc
