/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/VariantType>

namespace cc {

/** \class Color cc/Color
  * \ingroup misc
  * \brief ARGB color tuple (32 bit)
  */
class Color
{
public:
    static const Color Transparent; ///< Transparent color constant
    static const Color Black; ///< Black color constant
    static const Color White; ///< White color constant
    static const Color Red; ///< Red color constant
    static const Color Green; ///< Green color constant
    static const Color Blue; ///< Blue color constant

    static constexpr int AlphaShift = 24; ///< Bit position of the alpha component within the 32 bit color word
    static constexpr int RedShift   = 16; ///< Bit position of the red component within the 32 bit color word
    static constexpr int GreenShift =  8; ///< Bit position of the green component within the 32 bit color word
    static constexpr int BlueShift  =  0; ///< Bit position of the blue component within the 32 bit color word

    static constexpr uint32_t RedMask = uint32_t(0xFF) << RedShift; ///< Bitmask for the red component of the 32 bit color word
    static constexpr uint32_t GreenMask = uint32_t(0xFF) << GreenShift; ///< Bitmask for the green component of the 32 bit color word
    static constexpr uint32_t BlueMask = uint32_t(0xFF) << BlueShift; ///< Bitmask for the blue component of the 32 bit color word
    static constexpr uint32_t AlphaMask = uint32_t(0xFF) << AlphaShift; ///< Bitmask for the alpha component of the 32 bit color word

    /** Get the full color of hue \a h
      * \param h Hue in range [0, 360]
      */
    static Color fromHue(double h) { return fromHsv(h, 1., 1.); }

    /** Get color from a HSV tuple
      * \param h Hue in range [0, 360]
      * \param s Saturation in range [0, 1]
      * \param v Value in range [0, 1]
      */
    static Color fromHsv(double h, double s, double v);

    /** Get color from HSL tuple
      * \param h Hue in range [0, 360]
      * \param s Saturation in range [0, 1]
      * \param l Luminance in range [0, 1]
      */
    static Color fromHsl(double h, double s, double l);

    /** Alpha-blend color \a a over color \a b
      */
    static Color blend(Color a, Color b)
    {
        b.applyOver(a);
        return b;
    }

    /** Create an invalid color
      */
    Color():
        me{0x00FFFFFFu}
    {}

    /** Create a color from word \a w
      * \see RedMask, GreenMask, BlueMask, AlphaMask
      */
    Color(uint32_t w):
        me{w | (w < 0x1000000u ? 0xFF000000u : 0u)}
    {}

    /** \internal
      */
    Color(int w):
        Color{static_cast<uint32_t>(w)}
    {}

    /** \internal
      */
    Color(const char *s)
    {
        *this = parse(s);
    }

    /** Construct a color from color literal or name \a s
      * \param s %Color specification to parse
      * %Color literals can be either SVG color names (e.g. 'AliceBlue') or literal RGB tuples (\#RRGGBB, \#RRGGBBAA, \#RGB, \#RGBA).
      */
    explicit Color(const String &s)
    {
        *this = parse(s);
    }

    /** Compose a color from its components
      * \param r Red component (0..0xFF)
      * \param g Green component (0..0xFF)
      * \param b Blue component (0..0xFF)
      * \param a Opacity component (0..0xFF)
      */
    template<class T>
    Color(T r, T g, T b, T a = 0xFF):
        me{compose(r, g, b, a)}
    {}

    /** Create a semi-transparent version of this color with \a percent opacity
      */
    Color operator()(int percent) const
    {
        return Color{
            red(), green(), blue(),
            uint32_t(percent) * 0xFF / 100
        };
    }

    /** \copydoc isValid()
      */
    explicit operator bool() const
    {
        return isValid();
    }

    /** \brief Check if valid
      *
      * A color is considered invalid, if alpha is zero and either red, green or blue is non-zero.
      */
    bool isValid() const {
        return !(
            alpha() == 0 && (
                red()   != 0 ||
                green() != 0 ||
                blue()  != 0
            )
        );
    }

    /** Check if this color is fully opaque
      */
    bool isOpaque() const {
        return alpha() == 0xFF;
    }

    /** %Return the alpha color component
      */
    uint32_t alpha() const { return component<AlphaShift>(); }

    /** %Return the red color component
      */
    uint32_t red() const { return component<RedShift>(); }

    /** %Return the green color component
      */
    uint32_t green() const { return component<GreenShift>(); }

    /** %Return the blue color component
      */
    uint32_t blue() const { return component<BlueShift>(); }

    /** Alpha-blend color \a b over this color
      */
    void applyOver(Color b);

    /** Alpha-blend this color over \a b and return the result
      */
    Color on(Color b) const
    {
        b.applyOver(*this);
        return b;
    }

    /** Mix color \a b into this color by \a percent
      */
    void mixIn(Color b, int percent);

    /** %Return this color mixed with \a b by \a percent
      */
    Color mixedWith(Color b, int percent) const
    {
        if (percent == 0) return *this;

        Color c = *this;
        c.mixIn(b, percent);
        return c;
    }

    /** %Return a lighter version of this color
      */
    Color lighter(int percent) const
    {
        return mixedWith(Color::White, percent);
    }

    /** %Return a darker version of this color
      */
    Color darker(int percent) const
    {
        return mixedWith(Color::Black, percent);
    }

    /** Translate from non-premultiplied to premultiplied representation
      */
    Color premultiplied() const
    {
        Color c = *this;
        c.premultiply();
        return c;
    }

    /** Translate from premultiplied to non-premultiplied representation
      */
    Color normalized() const
    {
        Color c = *this;
        c.normalize();
        return c;
    }

    /** \copydoc premultiplied()
      */
    void premultiply()
    {
        uint32_t h = me;
        uint16_t a = component<AlphaShift, uint16_t>(h);
        if (a == 0 || a == 0xFF) return;
        typedef uint16_t v4ui16 __attribute__((vector_size(8)));
        v4ui16 v {
            component<RedShift,   uint16_t>(h),
            component<GreenShift, uint16_t>(h),
            component<BlueShift,  uint16_t>(h),
            0
        };
        v = (a * v) / 0xFF;
        me = compose(v[0], v[1], v[2], a);
    }

    /** \copydoc normalized()
      */
    void normalize()
    {
        uint32_t h = me;
        uint16_t a = component<AlphaShift, uint16_t>(h);
        if (a == 0 || a == 0xFF) return;
        typedef uint16_t v4ui16 __attribute__((vector_size(8)));
        v4ui16 v {
            component<RedShift,   uint16_t>(h),
            component<GreenShift, uint16_t>(h),
            component<BlueShift,  uint16_t>(h),
            0
        };
        v = (0xFF * v) / a;
        me = compose(v[0], v[1], v[2], a);
    }

    /** Convert to an unsigned 32-bit word
      */
    uint32_t value() const { return me; }

    /** Access underlying unsigned 32-bit word
      */
    uint32_t &value() { return me; }

    /** \copydoc value()
      */
    operator uint32_t() const { return me; }

    /** Stringify this color value
      */
    String toString() const;

private:
    static Color parse(const char *s);
    static bool lookup(const String &name, Out<Color> color);

    template<int Shift, class T = uint32_t>
    T component() const { return component<Shift, T>(me); }

    template<int Shift, class T = uint32_t>
    static T component(uint32_t w) { return (w >> Shift) & 0xFF; }

    template<class T>
    static uint32_t compose(T r, T g, T b, T a = 0xFF) {
        return
            (uint32_t(a) << AlphaShift) |
            (uint32_t(r) << RedShift  ) |
            (uint32_t(g) << GreenShift) |
            (uint32_t(b) << BlueShift ) ;
    };

    uint32_t me;
};

/** Explicity convert to an unsigned 32-bit word
  */
inline uint32_t operator+(const Color &c) { return c; }

/** Stringify color \a c
  */
inline String str(const Color &c) { return c.toString(); }

/** \name Color space transformation functions
  */
///@{
/// \ingroup misc

/** Translate from the RGB to the HSV color space
  * \param r Red in range [0, 1]
  * \param g Green in range [0, 1]
  * \param b Blue in range [0, 1]
  * \param h Returns hue in range [0, 360)
  * \param s Returns saturation in range [0, 1]
  * \param v Returns value in range [0, 1]
  */
void rgbToHsv(double r, double g, double b, Out<double> h, Out<double> s, Out<double> v);

/** Translate from the HSV to the RGB color space
  * \param h Hue in range [0, 360]
  * \param s Saturation in range [0, 1]
  * \param v Value in range [0, 1]
  * \param r Returns red in range [0, 1]
  * \param g Returns green in range [0, 1]
  * \param b Returns blue in range [0, 1]
  */
void hsvToRgb(double h, double s, double v, Out<double> r, Out<double> g, Out<double> b);

/** Translate from the RGB to the HSL color space
  * \param r Red in range [0, 1]
  * \param g Green in range [0, 1]
  * \param b Blue in range [0, 1]
  * \param h Returns hue in range [0, 360)
  * \param s Returns saturation in range [0, 1]
  * \param l Returns luminance in range [0, 1]
  */
void rgbToHsl(double r, double g, double b, Out<double> h, Out<double> s, Out<double> l);

/** Translate from the HSL to the RGB color space
  * \param h Hue in range [0, 360]
  * \param s Saturation in range [0, 1]
  * \param l Luminance in range [0, 1]
  * \param r Returns red in range [0, 1]
  * \param g Returns green in range [0, 1]
  * \param b Returns blue in range [0, 1]
  */
void hslToRgb(double h, double s, double l, Out<double> r, Out<double> g, Out<double> b);

///@}

template<>
struct VariantType<Color>
{
    static const TypeInfo &info();

    static void store(void *bytes, const Color &x)
    {
        static_assert(sizeof(String) <= 8);

        new(bytes)Color{x};
    }

    static Color retrieve(const void *bytes, const TypeInfo &typeInfo = info())
    {
        assert(&typeInfo == &VariantType<Color>::info()); // expected type 'Color'

        return *static_cast<const Color *>(bytes);
    }
};

} // namespace cc
