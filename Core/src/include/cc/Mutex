/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/SystemError>
#include <cc/Guard>
#include <pthread.h>

namespace cc {

class WaitCondition;

/** \class Mutex cc/Mutex
  * \brief Unconditional thread suspension and resumption
  * \exception SystemError
  * \see Guard
  */
class Mutex final
{
public:
    /** Create a new mutex
      */
    Mutex();

    /** \internal
      */
    ~Mutex();

    /** Try to lock this mutex
      */
    bool tryAcquire();

    /** Lock this mutex
      */
    void acquire();

    /** Unlock this mutex
      */
    void release();

private:
    friend class WaitCondition;

    Mutex(const Mutex&) = delete;
    Mutex& operator=(const Mutex&) = delete;

    pthread_mutex_t mutex_;
};

} // namespace cc
