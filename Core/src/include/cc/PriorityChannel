/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/PriorityQueue>
#include <cc/SourceIterator>
#include <cc/WaitCondition>

namespace cc {

/** \class PriorityChannel cc/PriorityChannel
  * \ingroup concurrency
  * \brief Prioritized thread communication channel
  * \tparam T Item type
  * \tparam P Priority type
  * \tparam G Tree granularity
  */
template<class T, class P = int, unsigned G = DefaultTreeGranularity>
class PriorityChannel
{
public:
    using Item = T; ///< Item type
    using Priority = P; ///< Priority type

    static constexpr unsigned Granularity = G; ///< Tree granularity

    /** Create a new channel
      */
    PriorityChannel() = default;

    /** Add a new item to the end
      * \param item Item value
      * \param priority Item priority
      * \return True if successful
      */
    bool pushBack(const T &item, P priority = 0)
    {
        Guard<Mutex> guard{me().mutex_};
        if (!me().close_) {
            me().queue_.pushBack(item, priority);
            me().notEmpty_.signal();
            return true;
        }
        return false;
    }

    /** Remove an item from the front
      * \param item Returns the item value
      * \return True if successful
      */
    bool popFront(Out<T> item = None{})
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            me().notEmpty_.wait(me().mutex_);
        }
        if (me().queue_.count() > 0) {
            me().queue_.popFront(&item);
            return true;
        }
        return false;
    }

    /** \copydoc popFront()
      */
    bool read(Out<T> item)
    {
        return popFront(&item);
    }

    /** \copydoc pushBack()
      */
    bool write(const T &item, P priority = 0)
    {
        return pushBack(item, priority);
    }

    /** Wait for the channel to become ready to read
      * \return True if successful
      */
    bool wait()
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_)
            me().notEmpty_.wait(me().mutex_);
        return me().queue_.count() > 0 || me().close_;
    }

    /** Wait for the channel to become ready to read for a limited time
      * \param time Seconds elapsed since the begin of Epoch
      * \return True if successful
      * \see System::now()
      */
    bool waitUntil(double time)
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            if (!me().notEmpty_.waitUntil(time, me().mutex_))
                break;
        }
        return me().queue_.count() > 0 || me().close_;
    }

    /** Remove an item from the head of the queue before given time
      * \param time Seconds elapsed since the begin of Epoch
      * \param item Returns the item value
      * \return True if successful
      * \see System::now()
      */
    bool popFrontBefore(double time, Out<T> item = None{})
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            if (!me().notEmpty_.waitUntil(time, me().mutex_))
                break;
        }
        if (me().queue_.count() > 0) {
            me().queue_.popFront(item);
            return true;
        }
        return false;
    }

    /** Get the number of queued items
      */
    long count() const
    {
        Guard<Mutex> guard{me().mutex_};
        return me().queue_.count();
    }

    /** Shutdown communication
      */
    void close()
    {
        Guard<Mutex> guard{me().mutex_};
        me().close_ = true;
        me().notEmpty_.broadcast();
    }

    /** Iteration start
      */
    SourceIterator<PriorityChannel> begin() { return SourceIterator<PriorityChannel>{this}; }

    /** Iteration end
      */
    SourceIterator<PriorityChannel> end() { return SourceIterator<PriorityChannel>{}; }

private:
    struct State {
        mutable Mutex mutex_;
        WaitCondition notEmpty_;
        PriorityQueue<Item, Priority, Granularity> queue_;
        bool close_ { false };
    };
    Shared<State> me;
};

} // namespace cc
