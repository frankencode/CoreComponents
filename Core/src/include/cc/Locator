/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/buckets/BucketStop>
#include <compare>
#include <cassert>

namespace cc::buckets {
template<class T> class BucketVector;
template<class T> class BucketChain;
};

namespace cc {

/** \class Locator cc/Locator
  * \brief Locate items inside containers
  */
class Locator
{
public:
    /** Create a locator pointing to \a index
      */
    Locator(long index = 0):
        index_{index},
        stop_{nullptr},
        egress_{0}
    {}

    /** %Return the index value of the locator (unary plus operator)
      */
    long index() const { return index_; }

    /** \copydoc index()
      */
    long operator+() const { return index_; }

    /** Step to the next item (prefix increment operator)
      */
    Locator &operator++() { stepNext(); return *this; }

    /** Step to the previous item (prefix decrement operator)
      */
    Locator &operator--() { stepBack();  return *this; }

    /** Step to the next item and return the old locator value (postfix increment operator)
      */
    Locator operator++(int) { Locator pos = *this; stepNext(); return pos; }

    /** Step to the previous item and return the old locator value (postfix decrement operator)
      */
    Locator operator--(int) { Locator pos = *this; stepBack(); return pos; }

    /** Get locator value stepped \a delta items forward (addition operator)
      */
    Locator operator+(long delta)
    {
        Locator pos = *this;
        for (; delta > 0; --delta) ++pos;
        for (; delta < 0; ++delta) --pos;
        return pos;
    }

    /** Get locator value stepped \a delta items backward (substraction operator)
      */
    Locator operator-(long delta) { return (*this) + -delta; }

    /** Get distance between this and another locator (substraction operator)
      */
    long operator-(const Locator &other) const { return index_ - other.index_; }

    /** Equality operator
      */
    bool operator==(const Locator &other) const { return index_ == other.index_; }

    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Locator &other) const { return index_ <=> other.index_; }

    /** Check if this locator is valid
      */
    bool isValid() const { return stop_; }

    /** \copydoc isValid()
      */
    explicit operator bool() const { return stop_; }

protected:
    using BucketStop = buckets::BucketStop;

    template<class>
    friend class cc::buckets::BucketVector;

    template<class>
    friend class cc::buckets::BucketChain;

    explicit Locator(const unsigned *revision, long index, BucketStop *stop, unsigned egress):
        index_{index},
        stop_{stop},
        egress_{egress},
        #ifndef NDEBUG
        revisionSaved_{*revision},
        revisionPtr_{revision}
        #endif
    {}

    void stepNext()
    {
        assert(stop_); // cannot increment an invalid locator
        assert(*revisionPtr_ == revisionSaved_); // locator became undefined due to prior container modification

        ++index_;
        ++egress_;
        if (egress_ == stop_->fill_) {
            egress_ = 0;
            stop_ = stop_->succ_;
        }
    }

    void stepBack()
    {
        assert(stop_); // cannot decrement an invalid locator
        assert(*revisionPtr_ == revisionSaved_); // locator became undefined due to prior container modification

        --index_;
        if (egress_ == 0) {
            stop_ = stop_->pred_;
            egress_ = stop_ ? stop_->fill_ - 1 : 0;
        }
        else
            --egress_;
    }

    long index_;
    BucketStop *stop_;
    unsigned egress_;
    #ifndef NDEBUG
    unsigned revisionSaved_ { 0 };
    const unsigned *revisionPtr_ { &revisionSaved_ };
    #endif
};

} // namespace cc
