/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/buckets/BucketVector>
#include <cc/Iterator>
#include <cc/StableSort>
#include <cc/InOut>
#include <cc/Cow>
#include <cc/container>
#include <initializer_list>
#include <utility>
#include <cassert>

namespace cc {

/** \class List cc/List
  * \ingroup container
  * \brief %List data container
  * \tparam T Item type
  * \tparam G Tree granularity
  * \todo List::allocate(long)
  */
template<class T, unsigned G = DefaultTreeGranularity>
class List {
public:
    using Item = T; ///< Item type
    static constexpr unsigned Granularity = G; ///< Tree granularity

    /** \name Construction and Assignment
      */
    /// @{

    /** Construct an empty list
      */
    List() = default;

    /** Construct a copy of \a other
      */
    List(const List &other) = default;

    /** Construct with initial \a items
      */
    List(std::initializer_list<Item> items)
    {
        for (const auto &x: items) append(x);
    }

    /** Initialize by joining initial \a lists
      */
    List(std::initializer_list<List> lists)
    {
        assert(lists.size() > 0);

        if (lists.size() == 1) {
            for (const auto &x: lists) *this = x;
        }
        else {
            for (const auto &x: lists) appendList(x);
        }
    }

    /** Take over the right-side list \a other
      */
    List(List &&other):
        me{std::move(other.me)}
    {}

    /** Assign list \a other
      */
    List &operator=(const List &other) = default;

    /** Assign right-side list \a other
      */
    List &operator=(List &&other)
    {
        me = std::move(other.me);
        return *this;
    }

    ///@}

    /** \name Item Access
      */
    ///@{

    /** Get a locator pointing to the first item
      */
    Locator head() const { return me().head(); }

    /** Get a locator pointing to the last item
      */
    Locator tail() const { return me().tail(); }

    /** Get a locator pointing to the item at \a index
      */
    Locator from(long index) const { return me().from(index); }

    /** Get the number of items stored in the list
      */
    long count() const { return me().count(); }

    /** \copydoc count()
      */
    long size() const { return me().count(); }

    /** Check if \a i is a valid index
      */
    bool has(long i) const { return i < me().count() && 0 <= i; }

    /** Check if this list is non-empty
      */
    explicit operator bool() const { return count() > 0; }

    /** \copydoc count()
      */
    long operator+() const { return me().count(); }

    /** Get constant reference to the item at position \a pos
      */
    const Item &at(Locator pos) const
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get constant reference to the item at \a index
      */
    const Item &at(long index) const
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** Get reference to the item at position \a pos
      */
    Item &mutableAt(Locator pos)
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get reference to the item at \a index
      */
    Item &mutableAt(long index)
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** \copydoc at(long index) const
      */
    const Item &operator[](long index) const { return at(index); }

    /** \copydoc mutableAt(long)
      */
    Item &operator[](long index) { return mutableAt(index); }

    /** Get value at \a index if 0 <= index && index < count(), otherwise return \a fallback
      */
    Item operator()(long index, const Item &fallback = Item{}) const
    {
        return has(index) ? at(index) : fallback;
    }

    /** Get constant reference to first item
      */
    const Item &first() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to last item
      */
    const Item &last() const
    {
        assert(count() > 0);
        return me().last();
    }

    /** Tell if \a item is the first item
      */
    bool firstIs(const Item &item) const
    {
        return &item == &first();
    }

    /** Tell if \a item is the last item
      */
    bool lastIs(const Item &item) const
    {
        return &item == &last();
    }

    /** Get reference to first item
      */
    Item &touchFirst()
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get reference to last item
      */
    Item &touchLast()
    {
        assert(count() > 0);
        return me().last();
    }

    ///@}

    /** \name Front and Back Operations
      */
    ///@{

    /** Insert \a item at the end of the list
      */
    void append(const Item &item)
    {
        me().emplaceBack(item);
    }

    /** Insert \a item at the beginning of the list
      */
    void prepend(const Item &item)
    {
        insertAt(0, item);
    }

    /** Append a copy of list \a other
      */
    template<class Item>
    void appendList(const List<Item> &other)
    {
         for (const Item &item: other)
            append(item);
    }

    /** Prepend a copy of list \a other
      */
    template<class Item>
    void prependList(const List<Item> &other)
    {
        for (const Item &item: other)
            prepend(item);
    }

    /** Insert \a item as a new last item
      */
    void pushBack(const Item &item)
    {
        me().emplaceBack(item);
    }

    /** Insert \a item as a new first item
      */
    void pushFront(const Item &item)
    {
        insertAt(0, item);
    }

    /** Remove the last item
      */
    void popBack()
    {
        assert(count() > 0);
        me().pop(count() - 1);
    }

    /** Remove the first item
      */
    void popFront()
    {
        assert(count() > 0);
        removeAt(0);
    }

    /** Insert a new last item
      * \param args construction arguments
      */
    template<class... Args>
    void emplaceBack(Args... args)
    {
        me().emplaceBack(args...);
    }

    /** Emplace a new first item
      * \param args construction arguments
      */
    template<class... Args>
    void emplaceFront(Args... args)
    {
        me().emplaceAt(0, args...);
    }

    /** Append \a item
      */
    List &operator<<(const Item& item)
    {
        pushBack(item);
        return *this;
    }

    /** Remove and return the first item
      */
    List &operator>>(Item& item)
    {
        if (count() > 0) {
            item = first();
            popFront();
        }
        return *this;
    }

    ///@}

    /** \name Positional Operations
      */
    ///@{

    /** Insert \a item at position \a pos
      */
    void insertAt(Locator &pos, const Item &item)
    {
        me().emplaceAndStep(pos, item);
    }

    /** Insert \a item at \a index
      */
    void insertAt(long index, const Item &item)
    {
        assert(0 <= index && index <= count());
        me().emplaceAt(index, item);
    }

    /** Remove item at position \a pos (and advance \a pos to the next item)
      */
    void removeAt(Locator &pos)
    {
        me().popAndStep(pos);
    }

    /** Remove item at \a index
      */
    void removeAt(long index)
    {
        assert(0 <= index && index < count());
        me().pop(index);
    }

    /** Create a new item at position \a pos (initialized with \a args)
      */
    template<class... Args>
    void emplaceAt(Locator &pos, Args... args)
    {
        assert(pos);
        me().emplaceAt(pos, args...);
    }

    /** Create a new item at \a index (initialized with \a args)
      */
    template<class... Args>
    void emplaceAt(long index, Args... args)
    {
        assert(0 <= index && index < count());
        me().emplaceAt(index, args...);
    }

    ///@}

    /** \name Global Operations
      */
    ///@{

    /** Find item \a b
      * \tparam Pattern Pattern type
      * \param pattern The pattern to search for
      * \param pos Provides the starting position and returns the final position
      * \return True if item \a b was found, false otherwise
      */
    template<class Pattern>
    bool find(const Pattern &pattern, InOut<Locator> pos = None{}) const
    {
        Locator target = pos;
        if (!target) target = head();
        for (; target; ++target) {
            if (at(target) == pattern)
                break;
        }
        pos = target;
        return bool(target);
    }

    /** Convenience method
      * \tparam Pattern Pattern type
      * \param pattern The pattern to search for
      */
    template<class Pattern>
    bool contains(const Pattern &pattern) const
    {
        return find(pattern);
    }

    /** Replace all occurences of \a pattern by \a substitute
      */
    template<class Pattern>
    void replace(const Pattern &pattern, const Item &substitute)
    {
        for (Item &item: *this) {
            if (item == pattern)
                item = substitute;
        }
    }

    /** Sort the list in-situ
      * \tparam Order Sort ordering
      *
      * Sorts the list according the given sort ordering.
      * The order of equal elements is preserved.
      */
    template<class Order = DefaultOrder>
    void sort()
    {
        StableSort<List::Tree, Order>::sort(me());
    }

    /** Sorts the list and removes all doubles
      * \tparam Order %Sorting order
      *
      * Sorts the list of items according the given sorting order and
      * removes all doubles thereafter.
      */
    template<class Order = DefaultOrder>
    void sortUnique()
    {
        sort();
        if (count() <= 1) return;
        Locator pos = head();
        Item x = at(pos);
        ++pos;
        while (pos) {
            const Item &y = at(pos);
            if (Order::compare(x, y) == std::strong_ordering::less) {
                x = y;
                ++pos;
            }
            else {
                removeAt(pos);
            }
        }
    }

    /** %Return a sorted copy of this list
      * \return sorted copy of this list
      *
      * The order of equal elements is preserved.
      */
    List sorted() const
    {
        List result;
        auto &buffer = result.me.touch();
        for (auto pos = head(); pos; ++pos) {
            buffer.insertLast(at(pos));
        }
        return result;
    }

    /** %Return a sorted copy of this list which does not contain repeated items
      * \return sorted copy of this list
      *
      * For repeated items only the first occurance is added to the sorted list.
      */
    List sortedUnique() const
    {
        List result;
        auto &buffer = result.me.touch();
        for (auto pos = head(); pos; ++pos) {
            buffer.insertUnique(at(pos));
        }
        return result;
    }

    /** %Reverse the order of items in the list
      */
    void reverse()
    {
        me().reverse();
    }

    /** %Return a copy of the list in which the order of items is reversed
      */
    List reversed() const
    {
        List result;
        auto &buffer = result.me.touch();
        for (auto pos = tail(); pos; --pos) {
            buffer.emplaceBack(at(pos));
        }
        return result;
    }

    /** %Call function \a f for each item
      * \tparam F Function type (lambda or functor)
      * \param f Unary function which gets called for each item
      */
    template<class F>
    void forEach(F f) const
    {
        for (auto &x: *this) f(x);
    }

    /** %Call function \a f for each item
      * \tparam F Function type (lambda or functor)
      * \param f Unary function which gets called for each item
      */
    template<class F>
    void forEach(F f)
    {
        for (auto &x: *this) f(x);
    }

    /** Remove all items
      */
    void deplete()
    {
        me().deplete();
    }

    /** Merge into a single item interspersed by \a sep
      */
    template<class R = T, class S = T>
    R join(S sep) const { return R(*this, sep); }

    /** Merge into a single item
      */
    template<class R = T>
    R join() const { return R{*this}; }

    ///@}

    using iterator = Iterator<BucketVector<Item>>; ///< \internal Value iterator
    using const_iterator = Iterator<const BucketVector<Item>>; ///< \internal Readonly value iterator
    using reverse_iterator = ReverseIterator<BucketVector<Item>>; ///< \internal Reverse value iterator
    using const_reverse_iterator = ReverseIterator<const BucketVector<Item>>; ///< \internal Readonly reverse value iterator
    using value_type = Item; ///< \internal Item value type
    using size_type = long; ///< \internal Type of the container capacity

    /** \name Standard Iterators
      */
    ///@{

    iterator begin() { me(); return head(); } ///< %Return iterator pointing to the first item (if any)
    iterator end  () { me(); return Locator{count()}; } ///< %Return iterator pointing behind the last item

    const_iterator begin () const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator cbegin() const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator end   () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item
    const_iterator cend  () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item

    reverse_iterator rbegin() { me(); return tail(); } ///< %Return reverse iterator pointing to the last item (if any)
    reverse_iterator rend  () { me(); return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    const_reverse_iterator rbegin () const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator crbegin() const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator rend   () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    const_reverse_iterator crend  () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    ///@}

    /** \name Comparism Operators
      */
    ///@{

    /** Equality operator
      */
    template<class Other>
    bool operator==(const Other &other) const { return container::equal(*this, other); }

    /** Ordering operator
      */
    template<class Other>
    std::strong_ordering operator<=>(const Other &other) const { return container::order(*this, other); }

    ///@}

    /** \internal
      */
    ///@{
    using Tree = BucketVector<Item, Granularity>;
    const Tree &tree() const { return me(); }
    ///@}

private:
    template<class, class, unsigned>
    friend class Set;

    template<class, class, unsigned>
    friend class MultiSet;

    template<class, class, class, unsigned>
    friend class Map;

    template<class, class, class, unsigned>
    friend class MultiMap;

    Cow<BucketVector<Item, Granularity>> me;
};

} // namespace cc
