/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/blist/config>
#include <cstdint>
#include <cstring>

namespace cc::blist {

/** \internal
  * \brief Storage slot index mapping table
  *
  * The SlotMap decides where individual items are stored in a bucket.
  */
template<unsigned G>
class SlotMap
{
public:
    static constexpr unsigned Capacity = G;

    SlotMap()
    {
        for (unsigned k = 0; k < Capacity; ++k) map_[k] = Capacity - k - 1;
    }

    unsigned mapToSlot(unsigned bucketIndex) const
    {
        return map_[bucketIndex];
    }

    unsigned mapToBucket(unsigned slotIndex) const
    {
    #if 0
        unsigned k = 0;
        while (map_[k] != slotIndex) ++k;
        return k;
    #else
        return static_cast<unsigned>(static_cast<const uint8_t *>(std::memchr(map_, slotIndex, Capacity)) - map_);
    #endif
    }

    unsigned pushEntry(unsigned bucketIndex, unsigned fill)
    {
        CC_BLIST_ASSERT(bucketIndex <= fill);
        CC_BLIST_ASSERT(fill < Capacity);

        unsigned slotIndex = map_[Capacity - 1];

        for (unsigned k = Capacity - 1; k > bucketIndex; --k) map_[k] = map_[k - 1];

        map_[bucketIndex] = slotIndex;

        return slotIndex;
    }

    unsigned popEntry(unsigned bucketIndex, unsigned fill)
    {
        CC_BLIST_ASSERT(bucketIndex < fill);
        CC_BLIST_ASSERT(fill > 0);

        unsigned slotIndex = map_[bucketIndex];

        for (unsigned k = bucketIndex; k < Capacity - 1; ++k) map_[k] = map_[k + 1];

        map_[Capacity - 1] = slotIndex;

        return slotIndex;
    }

private:
    uint8_t map_[Capacity];
};

template<>
class SlotMap<16>
{
public:
    static constexpr unsigned Capacity = 16;

    unsigned mapToSlot(unsigned bucketIndex) const
    {
        return (map_ >> (bucketIndex << 2u)) & 0xFu;
    }

    unsigned mapToBucket(unsigned slotIndex) const
    {
        unsigned k = 0;
        for (uint64_t m = map_; (m & 0xFu) ^ slotIndex; m >>= 4) ++k;
        return k;
    }

    unsigned pushEntry(unsigned bucketIndex, unsigned fill)
    {
        CC_BLIST_ASSERT(bucketIndex <= fill);
        CC_BLIST_ASSERT(fill < Capacity);

        const uint64_t slotIndex = map_ >> 60u;

        const unsigned bucketShift = bucketIndex << 2u;
        const uint64_t highMask = (~UINT64_C(0)) << bucketShift;
        const uint64_t lowMask  = ~highMask;

        map_ = ((map_ & highMask) << 4u) | (map_ & lowMask) | (slotIndex << bucketShift);

        return slotIndex;
    }

    unsigned popEntry(unsigned bucketIndex, unsigned fill)
    {
        CC_BLIST_ASSERT(bucketIndex < fill);
        CC_BLIST_ASSERT(fill > 0);

        const uint64_t slotIndex = mapToSlot(bucketIndex);

        const unsigned bucketShift = bucketIndex << 2u;
        const uint64_t highMask = (~UINT64_C(0)) << bucketShift;
        const uint64_t lowMask  = ~highMask;

        map_ = (slotIndex << 60u) | ((map_ >> 4u) & highMask) | (map_ & lowMask);

        return slotIndex;
    }

private:
    uint64_t map_ { UINT64_C(0x0123456789ABCDEF) };
};

} // namespace cc::blist
