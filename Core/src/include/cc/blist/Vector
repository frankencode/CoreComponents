/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/blist/Tree>
#include <cc/blist/StoragePolicy>
#include <cc/Locator>
#include <cc/find>

namespace cc::blist {

/** \internal
  * \brief Implementation of a variable length vector on top of \a Tree
  */
template<class T, unsigned G = StoragePolicy<T>::Granularity>
class Vector final: public Tree<G>
{
public:
    using Item = T;

    using Tree = blist::Tree<G>;
    using Node = Tree::Node;
    using Branch = Tree::Branch;

    class Leaf final: public Node
    {
    public:
        using Item = T;
        using Node::fill_;

        Leaf() = default;

        ~Leaf() {
            if (!std::is_trivial_v<Item>) {
                for (unsigned k = 0; k < fill_; ++k) {
                    at(k).~Item();
                }
            }
        }

        Item &at(unsigned egress) { return slotAt(map_.mapToSlot(egress)); }
        const Item &at(unsigned egress) const { return slotAt(map_.mapToSlot(egress)); }

        unsigned count() const { return fill_; }

        template<class... Args>
        void emplace(unsigned egress, Args... args)
        {
            unsigned slotIndex = map_.pushEntry(egress, fill_);
            ++fill_;
            Item *p = &slotAt(slotIndex);
            new (p) Item{args...};
        }

        void push(unsigned egress, Item &&item)
        {
            unsigned slotIndex = map_.pushEntry(egress, fill_);
            ++fill_;
            new (&slotAt(slotIndex)) Item{std::move(item)};
        }

        void push(unsigned egress, const Item &item)
        {
            unsigned slotIndex = map_.pushEntry(egress, fill_);
            ++fill_;
            Item *p = &slotAt(slotIndex);
            if (!std::is_trivial<Item>::value) new (p) Item{item};
            else *p = item;
        }

        Item &drop(unsigned egress)
        {
            unsigned slotIndex = map_.popEntry(egress, fill_);
            --fill_;
            return slotAt(slotIndex);
        }

        static long weightAt(unsigned egress) { return 1; }

        long dissipateForwardTo(Leaf *succ)
        {
            CC_BLIST_ASSERT(fill_ > 0);
            CC_BLIST_ASSERT(succ->fill_ < G);

            succ->push(0, std::move(drop(fill_ - 1)));
            return 1;
        }

        long dissipateBackwardTo(Leaf *pred)
        {
            CC_BLIST_ASSERT(fill_ > 0);
            CC_BLIST_ASSERT(pred->fill_ < G);

            pred->push(pred->fill_, std::move(drop(0)));
            return 1;
        }

        long distributeHalfForwardTo(Leaf *succ)
        {
            CC_BLIST_ASSERT(fill_ == G);
            CC_BLIST_ASSERT(succ->fill_ <= G / 2);

            for (unsigned k = 0; k < G / 2; ++k)
            {
                succ->push(k, std::move(drop(G / 2)));
            }

            return G / 2;
        }

        long distributeQuarterForwardTo(Leaf *succ)
        {
            CC_BLIST_ASSERT(fill_ == G);
            CC_BLIST_ASSERT(succ->fill_ <= G - G / 4);

            for (unsigned k = G - 1; k >= G - G / 4; --k)
            {
                succ->push(0, std::move(drop(k)));
            }

            return G / 4;
        }

        long distributeQuarterBackwardTo(Leaf *pred)
        {
            CC_BLIST_ASSERT(fill_ == G);
            CC_BLIST_ASSERT(pred->fill_ == G / 2);

            for (unsigned k = G / 2; k < G / 2 + G / 4; ++k)
            {
                pred->push(k, std::move(drop(0)));
            }

            return G / 4;
        }

        void adoptChildrenOfSucc(const Leaf *succ)
        {
            CC_BLIST_ASSERT(fill_ + succ->fill_ <= G);

            for (unsigned k = 0; k < succ->fill_; ++k)
            {
                push(fill_, std::move(succ->slotAt(succ->map_.mapToSlot(k))));
            }
        }

        template<class Pattern>
        std::strong_ordering operator<=>(const Pattern &pattern) const
        {
            if (at(fill_ - 1) < pattern) return std::strong_ordering::less;
            if (pattern < at(0)) return std::strong_ordering::greater;
            return std::strong_ordering::equal;
        }

        Leaf *succ() const { return static_cast<Leaf *>(Node::succ_); }
        Leaf *pred() const { return static_cast<Leaf *>(Node::pred_); }

    private:
        Item &slotAt(unsigned slotIndex) {
            return reinterpret_cast<Item *>(data_)[slotIndex];
        }

        const Item &slotAt(unsigned slotIndex) const {
            return reinterpret_cast<const Item *>(data_)[slotIndex];
        }

        SlotMap<G> map_;
        alignas(Item) std::byte data_[G * sizeof(Item)];
    };

    Vector() = default;

    Vector(const Vector &other)
    {
        for (auto pos = other.head(); pos; ++pos) {
            emplaceBack(other.at(pos));
        }
    }

    ~Vector()
    {
        deplete();
    }

    Locator head() const
    {
        return Locator{Tree::revision(), 0, Tree::getMinNode(), 0};
    }

    Locator tail() const
    {
        long index = Tree::weight_ - 1;
        Node *node = Tree::root_ ? Tree::root_->lastLeaf_ : nullptr;
        unsigned egress = node ? node->fill_ - 1 : 0;
        return Locator{Tree::revision(), index, node, egress};
    }

    Locator from(long index) const
    {
        unsigned egress = 0;
        Node *node = Tree::stepDownTo(index, &egress);
        if (Tree::weight_ <= index) node = nullptr;
        return Locator{Tree::revision(), index, node, egress};
    }

    template<class Access = Item>
    static Access &value(const Locator &target)
    {
        assert(*target.revisionPtr_ == target.revisionSaved_); // cannot access container with undefined locator
        assert(target); // locator needs to be valid

        return static_cast<Leaf *>(target.stop_)->at(target.egress_);
    }

    Item &at(const Locator &target) const
    {
        assert(target.revisionPtr_ == Tree::revision()); // locator needs to belong to this container
        assert(*target.revisionPtr_ == target.revisionSaved_); // cannot access container with undefined locator
        assert(target); // locator needs to be valid

        return static_cast<Leaf *>(target.stop_)->at(target.egress_);
    }

    Item &operator[](long index) const
    {
        return at(index);
    }

    Item &at(long index) const
    {
        unsigned egress;
        return static_cast<Leaf *>(Tree::stepDownTo(index, &egress))->at(egress);
    }

    Item &first() const
    {
        Node *firstLeaf = Tree::getMinNode();
        return static_cast<Leaf *>(firstLeaf)->at(0);
    }

    Item &last() const
    {
        Leaf *lastLeaf = Tree::root_ ? static_cast<Leaf *>(Tree::root_->lastLeaf_) : nullptr;
        return lastLeaf->at(lastLeaf->fill_ - 1);
    }

    template<class... Args>
    void emplaceAt(Locator &target, Args... args);

    template<class... Args>
    void emplaceAt(long index, Args... args)
    {
        unsigned egress = 0;
        Node *node = Tree::stepDownTo(index, &egress);
        emplace(node, egress, args...);
    }

    template<class... Args>
    void emplaceBack(Args... args)
    {
        Leaf *lastLeaf = Tree::root_ ? static_cast<Leaf *>(Tree::root_->lastLeaf_) : nullptr;
        emplace(lastLeaf, lastLeaf ? lastLeaf->fill_ : 0, args...);
    }

    template<class... Args>
    void emplace(Node *target, unsigned egress, Args... args)
    {
        Leaf *leaf = target ? static_cast<Leaf *>(target) : nullptr;
        emplaceAndTell(leaf, egress, args...);
    }

    template<class... Args>
    void emplaceAndTell(Leaf *&target, unsigned &egress, Args... args);

    template<class... Args>
    void emplaceAndStep(Locator &target, Args... args)
    {
        if (Tree::weight_ == 0) {
            emplaceBack(args...);
            target = last();
        }
        else {
            assert(bool(target)); // cannot insert an item using an invalid locator
            emplaceAt(target.index_, args...);
            target = from(target.index_);
        }
    }

    void pop(long index)
    {
        unsigned egress = 0;
        Leaf *target = static_cast<Leaf *>(Tree::stepDownTo(index, &egress));
        pop(target, egress);
    }

    void pop(Node *target, unsigned egress);

    void popAndStep(Locator &pos)
    {
        assert(bool(pos)); // cannot remove an item using an invalid locator
        pop(static_cast<Node *>(pos.stop_), pos.egress_);
        pos = from(pos.index_);
    }

    void deplete()
    {
        if (Tree::height_ >= 0) {
            Leaf *leaf = static_cast<Leaf *>(Tree::root_->lastLeaf_);
            Branch *parent = leaf->parent_;
            while (leaf) {
                Leaf *pred = leaf->pred();
                delete leaf;
                leaf = pred;
            }
            for (int h = Tree::height_; h > 0; --h) {
                Branch *branch = parent;
                parent = parent->parent_;
                while (branch) {
                    Branch *pred = branch->pred();
                    delete branch;
                    branch = pred;
                }
            }
            #ifndef NDEBUG
            unsigned revisionSaved = Tree::revision_;
            #endif
            *this = Vector{};
            #ifndef NDEBUG
            Tree::revision_ = revisionSaved + 1;
            #endif
        }
    }

    class SearchShim
    {
    public:
        using Item = Leaf;

        explicit SearchShim(const Tree *tree):
            tree_{tree},
            idealLeafCount_{tree->idealLeafCount()}
        {}

        Leaf &at(long index) const
        {
            return *static_cast<Leaf *>(tree_->idealLeafAt(index));
        }

        long count() const { return idealLeafCount_; }

    private:
        const Tree *tree_;
        long idealLeafCount_;
    };

    template<class Order = DefaultOrder, class Search = FindAny, class Pattern = Item>
    bool lookup(const Pattern &pattern, long *finalIndex = nullptr, Leaf **target = nullptr, unsigned *egress = nullptr) const;

    template<class Order = DefaultOrder, class Search = FindAny, class Pattern = Item>
    bool find(const Pattern &pattern, Locator *target = nullptr) const
    {
        long index = 0;
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup<Order, Search>(pattern, target ? &index : nullptr, &leaf, &egress);
        if (found && target) *target = Locator{Tree::revision(), index, leaf, egress};
        return found;
    }

    template<class Order = DefaultOrder>
    bool insertUnique(const T &item, Locator *target = nullptr)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        long index = 0;
        bool found = lookup<Order>(item, target ? &index : nullptr, &leaf, &egress);
        if (!found) emplaceAndTell(leaf, egress, item);
        if (target) *target = Locator{Tree::revision(), index, leaf, egress};
        return !found;
    }

    template<class Order = DefaultOrder>
    void insertLast(const T &item)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup<Order, FindLast>(item, nullptr, &leaf, &egress);
        emplace(leaf, egress + found, item);
    }

    template<class Order = DefaultOrder>
    void establish(const T &item)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup<Order>(item, nullptr, &leaf, &egress);
        if (found) leaf->at(egress) = item;
        else emplace(leaf, egress, item);
    }

    template<class Order = DefaultOrder, class Pattern = Item>
    bool remove(const Pattern &pattern)
    {
        Leaf *leaf = nullptr;
        unsigned egress = 0;
        bool found = lookup<Order>(pattern, nullptr, &leaf, &egress);
        if (found) pop(leaf, egress);
        return found;
    }

    /** \todo optimize reverse() operation (e.g. reverse each node before reversing the nodes)
      */
    void reverse()
    {
        if (Tree::weight_ > 2) {
            auto hi = head();
            auto ti = tail();
            while (hi < ti) {
                std::swap(at(hi), at(ti));
                ++hi;
                --ti;
            }

            #ifndef NDEBUG
            ++Tree::revision_;
            #endif
        }
    }
};

template<class T, unsigned G>
template<class... Args>
void Vector<T, G>::emplaceAt(Locator &target, Args... args)
{
    assert(target);
    assert(target.revisionPtr_ == &Tree::revision_); // locator needs to belong to this container
    assert(target.revisionSaved_ == Tree::revision_); // locator needs to be up-to-date

    unsigned egress = target.egress_;
    Leaf *leaf = static_cast<Leaf *>(target.stop_);
    emplaceAndTell(leaf, egress, args...);
    target.egress_ = egress;
    target.stop_ = leaf;
    #ifndef NDEBUG
    target.revisionSaved_ = Tree::revision_;
    #endif
}

template<class T, unsigned G>
template<class... Args>
void Vector<T, G>::emplaceAndTell(Leaf *&target, unsigned &egress, Args... args)
{
    if (target) {
        Tree::dissipate(target, egress);
        target->emplace(egress, args...);
        Tree::updateWeights(target, 1);
    }
    else {
        target = new Leaf;
        egress = 0;
        target->emplace(egress, args...);
        Tree::weight_ = 1;
        Tree::root_ = target;
        Tree::root_->lastLeaf_ = target;
        ++Tree::height_;
    }
    #ifndef NDEBUG
    ++Tree::revision_;
    #endif
}

template<class T, unsigned G>
void Vector<T, G>::pop(Node *target, unsigned egress)
{
    if (Tree::weight_ > 1) {
        Leaf *leaf = static_cast<Leaf *>(target);
        leaf->drop(egress).~Item();
        Tree::updateWeights(leaf, -1);
        if (leaf->succ_) Tree::dense_ = 0;
        Tree::relieve(leaf);
        Tree::reduce();
    }
    else {
        delete static_cast<Leaf *>(Tree::root_);
        // Tree::root->lastLeaf_ = nullptr; // redundant
        Tree::root_ = nullptr;
        Tree::weight_ = 0;
        --Tree::height_;
        Tree::dense_ = 1;
    }
    #ifndef NDEBUG
    ++Tree::revision_;
    #endif
}

template<class T, unsigned G>
template<class Order, class Search, class Pattern>
bool Vector<T, G>::lookup(const Pattern &pattern, long *finalIndex, Leaf **target, unsigned *egress) const
{
    bool found = false;
    if (Tree::height_ == 0) {
        Leaf *leaf = static_cast<Leaf *>(Tree::root_);
        long i = 0;
        found = Search::template find<Order>(leaf, pattern, &i);
        if (finalIndex) *finalIndex = i;
        if (target) *target = leaf;
        if (egress) *egress = i;
    }
    else if (Tree::height_ > 0) {
        Leaf *leaf = static_cast<Leaf *>(Tree::root_->lastLeaf_);
        if (leaf->at(leaf->fill_ - 1) < pattern) {
            if (finalIndex) *finalIndex = Tree::weight_;
            if (target) *target = leaf;
            if (egress) *egress = leaf->fill_;
        }
        else {
            SearchShim shim{this};
            long j = 0;
            bool lookInside = Search::template find<Order>(&shim, pattern, &j, &leaf);
            long i = 0;
            if (finalIndex) {
                Tree::locateIdealLeaf(j, &i);
            }
            if (lookInside) {
                unsigned k = 0;
                found = Search::template find<Order>(leaf, pattern, &k);
                i += k;
                if (egress) *egress = k;
            }
            if (finalIndex) *finalIndex = i;
            if (target) *target = leaf;
        }
    }
    else if (finalIndex) {
        *finalIndex = 0;
    }
    return found;
}

} // namespace cc::blist
