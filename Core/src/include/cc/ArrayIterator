/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <iterator>

namespace cc {

/** \class ArrayIterator cc/ArrayIterator
  * \brief %Array iterator
  * \tparam Container Container type
  * \tparam Dir Direction (1 for forward iterator, -1 for backward iterator)
  */
template<class Container, long Dir = 1>
class ArrayIterator:
    public std::iterator<
        /*iterator_category*/ std::bidirectional_iterator_tag,
        /*value_type*/        typename Container::Item,
        /*difference_type*/   long,
        /*pointer*/           typename Container::Item *,
        /*reference*/         typename Container::Item &
    >
{
public:
    /** Create an array iterator pointing to the \a i-th item of array \a c
      */
    ArrayIterator(Container &c, long i):
        c_{c},
        i_{i}
    {}

    /** Check if this iterator is valid (explicitly cast to bool)
      */
    explicit operator bool() const { return i_ < c_.count() && 0 <= i_; }

    /** Get access to current item value
      */
    auto &operator*() const { return c_.at(i_); }

    /** Step to the next item and return the old iterator value (postfix increment operator)
      */
    ArrayIterator &operator++() { i_ += Dir; return *this; }

    /** Step to the previous item and return the old iterator value (postfix decrement operator)
      */
    ArrayIterator &operator--() { i_ -= Dir; return *this; }

    /** Get iterator value stepped \a delta items forward (addition operator)
      */
    ArrayIterator operator+(long delta) { return ArrayIterator{c_, i_ + Dir * delta}; }

    /** Get iterator value stepped \a delta items backward (substraction operator)
      */
    ArrayIterator operator-(long delta) { return ArrayIterator{c_, i_ - Dir * delta}; }

    /** Get distance between this and another iterator (substraction operator)
      */
    int operator-(const ArrayIterator &b) const { return i_ - b.i_; }

    int operator<(const ArrayIterator &b) const { return i_ < b.i_; } ///< Less than operator
    bool operator==(const ArrayIterator &b) const { return i_ == b.i_; } ///< Equal to operator
    bool operator!=(const ArrayIterator &b) const { return i_ != b.i_; } ///< Not equal to operator

private:
    Container &c_;
    long i_;
};

} // namespace cc
