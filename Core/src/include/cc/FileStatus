/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/SystemError>
#include <cc/Cow>
#include <cc/files>

namespace cc {

/** \class FileStatus cc/FileStatus
  * \ingroup file_system
  * \brief %File status information
  * \todo inherit from Object
  */
class FileStatus
{
public:
    /** Query the status of the file or directory under \a path
      */
    FileStatus(const String &path = "", bool followSymlink = true);

    /** %File or directory path
      */
    String path() const { return me().path; }

    /** Returns true if file exists otherwise false
      */
    bool isValid() const { return me().isValid; }

    /** \copydoc isValid()
      */
    explicit operator bool() const { return me().isValid; }

    /** Refresh file status
      */
    void update();

    /** %File type
      */
    FileType type() const { return static_cast<FileType>(me().st_mode & S_IFMT); }

    /** %File access mask
      */
    FileMode mode() const { return static_cast<FileMode>(me().st_mode & (~S_IFMT)); }

    /** %File size in number of bytes
      */
    long long size() const { return me().st_size; }

    /** %File size in number of blocks
      */
    long long blockCount() const { return me().st_blocks; }

    /** Block size
      */
    long blockSize() const { return me().st_blksize; }

    /** %File owner user ID
      */
    int ownerId() const { return me().st_uid; }

    /** %File owner group ID
      */
    int groupId() const { return me().st_gid; }

    /** Last time when file was accessed
      */
    double lastAccess() const { return me().st_atim.tv_sec + me().st_atim.tv_nsec / 1e9; }

    /** Last time when file was modified
      */
    double lastModified() const { return me().st_mtim.tv_sec + me().st_mtim.tv_nsec / 1e9; }

    /** Last time when file meta information was modified
      */
    double lastChanged() const { return me().st_ctim.tv_sec + me().st_ctim.tv_nsec / 1e9; }

    /** %Set the file times
      * \param lastAccess Last time when file was accessed
      * \param lastModified Last time when file was modified
      */
    void setTimes(double lastAccess, double lastModified);

    /** Storage device number
      */
    int storageId() const { return me().st_dev; }

    /** I-node number
      */
    long iNodeNumber() const { return me().st_ino; }

    /** Number of hard links
      */
    long linkCount() const { return me().st_nlink; }

    /** Device ID (only for device files)
      */
    int deviceId() const { return me().st_rdev; }

private:
    using StructStat = struct stat;

    struct State: public StructStat
    {
        String path;
        bool followSymlink;
        bool isValid;
    };

    Cow<State> me;
};

} // namespace cc
