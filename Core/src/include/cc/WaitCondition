/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/SystemError>
#include <cc/Mutex>
#include <pthread.h>

namespace cc {

/** \class WaitCondition cc/WaitCondition
  * \brief Conditional thread suspension and resumption
  * \exception SystemError
  */
class WaitCondition
{
public:
    /** Create a new wait condition
      */
    WaitCondition();

    /** \internal
      */
    ~WaitCondition();

    /** Wait for a certain condition
      * \param mutex Mutex protecting the condition state
      */
    void wait(Mutex &mutex);

    /** Wait for a certain condition for a limited time
      * \param time Seconds elapsed since the begin of Epoch
      * \param mutex Mutex protecting the condition state
      * \see System::now()
      */
    bool waitUntil(double time, Mutex &mutex);

    /** Wake up one waiting thread
      */
    void signal();

    /** Wake up all waiting threads
      */
    void broadcast();

private:
    pthread_cond_t cond_;
};

} // namespace cc
