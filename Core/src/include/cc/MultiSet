/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/buckets/BucketVector>
#include <cc/Iterator>
#include <cc/Cow>
#include <cc/InOut>
#include <cc/container>
#include <initializer_list>
#include <utility>
#include <cassert>

namespace cc {

/** \class MultiSet cc/MultiSet
  * \ingroup container
  * \brief Multi-set data container
  * \tparam T Item type
  */
template<class T>
class MultiSet {
public:
    using Item = T; ///< Item type

    /** \name Construction and Assignment
      */
    ///@{

    /** Construct an empty multi-set
      */
    MultiSet() = default;

    /** Construct a copy of \a other
      */
    MultiSet(const MultiSet &other) = default;

    /** Construct with initial \a items
      */
    MultiSet(std::initializer_list<Item> items)
    {
        for (const auto &x: items) insert(x);
    }

    /** Take over the right-side multi-set \a other
      */
    MultiSet(MultiSet &&other):
        me{std::move(other.me)}
    {}

    /** Assign multi-set \a other
      */
    MultiSet &operator=(const MultiSet &other) = default;

    /** Take over the right-side multi-set \a other
      */
    MultiSet &operator=(MultiSet &&other)
    {
        me = std::move(other.me);
        return *this;
    }

    ///@}

    /** \name Item Access
      */
    ///@{

    /** Get a locator pointing to the first item
      */
    Locator head() const { return me().head(); }

    /** Get a locator pointing to the last item
      */
    Locator tail() const { return me().tail(); }

    /** Get a locator pointing to the item at \a index
      */
    Locator from(long index) const { return me().from(index); }

    /** Get the number of items stored in the multi-set
      */
    long count() const { return me().count(); }

    /** \copydoc count()
      */
    long size() const { return me().count(); }

    /** Check if this multi-set is non-empty
      */
    explicit operator bool() const { return count() > 0; }

    /** \copydoc count()
      */
    long operator+() const { return me().count(); }

    /** Get constant reference to the item at position \a pos
      */
    const Item &at(Locator pos) const
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get constant reference to the item at \a index
      */
    const Item &at(long index) const
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** %Modify an item in place
      * \tparam Modify %Function type (lambda or functor)
      * \param pos %Position of item to modify
      * \param modify %Function of type void(Item &)
      */
    template<class Modify>
    void modifyAt(Locator pos, Modify modify)
    {
        assert(pos);
        Item &item = me().at(pos);
        #ifndef NDEBUG
        Item oldItem = item;
        #endif
        modify(item);
        assert(item == oldItem); // changing the value of an item results in undefined behavior
    }

    /** %Modify an item in place
      * \tparam Modify %Function type (lambda or functor)
      * \param index %Index of item to modify
      * \param modify %Function of type void(Item &)
      */
    template<class Modify>
    void modifyAt(long index, Modify modify)
    {
        assert(0 <= index && index < count());
        Item &item = me().at(index);
        #ifndef NDEBUG
        Item oldItem = item;
        #endif
        modify(item);
        assert(item == oldItem || index == count() || &at(index) != &item); // changing the value of an item results in undefined behavior
    }

    /** \copydoc at(long) const
      */
    const Item &operator[](long index) const { return at(index); }

    /** Get constant reference to first item
      */
    const Item &first() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to last item
      */
    const Item &last() const
    {
        assert(count() > 0);
        return me().last();
    }

    /** Tell if \a item is the first item
      */
    bool firstIs(const Item &item) const
    {
        return &item == &first();
    }

    /** Tell if \a item is the last item
      */
    bool lastIs(const Item &item) const
    {
        return &item == &last();
    }

    /** Get constant reference to the first item
      */
    const Item &min() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to the last item
      */
    const Item &max() const
    {
        assert(count() > 0);
        return me().last();
    }

    ///@}

    /** \name Multi-Set Operations
      */
    ///@{

    /** Search for an item in the multi-set
      * \tparam Search %Search strategy (FindFirst, FindLast or FindAny)
      * \param item Item to search for
      * \param pos Returns the position of the item that was found
      * \return True if item is found
      */
    template<class Search = FindFirst>
    bool find(const Item &item, Out<Locator> pos = None{}) const
    {
        return me().template find<Search>(item, pos);
    }

    /** Add \a item to the multi-set
      */
    void insert(const Item &item)
    {
        me().insertLast(item);
    }

    /** Remove all matching items
      * \param item Item value to search for
      * \return Number of items removed
      * \todo optimize performance
      */
    long remove(const Item &item)
    {
        long removalCount = 0;
        Locator pos;
        if (find<FindFirst>(item, &pos)) {
            while (pos && at(pos) == item) {
                removeAt(pos);
                ++removalCount;
            }
        }
        return removalCount;
    }

    ///@}

    /** \name Positional Operations
      */
    ///@{

    /** Remove item at position \a pos (and advance \a pos to the next item)
      */
    void removeAt(Locator &pos)
    {
        me().popAndStep(pos);
    }

    /** Remove item at \a index
      */
    void removeAt(long index)
    {
        assert(0 <= index && index < count());
        me().pop(index);
    }

    ///@}

    /** \name Global Operations
      */
    ///@{

    /** Call function \a f for each item
      * \tparam F Function type (lambda or functor)
      * \param f Unary function which and gets called for each item
      */
    template<class F>
    void forEach(F f) const
    {
        for (auto &x: *this) f(x);
    }

    /** Remove all items
      */
    void deplete()
    {
        me().deplete();
    }

    ///@}

    using const_iterator = Iterator<const buckets::BucketVector<Item>>; ///< \internal Readonly value iterator
    using const_reverse_iterator = ReverseIterator<const buckets::BucketVector<Item>>; ///< \internal Readonly reverse value iterator
    using value_type = Item; ///< \internal Item value type
    using size_type = long; ///< \internal Type of the container capacity

    /** \name Standard Iterators
      */
    ///@{

    const_iterator begin () const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator cbegin() const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator end   () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item
    const_iterator cend  () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item

    const_reverse_iterator rbegin () const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator crbegin() const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator rend   () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item
    const_reverse_iterator crend  () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    ///@}

    /** \name Comparism Operators
      */
    ///@{

    /** Equality operator
      */
    template<class Other>
    bool operator==(const Other &other) const { return container::equal(*this, other); }

    /** Ordering operator
      */
    template<class Other>
    std::strong_ordering operator<=>(const Other &other) const { return container::order(*this, other); }

    ///@}

private:
    Cow<buckets::BucketVector<Item>> me;
};

} // namespace cc
