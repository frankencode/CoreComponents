/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cassert>

namespace cc {

/** \class Range cc/Range
  * \ingroup misc
  * \brief Index range
  */
class Range
{
public:
    /** Create an invalid range
      */
    Range():
        i_{0, -1}
    {}

    /** Create an empty range starting and ending at \a i
      */
    Range(long i):
        i_{i, i}
    {}

    /** Create a range starting at \a i0 and ending at \a i1
      */
    Range(long i0, long i1):
        i_{i0, i1}
    {
        if (0 <= i_[1] && i_[1] < i_[0]) {
            long h = i_[0];
            i_[0] = i_[1];
            i_[1] = h;
        }
    }

    /** Check if valid
      */
    bool isValid() const { return i_[0] <= i_[1]; }

    /** Check if valid
      */
    explicit operator bool() const { return isValid(); }

    long i0() const { return i_[0]; } ///< Begin of range
    long i1() const { return i_[1]; } ///< End of range
    long begin() const { return i_[0]; } ///< Begin of range
    long end() const { return i_[1]; } ///< End of range
    long count() const { return *this ? i_[1] - i_[0] : 0; } ///< Size of the range

    long operator[](int k) const { assert(0 <= k && k <= 1); return i_[k]; } ///< Syntax sugar
    long &operator[](int k) { assert(0 <= k && k <= 1); return i_[k]; } ///< Syntax sugar

    /** Equal to operator
      */
    bool operator==(const Range &b) const
    {
        return i_[0] == b.i_[0] && i_[1] == b.i_[1];
    }

    /** Not equal to operator
      */
    bool operator!=(const Range &b) const
    {
        return i_[0] != b.i_[0] || i_[1] != b.i_[1];
    }

    /** Add \a j to the begin and end of this range and return the result
      */
    Range operator+(long j) const
    {
        return Range{i_[0] + j, i_[1] + j};
    }

    /** Add \a j to the begin and end of this range
      */
    Range &operator+=(long j)
    {
        return *this = (*this) + j;
    }

private:
    long i_[2];
};

} // namespace cc
