/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Signal>

namespace cc {

/** \class SignalSet cc/SignalSet
  * \brief A set of system signals
  */
class SignalSet
{
public:
    /** Get a full signal set
      */
    static SignalSet full()  { SignalSet s; sigfillset(&s.set_); return s; }

    /** Get an empty signal set
      */
    static SignalSet empty() { SignalSet s; sigemptyset(&s.set_); return s; }

    /** Create an undefined signal set
      */
    SignalSet() = default;

    /** Add \a signal
      */
    SignalSet &insert(Signal signal) { sigaddset(&set_, +signal); return *this; }

    /** Remove \a signal
      */
    SignalSet &remove(Signal signal) { sigdelset(&set_, +signal); return *this; }

    /** Check if \a signal is member
      */
    bool contains(Signal signal) const { return sigismember(&set_, +signal); }

    /** Convert to low-level datatype
      */
    operator sigset_t *() { return &set_; }

    /** Convert to low-level datatype
      */
    operator const sigset_t *() const { return &set_; }

private:
    sigset_t set_;
};

} // namespace cc
