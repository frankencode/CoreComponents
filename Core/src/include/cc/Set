/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/List>

namespace cc {

/** \class Set cc/Set
  * \ingroup container
  * \brief %Set data container
  * \tparam T Item type
  * \tparam O Search order
  * \tparam G Tree granularity
  */
template<class T, class O = DefaultOrder, unsigned G = DefaultTreeGranularity>
class Set {
public:
    using Item = T; ///< Item type
    using Order = O; ///< Search order

    static constexpr unsigned Granularity = G; ///< Tree granularity

    /** \name Construction and Assignment
      */
    ///@{

    /** Construct an empty set
      */
    Set() = default;

    /** Construct a copy of \a other
      */
    Set(const Set &other) = default;

    /** Construct with initial \a items
      */
    Set(std::initializer_list<Item> items)
    {
        for (const auto &x: items) insert(x);
    }

    /** Take over the right-side set \a other
      */
    Set(Set &&other):
        me{std::move(other.me)}
    {}

    /** Assign set \a other
      */
    Set &operator=(const Set &other) = default;

    /** Take over the right-side set \a other
      */
    Set &operator=(Set &&other)
    {
        me = std::move(other.me);
        return *this;
    }

    /** Get corresponding list representation
      */
    List<Item, Granularity> toList() const
    {
        List<Item, Granularity> list;
        list.me = me;
        return list;
    }

    ///@}

    /** \name Item Access
      */
    ///@{

    /** Get a locator pointing to the first item
      */
    Locator head() const { return me().head(); }

    /** Get a locator pointing to the last item
      */
    Locator tail() const { return me().tail(); }

    /** Get a locator pointing to the item at \a index
      */
    Locator from(long index) const { return me().from(index); }

    /** Get the number of items stored in the set
      */
    long count() const { return me().count(); }

    /** \copydoc count()
      */
    long size() const { return me().count(); }

    /** Check if this set is non-empty
      */
    explicit operator bool() const { return count() > 0; }

    /** \copydoc count()
      */
    long operator+() const { return me().count(); }

    /** Check if \a index is valid
      */
    bool has(long index) const { return index < me().count() && 0 <= index; }

    /** Get constant reference to the item at position \a pos
      */
    const Item &at(Locator pos) const
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get constant references to the item at \a index
      */
    const Item &at(long index) const
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** Get to the item at position \a pos
      */
    Item &at(Locator pos)
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get references to the item at \a index
      */
    Item &at(long index)
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** \copydoc at(long) const
      */
    const Item &operator[](long index) const { return at(index); }

    /** Get constant reference to first item
      */
    const Item &first() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to last item
      */
    const Item &last() const
    {
        assert(count() > 0);
        return me().last();
    }

    /** Tell if \a item is the first item
      */
    bool firstIs(const Item &item) const
    {
        return &item == &first();
    }

    /** Tell if \a item is the last item
      */
    bool lastIs(const Item &item) const
    {
        return &item == &last();
    }

    /** Get constant reference to the first item
      */
    const Item &min() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to the last item
      */
    const Item &max() const
    {
        assert(count() > 0);
        return me().last();
    }

    ///@}

    /** \name Set Operations
      */
    ///@{

    /** Search for a matching key in the set
      * \tparam Key Search pattern type
      * \param key Key to search for
      * \param pos Returns the position of the item that was found
      * \return True if \a a matching item was found
      */
    template<class Key = Item>
    bool find(const Key &key, Out<Locator> pos = None{}) const
    {
        return me().template find<Order>(key, &pos);
    }

    /** Search for \a key and return \a item
      * \tparam Key Search pattern type
      * \return True if key was found
      */
    template<class Key = Item>
    bool lookup(const Key &key, Out<Item> item) const
    {
        Locator pos;
        bool found = find(key, &pos);
        if (found) item = at(pos);
        return found;
    }

    /** Convenience function to check if the set contains \a key
      * \param key %Key to search for
      * \return True if key was found
      */
    template<class Key = Item>
    bool contains(const Key &key) const
    {
        return find(key);
    }

    /** Insert a new item to the set
      * \param item Item to add
      * \param pos %Returns a locator pointing to the existing or newly inserted item
      * \return True if \a item was not yet a member of the set
      */
    bool insert(const Item &item, Out<Locator> pos = None{})
    {
        return me().template insertUnique<Order>(item, &pos);
    }

    /** Insert an item to the set replacing any pre-existing same value item
      * \param item Item to add
      */
    void establish(const Item &item)
    {
        return me().establish(item);
    }

    /** Remove an item from the set
      * \tparam Key Search pattern type
      * \param key Key to search for
      * \return true If \a item was found and removed
      */
    template<class Key = Item>
    bool remove(const Key &key)
    {
        return me().remove(key);
    }

    /** Insert \a item to the set
      */
    Set &operator<<(const Item& item)
    {
        insert(item);
        return *this;
    }

    /** Get and remove the smallest item
      */
    Set &operator>>(Item& item)
    {
        if (count() > 0) {
            Locator pos = head();
            item = at(pos);
            removeAt(pos);
        }
        return *this;
    }

    ///@}

    /** \name Positional Operations
      */
    ///@{

    /** Remove item at position \a pos (and advance \a pos to the next item)
      */
    void removeAt(Locator &pos)
    {
        me().popAndStep(pos);
    }

    /** Remove item at \a index
      */
    void removeAt(long index)
    {
        assert(0 <= index && index < count());
        me().pop(index);
    }

    ///@}

    /** \name Global Operations
      */
    ///@{

    /** Call function \a f for each item
      * \tparam F Function type (lambda or functor)
      * \param f Unary function which gets called for each item
      */
    template<class F>
    void forEach(F f) const
    {
        for (auto &x: *this) f(x);
    }

    /** Remove all items
      */
    void deplete()
    {
        me().deplete();
    }

    ///@}

    /** \internal
      * \name Standard Iterators
      */
    ///@{

    using value_type = Item; ///< \internal Item value type
    using size_type = long; ///< \internal Type of the container capacity

    using const_iterator = Iterator<const BucketVector<Item>>; ///< \internal Readonly value iterator

    const_iterator begin () const { return head(); } ///< \internal %Return readonly iterator pointing to the first item (if any)
    const_iterator cbegin() const { return head(); } ///< \internal %Return readonly iterator pointing to the first item (if any)
    const_iterator end   () const { return Locator{count()}; } ///< \internal %Return readonly iterator pointing behind the last item
    const_iterator cend  () const { return Locator{count()}; } ///< \internal %Return readonly iterator pointing behind the last item

    using const_reverse_iterator = ReverseIterator<const BucketVector<Item>>; ///< \internal Readonly reverse value iterator

    const_reverse_iterator rbegin () const { return tail(); } ///< \internal %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator crbegin() const { return tail(); } ///< \internal %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator rend   () const { return Locator{-1}; } ///< \internal %Return reverse iterator pointing before the first item
    const_reverse_iterator crend  () const { return Locator{-1}; } ///< \internal %Return reverse iterator pointing before the first item

    ///@}

    /** \name Comparism Operators
      */
    ///@{

    /** Equality operator
      */
    template<class Other>
    bool operator==(const Other &other) const { return container::equal(*this, other); }

    ///@}

private:
    Cow<BucketVector<Item, Granularity>> me;
};

} // namespace cc
