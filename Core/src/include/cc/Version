/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/String>
#include <cc/Composite>
#include <cc/VariantType>

namespace cc {

/** \class Version cc/Version
  * \ingroup misc
  * \brief Software version tuple
  */
class Version
{
public:
    /** Create an invalid version
      */
    Version()
    {}

    /** Create new version
      * \param major \copydoc major()
      * \param minor \copydoc minor()
      * \param patch \copydoc patch()
      */
    Version(int major, int minor, int patch = 0):
        me{
            static_cast<std::uint8_t>(major),
            static_cast<std::uint8_t>(minor),
            static_cast<std::uint16_t>(patch)
        }
    {}

    /** Parse version \a s
      */
    Version(const char* s):
        Version{String{s}}
    {}

    /** Parse version \a s
      */
    Version(const String &s);

    /** Read version encoded as 32-bit word \a x
      */
    explicit Version(std::uint32_t x):
        me{
            static_cast<std::uint8_t>(x >> 24),
            static_cast<std::uint8_t>((x >> 16) & 0xFFu),
            static_cast<std::uint16_t>(x & 0xFFFFu)
        }
    {}

    /** Convert to word value
      */
    std::uint32_t toWord() const { return (uint32_t(major()) << 24) | (uint32_t(minor()) << 16) | uint32_t(patch()); }

    /** \copydoc toWord()
      */
    operator std::uint32_t() const { return toWord(); }

    /** Check if this version is valid
      */
    bool isValid() const { return major() > 0 || minor() > 0; }

    /** \copydoc isValid()
      */
    explicit operator bool() const { return isValid(); }

    /** Major version number (0..255)
      */
    int major() const { return me().major; }

    /** Minor version number (0..255)
      */
    int minor() const { return me().minor; }

    /** Patch version number (0..65535)
      */
    int patch() const { return me().patch; }

    /** Convert to string
      */
    String toString() const;

    /** Equal to operator
      */
    bool operator==(const Version &other) const { return toWord() == other.toWord(); }


    /** Ordering operator
      */
    std::strong_ordering operator<=>(const Version &other) const { return toWord() <=> other.toWord(); }

private:
    struct State {
        std::uint8_t major { 0 };
        std::uint8_t minor { 0 };
        std::uint16_t patch { 0 };
    };

    Composite<State> me;
};

inline String str(const Version &version) { return version.toString(); }

template<>
struct VariantType<Version>
{
    static const TypeInfo &info();

    static void store(void *bytes, const Version &x)
    {
        static_assert(sizeof(Version) <= 8);

        new(bytes)Version{x};
    }

    static Version retrieve(const void *bytes, const TypeInfo &typeInfo = info())
    {
        assert(&typeInfo == &VariantType<Version>::info()); // expected type 'Version'

        return *static_cast<const Version *>(bytes);
    }
};

} // namespace cc
