/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Stream>

namespace cc {

/** \class LineBuffer cc/LineBuffer
  * \ingroup streams
  * \brief Line output buffer
  */
class LineBuffer: public Stream
{
public:
    /** Create a new line output buffer
      * \param sink Stream to write lines to
      * \param prefix Prefix to prepend to each line
      */
    LineBuffer(const Stream &sink = Stream{}, const String &prefix = "");

    /** Flush partially transmitted line
      */
    long flush();

protected:
    struct State: public Stream::State
    {
        State(const Stream &sink, const String &prefix);

        long read(Out<Bytes> buffer, long maxFill) override;
        void write(const Bytes &buffer, long fill = -1) override;
        virtual String prefix() const;
        long flush();
        virtual void writeLine(const Bytes &line);

        Stream sink_;
        String prefix_;
        List<Bytes> backlog_;
    };

    explicit LineBuffer(State *newState);

    const State &me() const { return Object::me.as<State>(); }
    State &me() { return Object::me.as<State>(); }
};

} // namespace cc
