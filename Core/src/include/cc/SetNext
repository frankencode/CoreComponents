/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/buckets/BucketPrefixTree>

namespace cc {

template<class T, unsigned G = 16>
class SetNext
{
public:
    using Item = T;

    void insert(const Item &item)
    {
        tree_.insert(item);
    }

    bool contains(const Item &item)
    {
        return tree_.lookup(item);
    }

    long count() const
    {
        return tree_.weight_;
    }

    template<class F>
    void forEach(F f) const
    {
        tree_.forEach(f);
    }

    const auto &tree() const { return tree_; }

private:
    BucketPrefixTree<T, G> tree_;
};

} // namespace cc
