/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Queue>
#include <cc/SourceIterator>
#include <cc/WaitCondition>

namespace cc {

/** \class Channel cc/Channel
  * \ingroup concurrency
  * \brief %Thread communication channel
  * \tparam T Item type
  */
template<class T>
class Channel
{
public:
    /** Item type
      */
    using Item = T;

    /** Create a new channel
      */
    Channel() = default;

    /** Add a new item to the end
      * \param item Item value
      * \return True if successful
      */
    bool pushBack(const T &item)
    {
        return emplaceBack(item);
    }

    /** Add a new item to the front
      * \param item Item value
      * \return True if successful
      */
    bool pushFront(const T &item)
    {
        return emplaceFront(item);
    }

    /** Add a new item after removing all existing items
      * \param item Item value
      * \return True if successful
      */
    bool pushExclusive(const T &item)
    {
        return emplaceExclusive(item);
    }

    /** Add a new item to the end
      * \tparam Args %Construction argument types
      * \param args %Construction arguments
      * \return True if successful
      */
    template<class... Args>
    bool emplaceBack(Args... args)
    {
        Guard<Mutex> guard{me().mutex_};
        if (!me().close_) {
            me().queue_.emplaceBack(args...);
            me().notEmpty_.signal();
            return true;
        }
        return false;
    }

    /** Add a new item to the front
      * \tparam Args %Construction argument types
      * \param args %Construction arguments
      * \return True if successful
      */
    template<class... Args>
    bool emplaceFront(Args... args)
    {
        Guard<Mutex> guard{me().mutex_};
        if (!me().close_) {
            me().queue_.emplaceFront(args...);
            me().notEmpty_.signal();
            return true;
        }
        return false;
    }

    /** Add a new item after replacing all existing items
      * \tparam Args %Construction argument types
      * \param args %Construction arguments
      * \return True if successful
      */
    template<class... Args>
    bool emplaceExclusive(Args... args)
    {
        Guard<Mutex> guard{me().mutex_};
        if (!me().close_) {
            me().queue_.deplete();
            me().queue_.emplaceFront(args...);
            me().notEmpty_.signal();
            return true;
        }
        return false;
    }

    /** Remove an item from the end
      * \param item Returns the item value
      * \return True if successful
      */
    bool popBack(Out<T> item = None{})
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            me().notEmpty_.wait(me().mutex_);
        }
        if (me().queue_.count() > 0) {
            me().queue_.popBack(&item);
            return true;
        }
        return false;
    }

    /** Remove an item from the front
      * \param item Returns the item value
      * \return True if successful
      */
    bool popFront(Out<T> item = None{})
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            me().notEmpty_.wait(me().mutex_);
        }
        if (me().queue_.count() > 0) {
            me().queue_.popFront(&item);
            return true;
        }
        return false;
    }

    /** \copydoc popFront()
      */
    bool read(Out<T> item)
    {
        return popFront(&item);
    }

    /** \copydoc pushBack()
      */
    bool write(const T &item)
    {
        return pushBack(item);
    }

    /** \copydoc pushBack()
      */
    Channel &operator<<(const Item& item)
    {
        pushBack(item);
        return *this;
    }

    /** \copydoc popFront()
      */
    Channel &operator>>(Item& item)
    {
        popFront(&item);
        return *this;
    }

    /** Wait for the channel to become ready to read
      * \return True if successful
      */
    bool wait()
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            me().notEmpty_.wait(me().mutex_);
        }
        return me().queue_.count() > 0 || me().close_;
    }

    /** Wait for the channel to become ready to read for a limited time
      * \param time Seconds elapsed since the begin of Epoch
      * \return True if successful
      * \see System::now()
      */
    bool waitUntil(double time)
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            if (!me().notEmpty_.waitUntil(time, me().mutex_))
                break;
        }
        return me().queue_.count() > 0 || me().close_;
    }

    /** Remove an item from the end of the queue before given time
      * \param time Seconds elapsed since the begin of Epoch
      * \param item Returns the item value
      * \return True if successful
      * \see System::now()
      */
    bool popBackBefore(double time, Out<T> item = None{})
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            if (!me().notEmpty_.waitUntil(time, me().mutex_))
                break;
        }
        if (me().queue_.count() > 0) {
            me().queue_.popBack(&item);
            return true;
        }
        return false;
    }

    /** Remove an item from the head of the queue before given time
      * \param time Seconds elapsed since the begin of Epoch
      * \param item Returns the item value
      * \return True if successful
      * \see System::now()
      */
    bool popFrontBefore(double time, Out<T> item = None{})
    {
        Guard<Mutex> guard{me().mutex_};
        while (me().queue_.count() == 0 && !me().close_) {
            if (!me().notEmpty_.waitUntil(time, me().mutex_))
                break;
        }
        if (me().queue_.count() > 0) {
            me().queue_.popFront(&item);
            return true;
        }
        return false;
    }

    /** Get the number of queued items
      */
    long count() const
    {
        Guard<Mutex> guard{me().mutex_};
        return me().queue_.count();
    }

    /** Close for writing
      */
    void close()
    {
        Guard<Mutex> guard{me().mutex_};
        me().close_ = true;
        me().notEmpty_.broadcast();
    }

    /** Shutdown communication: close for reading and writing and discard all intermediate data
      */
    void shutdown()
    {
        Guard<Mutex> guard{me().mutex_};
        me().queue_.deplete();
        me().close_ = true;
        me().notEmpty_.broadcast();
    }

    /** Iteration start
      */
    SourceIterator<Channel> begin() { return SourceIterator<Channel>{this}; }

    /** Iteration end
      */
    SourceIterator<Channel> end() { return SourceIterator<Channel>{}; }

private:
    struct State {
        mutable Mutex mutex_;
        WaitCondition notEmpty_;
        Queue<T> queue_;
        bool close_ { false };
    };
    Shared<State> me;
};

} // namespace cc
