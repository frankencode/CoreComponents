/*
 * Copyright (C) 2007-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/bst/AvlTree>
#include <cc/IndexTracking>
#include <cc/InOut>
#include <thread>
#include <cassert>

namespace cc::bst {

class OrdinalNode
{
public:
    OrdinalNode():
        balance_{0},
        weight_{1}
    {}

    void takeOver(const OrdinalNode *other)
    {
        *this = *other;
    }

    OrdinalNode *left_;
    OrdinalNode *right_;
    OrdinalNode *parent_;
    long balance_ : sizeof(long);
    long weight_ : (8 * sizeof(long)) - sizeof(long);
};

#ifndef NDEBUG
class OrdinalTreeTester;
#endif

/** \internal
  * \brief Ordinal tree
  * An Ordinal tree is a balanced binary tree that stores in each node the
  * weight of the sub-tree of which the node is the root node.
  * Ordinal AVL trees allow to access each node by index in at least 1.44*ld(N)
  * steps. Stored items can also query their position by walking from their
  * storage node to the root.
  */
class OrdinalTree: public AvlTree<OrdinalNode>
{
public:
    long count() const { return weight(); }

    long getIndexOf(OrdinalNode *k) const;

#ifndef NDEBUG
    bool testWeights() const { return testWeight(this->root_); }
#endif

protected:
    long weight() const { return weight(root_); }
    static long weight(OrdinalNode *k) { return (k) ? k->weight_ : 0; }

    OrdinalNode *getNodeAt(long i) const;
    void attachAt(long i, OrdinalNode *kn);
    OrdinalNode *unlinkAt(long i);

    OrdinalTree(): cachedNode_{nullptr} {}
    void populate(OrdinalNode **v, long n);

    template<class UserNode>
    void deplete() {
        depleteTree<UserNode>(static_cast<UserNode *>(root_));
        root_ = nullptr;
        cachedNode_ = nullptr;
    }

    void changed(OrdinalNode *kp, OrdinalNode *kc, bool left, bool attached) override;
    void rotated(OrdinalNode *k1, bool /*left*/) override;

private:
    friend class AvlBalance;

    void attachBefore(OrdinalNode *kb, OrdinalNode *kn);

    static void establishWeight(OrdinalNode *k) { k->weight_ = weight(k->left_) + weight(k->right_) + 1; }

#ifndef NDEBUG
    static bool testWeight(OrdinalNode *k);
#endif

    std::thread::id owner_ { std::this_thread::get_id() };
    mutable OrdinalNode *cachedNode_;
    mutable long cachedIndex_;
};

} // namespace cc::bst
