/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/List>
#include <cc/KeyValue>

namespace cc {

/** \class Map cc/Map
  * \ingroup container
  * \brief %Map data container
  * \tparam K Key type
  * \tparam T Value type
  * \tparam O Search order
  * \tparam G Tree granularity
  */
template<class K, class T = K, class O = DefaultOrder, unsigned G = DefaultTreeGranularity>
class Map {
public:
    using Key = K; ///< Key type
    using Value = T; ///< Value type
    using Item = KeyValue<K, T>; ///< Item type
    using Order = O; ///< Search order

    static constexpr unsigned Granularity = G; ///< Tree granularity

    /** \name Construction and Assignment
      */
    ///@{

    /** Construct an empty map
      */
    Map() = default;

    /** Construct a copy of \a other
      */
    Map(const Map &other) = default;

    /** Construct with initial \a items
      */
    Map(std::initializer_list<Item> items)
    {
        for (const auto &x: items) insert(x.key(), x.value());
    }

    /** Take over the right-side map \a other
      */
    Map(Map &&other):
        me{std::move(other.me)}
    {}

    /** Assign map \a other
      */
    Map &operator=(const Map &other) = default;

    /** Take over the right-side map \a other
      */
    Map &operator=(Map &&other)
    {
        me = std::move(other.me);
        return *this;
    }

    /** Get corresponding list representation
      */
    List<Item, Granularity> toList() const
    {
        List<Item, Granularity> list;
        list.me = me;
        return list;
    }

    ///@}

    /** \name Item Access
      */
    ///@{

    /** Get a locator pointing to the first item
      */
    Locator head() const { return me().head(); }

    /** Get a locator pointing to the last item
      */
    Locator tail() const { return me().tail(); }

    /** Get a locator pointing to the item at \a index
      */
    Locator from(long index) const { return me().from(index); }

    /** Get the number of items stored in the map
      */
    long count() const { return me().count(); }

    /** \copydoc count()
      */
    long size() const { return me().count(); }

    /** Check if \a i is a valid index
      */
    bool has(long i) const { return i < me().count() && 0 <= i; }

    /** Check if this map is non-empty
      */
    explicit operator bool() const { return count() > 0; }

    /** \copydoc count()
      */
    long operator+() const { return me().count(); }

    /** Get constant reference to the item at position \a pos
      */
    const Item &at(Locator pos) const
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get constant reference to the item at \a index
      */
    const Item &at(long index) const
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** Get reference to the item at position \a pos
      */
    Item &at(Locator pos)
    {
        assert(pos);
        return me().at(pos);
    }

    /** Get reference to the item at \a index
      */
    Item &at(long index)
    {
        assert(0 <= index && index < count());
        return me().at(index);
    }

    /** \copydoc at(long) const
      */
    const Item &operator[](long index) const { return at(index); }

    /** Get constant reference to first item
      */
    const Item &first() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to last item
      */
    const Item &last() const
    {
        assert(count() > 0);
        return me().last();
    }

    /** Tell if \a item is the first item
      * \todo needs unit test
      */
    bool firstIs(const Item &item) const
    {
        return &item == &first();
    }

    /** Tell if \a item is the last item
      */
    bool lastIs(const Item &item) const
    {
        return &item == &last();
    }

    /** Get constant reference to the first item
      */
    const Item &min() const
    {
        assert(count() > 0);
        return me().first();
    }

    /** Get constant reference to the last item
      */
    const Item &max() const
    {
        assert(count() > 0);
        return me().last();
    }

    ///@}

    /** \name Map Operations
      */
    ///@{

    /** Search for a key in the map
      * \tparam Pattern %Pattern type (must be comparable with Key)
      * \param pattern %Pattern to search for
      * \param pos Returns the position of the item that was found
      * \return True if \a pattern was found
      * \note The returned Locator \a pos will always point to the first element greater or equal \a pattern.
      */
    template<class Pattern>
    bool find(const Pattern &pattern, Out<Locator> pos = None{}) const
    {
        return me().template find<Order>(pattern, &pos);
    }

    /** Search for \a pattern and return \a value
      * \tparam Pattern %Pattern type (must be comparable with Key)
      * \return True if pattern was found
      */
    template<class Pattern>
    bool lookup(const Pattern &pattern, Out<Value> value) const
    {
        Locator pos;
        bool found = me().template find<Order>(pattern, &pos);
        if (found) value = at(pos).value();
        return found;
    }

    /** Convenience function to check if the map contains \a pattern
      * \tparam Pattern %Pattern type (must be comparable with Key)
      * \param pattern %Pattern to search for
      * \return True if \a pattern was found
      */
    template<class Pattern>
    bool contains(const Pattern &pattern) const
    {
        return find(pattern);
    }

    /** Insert a new key-value pair if the map doesn't contain the key already
      * \param key Search key
      * \param value New value
      * \param pos %Returns a locator pointing to the existing or newly inserted key-value pair
      * \return True if the new key-value pair was inserted successfully
      */
    bool insert(const Key &key, const Value &value, Out<Locator> pos = None{})
    {
        return me().template insertUnique<Order>(Item{key, value}, &pos); // FIXME: performance, needless copy
    }

    /** Insert a new or overwrite an existing key-value mapping
      * \param key Search key
      * \param value New value
      */
    void establish(const Key &key, const Value &value)
    {
        return me().template establish<Order>(Item{key, value});
    }

    /** Remove the given \a key from the map
      * \return True if a matching key-value pair was found and removed
      */
    bool remove(const Key &key)
    {
        return me().template remove<Order>(key);
    }

    /** %Map \a key to value (or return \a fallback value)
      */
    Value value(const Key &key, const Value &fallback) const
    {
        Locator pos;
        return find(key, &pos) ? at(pos).value() : fallback;
    }

    /** %Map \a key to value
      */
    Value value(const Key &key) const
    {
        Locator pos;
        return find(key, &pos) ? at(pos).value() : Value{};
    }

    /** \copydoc value(const Key &, const Value &) const
      */
    Value operator()(const Key &key, const Value &fallback) const
    {
        return value(key, fallback);
    }

    /** \copydoc value(const Key &) const
      */
    Value operator()(const Key &key) const
    {
        return value(key);
    }

    /** %Make sure key exists and return a reference to its value
      */
    Value &operator()(const Key &key)
    {
        Locator pos;
        insert(key, Value{}, &pos);
        return at(pos).value();
    }

    ///@}

    /** \name Positional Operations
      */
    ///@{

    /** Remove item at position \a pos (\a pos is automatically advanced to the next item)
      */
    void removeAt(Locator &pos)
    {
        me().popAndStep(pos);
    }

    /** Remove item at \a index
      */
    void removeAt(long index)
    {
        assert(0 <= index && index < count());
        me().pop(index);
    }

    ///@}

    /** \name Global Operations
      */
    ///@{

    /** Call function \a f for each item
      * \tparam F Function type (lambda or functor)
      * \param f Unary function which gets called for each item
      */
    template<class F>
    void forEach(F f) const
    {
        for (auto &x: *this) f(x);
    }

    /** Remove all items
      */
    void deplete()
    {
        me().deplete();
    }

    ///@}

    using iterator = Iterator<BucketVector<Item>>; ///< \internal Value iterator
    using const_iterator = Iterator<const BucketVector<Item>>; ///< \internal Readonly value iterator
    using reverse_iterator = ReverseIterator<BucketVector<Item>>; ///< \internal Reverse value iterator
    using const_reverse_iterator = ReverseIterator<const BucketVector<Item>>; ///< \internal Readonly reverse value iterator
    using value_type = Item; ///< \internal Item value type
    using size_type = long; ///< \internal Type of the container capacity

    /** \name Standard Iterators
      */
    ///@{

    iterator begin() { me(); return head(); } ///< %Return iterator pointing to the first item (if any)
    iterator end  () { me(); return Locator{count()}; } ///< %Return iterator pointing behind the last item

    const_iterator begin () const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator cbegin() const { return head(); } ///< %Return readonly iterator pointing to the first item (if any)
    const_iterator end   () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item
    const_iterator cend  () const { return Locator{count()}; } ///< %Return readonly iterator pointing behind the last item

    reverse_iterator rbegin() { me(); return tail(); } ///< %Return reverse iterator pointing to the last item (if any)
    reverse_iterator rend  () { me(); return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    const_reverse_iterator rbegin () const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator crbegin() const { return tail(); } ///< %Return readonly reverse iterator pointing to the last item (if any)
    const_reverse_iterator rend   () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item
    const_reverse_iterator crend  () const { return Locator{-1}; } ///< %Return reverse iterator pointing before the first item

    ///@}

    /** \name Comparism Operators
      */
    ///@{

    /** Equality operator
      */
    template<class Other>
    bool operator==(const Other &other) const { return container::equal(*this, other); }

    ///@}

    const auto &tree() const { return me(); }

private:
    Cow<BucketVector<Item, Granularity>> me;
};

} // namespace cc
