/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>

namespace cc {

/** \class HashSink cc/HashSink
  * \ingroup streams
  * \brief Generic hashsum computing sink
  */
class HashSink: public Stream
{
public:
    /** Create a null hash sink
      */
    HashSink() = default;

    /** Finish hash computation and return the final hash sum
      */
    Bytes finish() { return me().finish(); }

protected:
    /** \brief Internal state
      */
    struct State: public Stream::State
    {
        virtual Bytes finish() = 0;
    };

    /** Initialize with \a newState
      */
    explicit HashSink(State *newState):
        Stream{newState}
    {}

    State &me() { return Object::me.as<State>(); }
};

} // namespace cc
