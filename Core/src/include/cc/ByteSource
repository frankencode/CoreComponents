/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Composite>
#include <cc/Stream>
#include <cc/Array>
#include <cc/exceptions>
#include <cc/bits>

namespace cc {

/** \class ByteSource cc/ByteSource
  * \ingroup streams
  * \brief Byte decoding sink
  * \exception InputExhaustion
  * \todo inherit from NonCopyable
  */
class ByteSource
{
public:
    /** Open a new ByteSource
      * \param source Data source to write bytes from
      * \param buffer Input buffer to use
      * \param endian Endianess for reading multi-byte words
      */
    ByteSource(const Stream &source, const Bytes &buffer, ByteOrder endian = ByteOrder::LittleEndian):
        me{source, buffer, endian, source ? 0 : buffer.count()}
    {}

    /** Open a new ByteSource
      * \param source Data source to write bytes from
      * \param endian Endianess for reading multi-byte words
      */
    ByteSource(const Stream &source, ByteOrder endian = ByteOrder::LittleEndian):
        ByteSource{source, Bytes::allocate(0x1000), endian}
    {}

    /** Open a new ByteSource
      * \param buffer Input buffer to read bytes from
      * \param endian Endianess for reading multi-byte words
      */
    ByteSource(const Bytes &buffer, ByteOrder endian = ByteOrder::LittleEndian):
        ByteSource{Stream{}, buffer, endian}
    {}

    /** Read byte into \a x and return true if successful
      */
    bool readByte(Out<uint8_t> x);

    /** Read character into \a x and return true if successful
      */
    bool readChar(Out<char> ch);

    /** Read a fixed number of bytes (N)
      * \param span target buffer (N = span->count())
      */
    void read(Out<Bytes> span);

    /** Read \a n bytes
      */
    Bytes readSpan(int n);

    /** Read a zero-terminated C-string
      */
    String readCString();

    /** Fill input buffer and return true if more bytes can be read
      */
    bool prefetch() { return me().prefetch(); }

    /** Read a byte
      */
    uint8_t readUInt8() { return me().read(); }

    /** Read a 2-byte word
      */
    uint16_t readUInt16();

    /** Read a 4-byte word
      */
    uint32_t readUInt32();

    /** Read an 8-byte word
      */
    uint64_t readUInt64();

    /** Read a signed byte
      */
    int8_t readInt8() { return static_cast<int8_t>(readUInt8()); }

    /** Read a signed 2-byte word
      */
    int16_t readInt16() { return static_cast<int16_t>(readUInt16()); }

    /** Read a signed 4-byte word
      */
    int32_t readInt32() { return static_cast<int32_t>(readUInt32()); }

    /** Read a signed 8-byte word
      */
    int64_t readInt64() { return static_cast<int64_t>(readUInt64()); }

    /** Data source to read bytes from
      */
    Stream source() const { return me().source; }

    /** The input buffer
      */
    const Bytes &buffer() const { return me().buffer; }

    /** Byte-order for decoding multi-byte words
      */
    ByteOrder endian() const { return me().endian; }

    /** %Set byte-order
      */
    void setEndian(ByteOrder endian) { me().endian = endian; }

    /** Total number of bytes read
      */
    long long currentOffset() const { return me().i0 + me().i; }

private:
    struct State
    {
        Stream source;
        Bytes buffer;
        ByteOrder endian;
        long n;
        int i { 0 };
        long long i0 { 0 };

        inline bool prefetch()
        {
            if (i == n && source) {
                n = source.read(&buffer);
                i0 += i;
                i = 0;
            }
            return i < n;
        }

        inline uint8_t read()
        {
            if (i == n) {
                if (!source) throw InputExhaustion{};

                n = source.read(&buffer);
                i = 0;

                if (n == 0) throw InputExhaustion{};
            }

            return buffer.item<uint8_t>(i++);
        }
    };

    Composite<State> me;
};

inline bool ByteSource::readByte(Out<uint8_t> x)
{
    bool more = me().prefetch();
    if (more) x = me().read();
    return more;
}

inline bool ByteSource::readChar(Out<char> ch)
{
    uint8_t x = 0;
    bool ok = readByte(&x);
    ch = static_cast<char>(x);
    return ok;
}

inline void ByteSource::read(Out<Bytes> span)
{
    for (int i = 0, n = span().count(); i < n; ++i)
        span().item<uint8_t>(i) = readUInt8();
}

inline Bytes ByteSource::readSpan(int n)
{
    Bytes bytes = Bytes::allocate(n);
    read(&bytes);
    return bytes;
}

inline uint16_t ByteSource::readUInt16()
{
    uint16_t h;
    if (me().endian == ByteOrder::LittleEndian) {
        h  = uint16_t(readUInt8());
        h |= uint16_t(readUInt8()) << 8;
    }
    else {
        h  = uint16_t(readUInt8()) << 8;
        h |= uint16_t(readUInt8());
    }
    return h;
}

inline uint32_t ByteSource::readUInt32()
{
    uint32_t h;
    if (me().endian == ByteOrder::LittleEndian) {
        h  = uint32_t(readUInt8());
        h |= uint32_t(readUInt8()) << 8;
        h |= uint32_t(readUInt8()) << 16;
        h |= uint32_t(readUInt8()) << 24;
    }
    else {
        h  = uint32_t(readUInt8()) << 24;
        h |= uint32_t(readUInt8()) << 16;
        h |= uint32_t(readUInt8()) << 8;
        h |= uint32_t(readUInt8());
    }
    return h;
}

inline uint64_t ByteSource::readUInt64()
{
    uint64_t h = 0;
    if (me().endian == ByteOrder::LittleEndian)
    {
        for (int i = 0; i <= 7*8; i += 8)
            h |= uint64_t(readUInt8()) << i;
    }
    else {
        for (int i = 7*8; i >= 0; i -= 8)
            h |= uint64_t(readUInt8()) << i;
    }
    return h;
}

} // namespace cc
