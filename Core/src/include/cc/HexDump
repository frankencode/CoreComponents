/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Stream>

namespace cc {

/** \class HexDump cc/HexDump
  * \brief Generate a readable hexadecimal dump
  *
  * Example usage:
  * ~~~~~~~~~~~~~
  * File{"test.dat"}.transferTo(HexDump{});
  * ~~~~~~~~~~~~~
  *
  * \see StreamTap
  */
class HexDump final: public Stream
{
public:
    /** Read \a text as a hexdump
      * \return Parsed bytes
      * \todo Move to Bytes::readHex()
      * \see hex(const Bytes &)
      */
    static Bytes read(const String &text);

    /** Create a new hexdump sink
      * \param sink %Where the hexdump is written to (defaults to IoStream::output())
      */
    explicit HexDump(const Stream &sink = Stream{});

    /** Set line indentation to \a prefix
      */
    HexDump &indent(const String &prefix);

    /** Enable/disable ASCII annotations
      */
    HexDump &ascii(bool on);

private:
    struct State;

    State &me();
};

/** Generate a readable hexadecimal dump of \a data
  * \todo rename to hexDump
  */
String hexdump(const Bytes &data);

} // namespace cc
