/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/SourceIterator>
#include <cc/SystemError>
#include <cc/Stream>
#include <cc/Object>
#include <cc/files>

namespace cc {

/** \class Dir cc/Dir
  * \ingroup file_system
  * \brief %File system directories
  */
class Dir final: public Object
{
public:
    using Item = String; ///< Item type

    /** Check if directory under \a path is accessible with \a mode
      */
    static bool access(const String &path, FileAccess mode);

    /** Check if directory exists under \a path
      */
    static bool exists(const String &path);

    /** Create a new directory under \a path with initial permissions \a mode
      */
    static void create(const String &path, FileMode mode = FileMode::DirDefault);

    /** Establish a new directory path
      * \param path Directory path to establish
      * \param mode Initial permissions
      */
    static void establish(const String &path, FileMode mode = FileMode::DirDefault);

    /** Create a uniquely named directory
      * \param path Directory path pattern
      * \param mode Initial permissions
      * \param placeHolder Place holder character in \a path to be replaced with random characters
      * \return Path to the newly created directory
      */
    static String createUnique(const String &path, FileMode mode = FileMode::DirDefault, char placeHolder = '#');

    /** Create a temporary directory
      * \param mode Initial permissions
      * \return Path to the newly created directory
      */
    static String createTemp(FileMode mode = FileMode::DirDefault);

    /** Remove directory under \a path
      */
    static void remove(const String &path);

    /** Recursively remove all files and directories within \a path
      */
    static void deplete(const String &path);

    /** Create a null directory
      */
    Dir() = default;

    /** Open directory at \a path
      */
    Dir(const String &path);

    /** Directory path used to open this directory
      */
    String path() const;

    /** Read the next directory entry
      * \param name Returns the name of next entry
      * \return False if no more entries, else true
      */
    bool read(Out<String> name);

    /** Open file
      * \param path Relative file path
      * \param flags File open flags
      * \return New content stream
      */
    Stream openFile(const String &path, FileOpen flags = FileOpen::ReadOnly);

    /** Iteration start
      */
    SourceIterator<Dir> begin() { return SourceIterator<Dir>{this}; }

    /** Iteration end
      */
    SourceIterator<Dir> end() { return SourceIterator<Dir>{}; }

private:
    struct State;

    State &me();
    const State &me() const;
};

} // namespace cc
