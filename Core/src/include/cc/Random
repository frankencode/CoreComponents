/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <utility> // std::swap()
#include <cassert>

namespace cc {

/** \class Random cc/Random
  * \ingroup misc
  * \brief Pseudo-random number generator
  *
  * The Random class provides a simple and fast pseudo-random number generator.
  * The generated numbers lay in the range min() to max(). The series will repeat
  * after period() numbers. Any choosen seed value will yield the same period.
  */
class Random
{
public:
    /** Create a new random number generator
      * \param seed Seed number
      */
    Random(int seed = -1);

    /** Minimum random number
      */
    int min() const { return 0; }

    /** Maximum random number
      */
    int max() const { return m_ - 1; }

    /** Number of random numbers until the series repeats itself
      */
    int period() const { return m_ - 1; }

    /** Generate another random number in the range [min(), max()]
      */
    int get() {
        x_ = (16807 * x_) % m_; /* 7^5 == 16807 */
        return x_;
    }

    /** Get another random number in the range [\a a, \a b]
      */
    int get(int a, int b)
    {
        assert(b <= m_ - 1);
        assert(a <= b);
        return (static_cast<long>(get()) * (b - a)) / (m_ - 1) + a;
    }

    /** Scramble items in \a container
      */
    template<class Container>
    void scramble(Container &container)
    {
        using std::swap;

        for (long i = 0, n = container.count(); i < n; ++i) {
            long j = get(0, n - 1);
            swap(container[i], container[j]);
        }
    }

private:
    enum { m_ = (1u << 31u) - 1 };
    unsigned x_;
};

} // namespace cc
