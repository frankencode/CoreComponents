/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

namespace cc::container {

/** \internal
  * Comparism result
  */
enum class Compares: int
{
    Below = -1, ///< the first operand is below the second operand
    Equal = 0, ///< the operands are equal
    Above = 1 ///< the first operand is above the second operand
};

/** \internal
  * Compare two container
  * \tparam A type of first container
  * \tparam B type of second container
  * \param a first container
  * \param b second container
  * \return result of the comparism
  */
template<class A, class B>
Compares compare(const A &a, const B &b)
{
    using X = typename A::Item;
    using Y = typename B::Item;

    auto i = a.begin();
    auto j = b.begin();

    while (i || j) {
        X x = i ? *i : X{};
        Y y = j ? *j : Y{};
        if (x < y) return Compares::Below;
        if (y < x) return Compares::Above;
        ++i;
        ++j;
    }

    return Compares::Equal;
}

template<class A, class B>
bool equal(const A &a, const B &b)
{
    return a.count() == b.count() && compare(a, b) == Compares::Equal;
}

template<class A, class B>
bool differ(const A &a, const B &b)
{
    return a.count() != b.count() || compare(a, b) != Compares::Equal;
}

template<class A, class B>
bool below(const A &a, const B &b)
{
    return compare(a, b) == Compares::Below;
}

template<class A, class B>
bool above(const A &a, const B &b)
{
    return compare(a, b) == Compares::Above;
}

template<class A, class B>
bool belowOrEqual(const A &a, const B &b)
{
    Compares result = compare(a, b);
    return result == Compares::Below || result == Compares::Equal;
}

template<class A, class B>
bool aboveOrEqual(const A &a, const B &b)
{
    Compares result = compare(a, b);
    return result == Compares::Above || result == Compares::Equal;
}

} // namespace cc::container
