/*
 * Copyright (C) 2020 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <type_traits>

namespace cc::container {

/** \internal
  * Convenience function to compare two containers for equality.
  */
template<class A, class B>
inline bool equal(const A &a, const B &b)
{
    if (&a == &b) return true;
    if (a.count() != b.count()) return false;

    auto i = a.begin();
    auto j = b.begin();

    while (i) {
        if (*i != *j) return false;
        ++i;
        ++j;
    }

    return true;
}

/** \internal
  * Convenience function to compare to establish the ordering of two containers
  */
template<class A, class B>
inline std::strong_ordering order(const A &a, const B &b)
{
    using X = typename A::Item;
    using Y = typename B::Item;

    auto i = a.begin();
    auto j = b.begin();

    while (i || j) {
        X x = i ? *i : X{};
        Y y = j ? *j : Y{};
        auto o = x <=> y;
        if (o == std::strong_ordering::less) return std::strong_ordering::less;
        if (o == std::strong_ordering::greater) return std::strong_ordering::greater;
        ++i;
        ++j;
    }

    return std::strong_ordering::equal;
}

} // namespace cc::container
