/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/CryptoHashSink>

namespace cc {
namespace crypto {

/** \class Md5Sink Md5Sink cc/crypto/Md5Sink
  * \brief Message Digest 5: a one-way hash function
  */
class Md5Sink: public CryptoHashSink
{
public:
    static constexpr int Size = 16; ///< size of the hash sum in bytes

    class Instance: public CryptoHashSink::Instance
    {
    public:
        CryptoHashSink copy() const override;

        int blockSize() const override;

        void write(const CharArray *data) override;
        String finish() override;

    private:
        friend class Md5Sink;

        Instance();
        Instance(const Instance *other);

        void consume();

        String aux_;
        int auxFill_;
        uint64_t bytesFeed_;
        uint32_t a_, b_, c_, d_;
    };

    /** Open a new MD5 sum computing hash sink
      */
    Md5Sink():
        CryptoHashSink{new Instance}
    {}

    Instance *operator->() const { return my<Instance>(); }

private:
    friend class Instance;

    Md5Sink(Instance *instance):
        CryptoHashSink{instance}
    {}
};

String md5(const CharArray *data);

}} // namespace cc::crypto
