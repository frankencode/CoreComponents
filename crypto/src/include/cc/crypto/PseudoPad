/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>
#include <cc/crypto/BlockCipher>

namespace cc {
namespace crypto {

/** \class PseudoPad cc/crypto/PseudoPad
  * \brief pseudo random byte source
  *
  * The PseudoPad runs a given block cipher in counter mode to generate a random byte sequence.
  */
class PseudoPad: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        int read(CharArray *data) override;

    private:
        friend class PseudoPad;

        static void increment(CharArray *bigWord);

        Instance(BlockCipher *ciper);

        Ref<BlockCipher> cipher_;
        String p_;
        String c_;
        int i_;
    };

    /** Open a new pseudo random number byte source
      */
    PseudoPad(BlockCipher *cipher):
        Stream{new Instance{cipher}}
    {}

    Instance *operator->() const { return my<Instance>(); }

    operator Instance *() { return my<Instance>(); }
};

}} // namespace cc::crypto
