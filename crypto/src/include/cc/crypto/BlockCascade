/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/BlockCipher>

namespace cc {
namespace crypto {

/** \class BlockCascade cc/crypto/BlockCascade
  * \brief CBC frontend
  *
  * The BlockCascade allows to run any block cipher in CBC mode.
  */
class BlockCascade: public BlockCipher
{
public:
    /** Create a new CBC mode block cipher
      * \param cipher the underlying block cipher
      * \param iv initialization vector
      * \return new object instance
      */
    static Ref<BlockCascade> create(BlockCipher *cipher, const CharArray *iv = 0);

    void encode(const CharArray *c, CharArray *p) override;
    void decode(const CharArray *p, CharArray *c) override;

private:
    BlockCascade(BlockCipher *cipher, const CharArray *iv);

    Ref<BlockCipher> cipher_;
    String s_;
};

}} // namespace cc::crypto
