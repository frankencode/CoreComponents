/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/BlockCipher>

namespace cc {
namespace crypto {

/** \class BlockCascade cc/crypto/BlockCascade
  * \brief CBC frontend
  *
  * The BlockCascade allows to run any block cipher in CBC mode.
  */
class BlockCascade
{
public:
    class Instance: public BlockCipher
    {
    public:
        void encode(const CharArray *c, CharArray *p) override;
        void decode(const CharArray *p, CharArray *c) override;

    private:
        friend class BlockCascade;

        Instance(BlockCipher *cipher, const CharArray *iv);

        Ref<BlockCipher> cipher_;
        String s_;
    };

    /** Create a new CBC mode block cipher
      * \param cipher the underlying block cipher
      * \param iv initialization vector
      */
    BlockCascade(BlockCipher *cipher, const CharArray *iv = nullptr):
        instance_{new Instance{cipher, iv}}
    {}

    Instance *operator->() { return instance_; }
    operator Instance *() { return instance_; }

private:
    Ref<Instance> instance_;
};

}} // namespace cc::crypto
