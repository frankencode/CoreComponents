/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/BlockCipher>
#include <cc/Stream>

namespace cc {
namespace crypto {

/** \class CipherSink cc/crypto/CipherSink
  * \brief Enciphering output stream
  */
class CipherSink: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        void write(const CharArray *data) override;

    private:
        friend class CipherSink;

        Instance(BlockCipher *cipher, const Stream &sink, const Stream &pad);
        ~Instance();

        Ref<BlockCipher> cipher_;
        Stream sink_;
        Stream pad_;
        String block_;
        String pending_;
    };

    /** Open a new enciphering output stream
      * \param cipher block cipher to use for enciphering the plaintext
      * \param sink output sink to write the ciphertext to
      * \param pad input stream to read the padding from (optional)
      */
    CipherSink(BlockCipher *cipher, const Stream &sink, const Stream &pad = Stream{}):
        Stream{new Instance{cipher, sink, pad}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::crypto
