/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/BlockCipher>

namespace cc {
namespace crypto {

/** \class AesCipher cc/crypto/AesCipher
  * \brief Rijndael Block Cipher according to the AES (FIPS-197)
  */
class AesCipher
{
public:
    /// block size of the cipher in bytes
    static constexpr int BlockSize = 16;

    class Instance: public BlockCipher
    {
    public:
        void encode(const CharArray *p, CharArray *c) override;
        void decode(const CharArray *c, CharArray *p) override;

    private:
        friend class AesCipher;

        Instance(const CharArray *key);

        const int Nk_, Nr_;
        String s_;
        String w_;
    };

    /** Create a new AES block cipher
      * \param key 128 or 256 bit key (16 or 32 bytes)
      */
    AesCipher(const CharArray *key):
        instance_{new Instance{key}}
    {}

    Instance *operator->() { return instance_; }

    operator Instance *() { return instance_; }

private:
    Ref<Instance> instance_;
};

}} // namespace cc::crypto
