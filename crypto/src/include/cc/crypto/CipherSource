/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/BlockCipher>
#include <cc/Stream>

namespace cc {
namespace crypto {

/** \class CipherSource cc/crypto/CipherSource
  * \brief Deciphering input stream
  */
class CipherSource: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        int read(CharArray *data) override;

    private:
        friend class CipherSource;

        Instance(BlockCipher *cipher, const Stream &source);

        Ref<BlockCipher> cipher_;
        Stream source_;
        String block_;
        String buffer_; // decoding buffer
        String pending_; // undecoded pending bytes
        int j_, m_; // consumption index and fill mark
    };

    /** Open a new deciphering input stream
      * \param cipher cipher to use for deciphering the ciphertext
      * \param source source to read the ciphertext from
      */
    CipherSource(BlockCipher *cipher, const Stream &source):
        Stream{new Instance{cipher, source}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::crypto
