/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>
#include <cc/HashSink>

namespace cc {
namespace crypto {

/** \class HashMeter cc/crypto/HashMeter
  * \brief Hash sum computing stream meter
  * \see cc::stream::TransferMeter
  */
class HashMeter: public Stream
{
public:
    class Instance: public Stream::Instance
    {
    public:
        int read(CharArray *data) override;
        void write(const CharArray *data) override;
        void write(const StringList &parts) override;

        /// Finsh hash sum computation and return the resulting hash sum
        String finish();

    private:
        friend class HashMeter;

        Instance(const HashSink &hashSink, const Stream &stream);

        HashSink hashSink_;
        Stream stream_;
    };

    /** Open a new hash sum computing output stream
      * \param hashSink hashing sink to use (e.g. Sha1Sink)
      * \param stream input or output stream to meter
      */
    HashMeter(const HashSink &hashSink, const Stream &stream = Stream{}):
        Stream{new Instance{hashSink, stream}}
    {}

    Instance *operator->() const { return my<Instance>(); }
};

}} // namespace cc::crypto
