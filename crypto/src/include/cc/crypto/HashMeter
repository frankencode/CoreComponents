/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Stream>
#include <cc/HashSink>

namespace cc {
namespace crypto {

/** \class HashMeter cc/crypto/HashMeter
  * \brief Hash sum computing stream meter
  * \see cc::stream::TransferMeter
  */
class HashMeter: public Stream
{
public:
    /** Open a new hash sum computing output stream
      * \param hashSink hashing sink to use (e.g. Sha1Sink)
      * \param stream input or output stream to meter
      * \return new object instance
      */
    static Ref<HashMeter> open(HashSink *hashSink, Stream *stream = 0);

    int read(CharArray *data) override;
    void write(const CharArray *data) override;
    void write(const StringList *parts) override;

    /// Finsh hash sum computation and return the resulting hash sum
    String finish();

private:
    HashMeter(HashSink *hashSink, Stream *stream);

    Ref<HashSink> hashSink_;
    Ref<Stream> stream_;
};

}} // namespace cc::crypto
