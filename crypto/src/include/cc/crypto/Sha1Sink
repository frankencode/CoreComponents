/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/CryptoHashSink>

namespace cc {
namespace crypto {

/** \class Sha1Sink Sha1Sink cc/crypto/Sha1Sink
  * \brief Secure Hash 1: a one-way hash function
  */
class Sha1Sink: public CryptoHashSink
{
public:
    static constexpr int Size = 20;

    class Instance: public CryptoHashSink::Instance
    {
    public:
        CryptoHashSink copy() const override;

        int blockSize() const override;

        void write(const CharArray *data) override;
        String finish() override;

    private:
        friend class Sha1Sink;

        Instance();
        Instance(const Instance *other);

        void consume();

        String h_;
        String m_;
        String w_;
        int j_;
        uint64_t l_;
    };

    /** Open a new SHA-1 computing hash sink
      */
    Sha1Sink():
        CryptoHashSink{new Instance}
    {}

    Instance *operator->() const { return my<Instance>(); }

private:
    friend class Instance;

    Sha1Sink(Instance *instance):
        CryptoHashSink{instance}
    {}
};

String sha1(const CharArray *data);

}} // namespace cc::crypto
