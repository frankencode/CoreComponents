/*
 * Copyright (C) 2019 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/crypto/CryptoHashSink>

namespace cc {
namespace crypto {

/** \class HashMacSink cc/crypto/HashMacSink
  * \brief HMAC Message authentication sink according to RFC 2104
  */
class HashMacSink: public CryptoHashSink
{
public:
    class Instance: public CryptoHashSink::Instance
    {
    public:
        CryptoHashSink copy() const override;

        int blockSize() const override;

        void write(const CharArray *data) override;
        String finish() override;

    private:
        friend class HashMacSink;

        static CryptoHashSink prepareHashSink(const CryptoHashSink &hashSink, const CharArray *key, uint8_t blind);

        Instance(const CryptoHashSink &hashSink, const CharArray *key);
        Instance(const Instance *other);

        CryptoHashSink outerHashSink_;
        CryptoHashSink innerHashSink_;
    };

    HashMacSink(const CryptoHashSink &hashSink, const CharArray *key):
        CryptoHashSink{new Instance{hashSink, key}}
    {}

    Instance *operator->() const { return my<Instance>(); }

private:
    HashMacSink(Instance *instance):
        CryptoHashSink{instance}
    {}
};

}} // namespace cc::crypto
