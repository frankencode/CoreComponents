/*
 * Copyright (C) 2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/SyntaxDefinition>
#include <cc/Map>

namespace cc::toki {

class HighlightingSyntax: public SyntaxDefinition
{
public:
    HighlightingSyntax() = default;

    const Map<String, SyntaxRule> &ruleByName() const
    {
        return me().ruleByName_;
    }

    void clearMetaData();

protected:
    struct State: public SyntaxDefinition::State
    {
        State(const SyntaxRule *entry):
            SyntaxDefinition::State{entry}
        {}

        void define(const String &name, SyntaxRule &rule)
        {
            rule.setName(name);
            return ruleByName_.establish(name, rule);
        }

        Map<String, SyntaxRule> ruleByName_;
    };

    explicit HighlightingSyntax(State *newState):
        SyntaxDefinition{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::toki
