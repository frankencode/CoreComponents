/*
 * Copyright (C) 2007-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/MetaObject>
#include <cc/Color>

namespace cc::toki {

/** \internal
  * \brief Syntax highlighting style
  */
class Style final: public MetaObject
{
public:
    /** Create a primordial style
      */
    Style() = default;

    String ruleName() const { return me().ruleName_; }
    Color ink() const { return me().ink_; }
    Color paper() const { return me().paper_; }
    bool bold() const { return me().bold_; }
    bool italic() const { return me().italic_; }

private:
    friend class Object;
    friend class Palette;
    friend class StylePrototype;

    struct State final: public MetaObject::State
    {
        void realize() override;

        String ruleName_;
        Color ink_;
        Color paper_;
        bool bold_ { false };
        bool italic_ { false };
    };

    explicit Style(New):
        MetaObject{new State}
    {}

    State &me() {
        if (!Object::me) *this = Style{New{}};
        return Object::me.as<State>();
    }

    const State &me() const {
        return Object::me.as<State>();
    }

    State *operator->() {
        return &me();
    }
};

} // namespace cc::toki
