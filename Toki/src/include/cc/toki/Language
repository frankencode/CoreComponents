/*
 * Copyright (C) 2007-2022 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/toki/HighlightingSyntax>
#include <cc/toki/Palette>
#include <cc/Pattern>

namespace cc::toki {

/** \brief Source code language definition
  * \todo allow additional path patterns
  */
class Language: public Object
{
public:
    /** Create a null language
      */
    Language() = default;

    /** Create a new language
      */
    Language(
            const String &displayName,
            const String &name,
            const Pattern &pathPattern,
            const HighlightingSyntax &highlightingSyntax,
            const SyntaxDefinition &discoverySyntax = SyntaxDefinition{}
    ):
        Language{
            new State{
                displayName,
                name,
                pathPattern,
                highlightingSyntax,
                discoverySyntax
            }
        }
    {}

    /** Human readable name of the language
      */
    String displayName() const { return me().displayName_; }

    /** Language name
      */
    String name() const { return me().name_; }

    /** Pattern used to identify a source file path
      */
    Pattern pathPattern() const { return me().pathPattern_; }

    /** Syntax used to highlight a source file
      */
    const HighlightingSyntax &highlightingSyntax() const { return me().highlightingSyntax_; }

    /** Syntax used to identify a source text
      */
    const SyntaxDefinition &discoverySyntax() const { return me().discoverySyntax_; }

protected:
    friend class Palette;

    struct State: public Object::State
    {
        State(
            const String &displayName,
            const String &name,
            const Pattern &pathPattern,
            const HighlightingSyntax &highlightingSyntax,
            const SyntaxDefinition &discoverySyntax
        ):
            displayName_{displayName},
            name_{name},
            pathPattern_{pathPattern},
            highlightingSyntax_{highlightingSyntax},
            discoverySyntax_{discoverySyntax}
        {}

        String displayName_;
        String name_;
        Pattern pathPattern_;
        HighlightingSyntax highlightingSyntax_;
        SyntaxDefinition discoverySyntax_;
    };

    explicit Language(State *newState);

    const State &me() const { return Object::me.as<State>(); }
};

} // namespace cc::toki
