/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/TlsServerOptions>
#include <cc/TlsError>
#include <cc/MetaObject>
#include <gnutls/gnutls.h>

namespace cc {

struct TlsServerOptions::State: public Object::State
{
    State(const MetaObject &config)
    {
        sessionResumptionKeyRefresh_ = config("session-resumption-key-refresh").to<double>();

        String certPath = config("certificate").to<String>();
        String keyPath = config("private-key").to<String>();
        String ciphers = config("ciphers").to<String>();

        if (ciphers == "") ciphers = "PERFORMANCE:%SERVER_PRECEDENCE";
        else hasCiphers_ = true;

        int ret = gnutls_priority_init(&prio_, ciphers, NULL);
        if (ret != GNUTLS_E_SUCCESS) throw TlsError{ret};

        if (certPath == "" || keyPath == "") return;
        hasCredentials_ = true;

        // FIXME: error handling if certificate or private-key is empty
        // FIXME: allow session-resumption-key-refresh only at http level
        // TODO: allow MetaObject to hold a locator map for its members (MetaContext!-)

        ret = gnutls_certificate_allocate_credentials(&cred_);
        if (ret != GNUTLS_E_SUCCESS) throw TlsError{ret};

        ret = gnutls_certificate_set_x509_key_file(cred_, certPath, keyPath, GNUTLS_X509_FMT_PEM);
        if (ret != GNUTLS_E_SUCCESS) throw TlsError{ret};

        // FIXME
        // logCertificateInfo();
    }

    ~State()
    {
        if (cred_) gnutls_certificate_free_credentials(cred_);
        if (prio_) gnutls_priority_deinit(prio_);
    }

    void establish(gnutls_session_t session, const SocketAddress &peerAddress) const
    {
        if (hasCredentials_) {
            int ret = gnutls_credentials_set(session, GNUTLS_CRD_CERTIFICATE, cred_);
            if (ret != GNUTLS_E_SUCCESS) throw TlsError{ret, peerAddress};
        }
        if (hasCiphers_) {
            int ret = gnutls_priority_set(session, prio_);
            if (ret != GNUTLS_E_SUCCESS) throw TlsError{ret, peerAddress};
        }
    }

    bool hasCredentials_ { false };
    bool hasCiphers_ { false };
    gnutls_certificate_credentials_t cred_ { nullptr };
    gnutls_priority_t prio_ { nullptr };
    double sessionResumptionKeyRefresh_ { 0 };
};

} // namespace cc
