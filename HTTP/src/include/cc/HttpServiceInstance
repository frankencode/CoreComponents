/*
 * Copyright (C) 2021 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/HttpServiceDelegate>
#include <cc/HttpMediaTypeDatabase>
#include <cc/HttpLoggingServiceInstance>
#include <cc/TlsServerOptions>
#include <cc/Pattern>

namespace cc {

class HttpServiceWorkerState;

/** \class HttpServiceInstance cc/HttpServiceInstance
  * \ingroup http_server
  * \brief Configured instance of a delivery service
  */
class HttpServiceInstance: public Object
{
public:
    /** Create a null delivery instance
      */
    HttpServiceInstance() = default;

    String serviceName() const { return me().serviceName_; }

    long requestLimit() const { return me().requestLimit_; }

    long requestPayloadLimit() const { return me().requestPayloadLimit_; }

    Pattern host() const { return me().host_; }

    Pattern uri() const { return me().uri_; }

    TlsServerOptions tlsOptions() const { return me().tlsOptions_; }

    HttpMediaTypeDatabase mediaTypes() const { return me().mediaTypes_; }

    const HttpLoggingServiceInstance &errorLoggingInstance() const { return me().errorLoggingInstance_; }
    const HttpLoggingServiceInstance &accessLoggingInstance() const { return me().accessLoggingInstance_; }

    HttpServiceDelegate createDelegate() const { return me().createDelegate(); }

protected:
    friend class Object;
    friend class HttpServerConfig;

    /** \brief %Internal state
      */
    struct State: public Object::State
    {
        /** Initialize this instance with given \a config
          */
        explicit State(const MetaObject &config);

        /** Create a HTTP service delegate
          */
        virtual HttpServiceDelegate createDelegate() const = 0;

        const HttpLoggingServiceInstance &errorLoggingInstance() const { return errorLoggingInstance_; }
        const HttpLoggingServiceInstance &accessLoggingInstance() const { return accessLoggingInstance_; }

    private:
        friend class HttpServiceInstance;
        friend class HttpServerConfig;

        String serviceName_;
        long requestLimit_ { 0 };
        long requestPayloadLimit_ { 0 };
        Pattern host_;
        Pattern uri_;
        TlsServerOptions tlsOptions_;
        HttpMediaTypeDatabase mediaTypes_;
        HttpLoggingServiceInstance errorLoggingInstance_;
        HttpLoggingServiceInstance accessLoggingInstance_;
    };

    explicit HttpServiceInstance(State *newState):
        Object{newState}
    {}

    State &me() { return Object::me.as<State>(); }
    const State &me() const { return Object::me.as<State>(); }

private:
    State *operator->() { return &me(); }
};

} // namespace cc
