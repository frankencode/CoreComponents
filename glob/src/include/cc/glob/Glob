/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/glob/Pattern>
#include <cc/Dir>

namespace cc { class Dir; }

namespace cc {
namespace glob {

/** \class Glob cc/glob/Glob
  * \brief Collect file names matching a globbing pattern
  * \see DirWalker
  */
class Glob
{
public:
    class Instance: public Source<String>
    {
    public:
        /** Get the next matched path
          * \param path returns the next path
          * \return true if another matching path could be read
          */
        bool read(String *path);

    private:
        friend class Glob;

        Instance(const String &expression);
        Instance(const String &path, const StringList &remainder);
        void init(const String &path);

        Dir dir_;
        Pattern pattern_;
        StringList remainder_;
        Ref<Instance> child_;
    };

    using Iterator = Instance::Iterator;

    /** Create a new globbing source
      * \param expression globbing expression to use for path matching
      */
    Glob(const String &expression);

    Instance *operator->() { return instance_; }

    operator Instance*() { return instance_; }

private:
    Ref<Instance> instance_;
};

inline Glob::Iterator begin(Glob &glob) { return glob->begin(); }
inline Glob::Iterator end  (Glob &glob) { return glob->end(); }

}} // namespace cc::glob
