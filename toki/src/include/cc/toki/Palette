/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/syntax/SyntaxDefinition>
#include <cc/meta/MetaObject>
#include <cc/toki/Style>

namespace cc {
namespace toki {

using namespace yason;

class Palette: public MetaObject
{
public:
    static Ref<Palette> create() { return new Palette; }
    static Ref<Palette> load(const String &path);

    String scopeName() const { return scopeName_; }
    int scope() const { return scope_; }

    static int defaultScope();

    enum DefaultRule {
        Text,
        CurrentLine,
        Cursor,
        Selection,
        Match,
        LineNumber,
        CurrentLineNumber,
        Undefined = -1
    };

    bool lookupStyleByRule(int rule, Style **style) const { return styleByRule_->lookup(rule, style); }
    Style *styleByRule(int rule) { return styleByRule_->value(rule); }

    int styleCount() const { return styleByRule_->count(); }
    const Style *styleAt(int i) const { return styleByRule_->valueAt(i); }

private:
    Palette();

    static int defaultRuleByName(const String &name);

    Ref<MetaObject> produce() const override;
    void realize(const CharArray *text, Token *objectToken) override;

    String scopeName_;
    int scope_;

    typedef Map<int, Ref<Style> > StyleByRule;
    Ref<StyleByRule> styleByRule_;
};

}} // namespace cc::toki
