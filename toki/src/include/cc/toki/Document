/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/string>
#include <cc/toki/Style>

namespace cc {
namespace toki {

class Span
{
public:
    class Instance {
    public:
        int i0() const { return i0_; }
        int i1() const { return i1_; }
        Style *style() const { return style_; }

    private:
        friend class Span;

        Instance(int i0, int i1, Style *style):
            i0_{i0}, i1_{i1}, style_{style}
        {}

        int i0_;
        int i1_;
        Ref<Style> style_;
    };

    Span():
        instance_{0, -1, nullptr}
    {}

    Span(int i0, int i1, Style *style = 0):
        instance_{i0, i1, style}
    {}

private:
    Instance instance_;
};

class Document: public Object
{
public:
    static Ref<Document> load(const string &path);

    static Ref<Document> create(const string &text, const string &path = "") {
        return new Document{text, path};
    }

    string text() const { return text_; }
    string path() const { return path_; }
    void save();

protected:
    Document(const string &text, const string &path);

    string path_;
    string text_;
    typedef List<Span> Spans;
    Ref<Spans> spans_;
};

}} // namespace cc::toki
