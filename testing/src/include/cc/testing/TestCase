/*
 * Copyright (C) 2007-2017 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the zlib license
 * (see cc/LICENSE-zlib).
 *
 */

#pragma once

#include <cc/Object>
#include <cc/string>

namespace cc {
namespace testing {

class TestSuite;

class TestCase: public Object
{
public:
    string name() const { return name_; }
    bool skip() const { return skip_; }
    int assertionCount() const { return assertionCount_; }
    int failureCount() const { return failureCount_; }
    bool caughtException() const { return caughtException_; }
    bool passed() const { return failureCount_ == 0 && !caughtException_; }

protected:
    friend class TestSuite;

    template<class T>
    static Ref<TestCase> create(const string &name, bool skip)
    {
        Ref<T> t = new T;
        t->name_ = name;
        t->skip_ = skip;
        return t;
    }

    TestCase():
        skip_{false},
        assertionCount_{0},
        failureCount_{0},
        caughtException_{false}
    {}

    virtual void run() = 0;

private:
    string name_;
    bool skip_;
    int assertionCount_;
    int failureCount_;
    bool caughtException_;
};

}} // namespace cc::testing
