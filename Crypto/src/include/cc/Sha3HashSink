/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/CryptoHashSink>
#include <cc/Keccak>

namespace cc {

/** \class Sha3HashSink cc/Sha3HashSink
  * \ingroup crypto
  * \brief Secure Hash 3 (SHA-3) one-way hash function
  */
template<int HashBitSize = 512>
class Sha3HashSink: public CryptoHashSink
{
    static_assert(
        HashBitSize == 512 ||
        HashBitSize == 384 ||
        HashBitSize == 256 ||
        HashBitSize == 224
    );

public:
    static constexpr int HashSize = HashBitSize / 8; ///< %Size of the hashsum in bytes

    Sha3HashSink():
        CryptoHashSink{new State}
    {}

private:
    struct State final: public CryptoHashSink::State
    {
        int blockSize() const override { return keccak_.FeedRate; }

        void write(const List<Bytes> &buffers) override
        {
            CryptoHashSink::State::write(buffers);
        }

        void write(const struct iovec *iov, int iovcnt) override
        {
            CryptoHashSink::State::write(iov, iovcnt);
        }

        void write(const Bytes &data, long fill = -1) override
        {
            if (fill < 0) fill = data.count();
            for (long i = 0; i < fill; ++i) {
                buffer_[j_++] = data[i];
                if (j_ == buffer_.count()) consume();
            }
        }

        void consume()
        {
            //for (long offset = 0; offset < buffer_.count(); offset += keccak_.FeedRate) {
            //    keccak_.absorb({buffer_, offset});
            //}
            keccak_.absorb({buffer_});
            j_ = 0;
        }

        Bytes finish() override
        {
            if (0 < j_) {
                buffer_.truncate(j_);
                consume();
            }

            Bytes hash = Bytes::allocate(HashSize);
            keccak_.squeeze({&hash});
            return hash;
        }

        Keccak<HashBitSize * 2, Sha3Padding> keccak_;
        Bytes buffer_ { Bytes::allocate(keccak_.FeedRate) };
        long j_ { 0 };
    };
};

} // namespace cc
