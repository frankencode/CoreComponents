/*
 * Copyright (C) 2023 Frank Mertens.
 *
 * Distribution and use is allowed under the terms of the GNU General Public License version 3
 * (see CoreComponents/LICENSE-gpl-3.0).
 *
 */

#pragma once

#include <cc/Bytes>
#include <cstring>
#include <bit>

namespace cc {

/** Default padding policy for Keccak
  */
struct KeccakPadding {
    static constexpr uint8_t Suffix = 0;
    static constexpr int Length = 0;
};

/** Padding policy for NIST SHA3
  */
struct Sha3Padding {
    static constexpr uint8_t Suffix = 0b10;
    static constexpr int Length = 2;
};

/** Padding policy for NIST SHAKE128 and SHAKE256
  */
struct ShakePadding {
    static constexpr uint8_t Suffix = 0b1111;
    static constexpr int Length = 4;
};

/** Default policy for reading input bytes
  */
template<int Capacity, class Padding>
class KeccakSource
{
public:
    static constexpr int FeedRate = (1600 - Capacity) / 8; ///< Rate of the sponge function (in bytes)

    static_assert(Padding::Length <= 6);

    KeccakSource(const Bytes &data, long offset = 0):
        data_{data},
        offset_{offset}
    {
        assert(0 <= offset);
    }

    uint8_t readByte()
    {
        uint8_t ch = 0;
        if (offset_ < data_.count()) {
            ch = data_[offset_];
        }
        else {
            if (offset_ == data_.count()) {
                ch = Padding::Suffix;
                ch |= 1 << Padding::Length;
            }
            if (offset_ % FeedRate == FeedRate - 1) ch |= 1 << 7;
        }
        ++offset_;
        return ch;
    }

    bool eoi() const
    {
        return offset_ > data_.count();
    }

private:
    const Bytes &data_;
    long offset_;
};

/** Default policy for writing output bytes
  */
class KeccakSink
{
public:
    KeccakSink(Out<Bytes> data, long offset = 0):
        data_{*data},
        offset_{offset}
    {
        assert(0 <= offset);
        assert(data != None{} && offset < data->count());
    }

    void writeByte(uint8_t ch)
    {
        if (offset_ < data_.count()) {
            data_[offset_] = ch;
            ++offset_;
        }
    }

    bool eoi() const
    {
        return offset_ >= data_.count();
    }

private:
    Bytes &data_;
    long offset_;
};

/** \class Keccak cc/Keccak
  * \ingroup crypto
  * \brief %Keccak sponge function
  * \tparam Capacity %Capacity of the sponge function
  * \tparam Padding Additional padding sequence to apply
  * \tparam Source %Policy of reading input bytes and automatically applying padding bytes
  *
  * The %Keccak template class implements the Keccak[c] sponge function according to NIST.FIPS.202, chapter 5.2.
  */
template<int Capacity = 1024, class Padding = KeccakPadding, class Source = KeccakSource<Capacity, Padding>, class Sink = KeccakSink >
class Keccak
{
    static_assert(Capacity % 8 == 0);

public:
    static constexpr int FeedRate = (1600 - Capacity) / 8; ///< Rate of the sponge function (in bytes)

    /** Create new instance
      */
    Keccak();

    /** Create new instance
      * \param key Initial state bytes
      */
    Keccak(const Bytes &key);

    /** Absorb a chunk of input data (FeedRate bytes at a time)
      * \param source %Source to read a single chunk of data from
      * \return true if more data can be absorbed
      */
    bool absorb(Source source);

    /** Generate output bytes out of the sponge (FeedRate bytes at a time)
      * \param sink %Sink to write output bytes to
      */
    void squeeze(Sink sink);

private:
    #if 0
    static uint64_t generateRoundWord(int ir);
    static uint64_t rc(uint8_t t);
    #endif

    uint64_t state(int l) const
    {
        assert(0 <= l && l < 25);
        return state_[l];
    }

    uint64_t &state(int l)
    {
        assert(0 <= l && l < 25);
        return state_[l];
    }

    static void permutate(uint64_t *state);

    uint64_t state_[25];
};

void keccak_permutate(uint64_t *state);

template<int Capacity, class Padding, class Source, class Sink>
Keccak<Capacity, Padding, Source, Sink>::Keccak()
{
    ::memset(state_, 0, sizeof(state_));
}

template<int Capacity, class Padding, class Source, class Sink>
Keccak<Capacity, Padding, Source, Sink>::Keccak(const Bytes &key)
{
    for (int i = 0; i < FeedRate;) {
        uint64_t lane = 0;
        do {
            lane |= static_cast<uint64_t>(key(i, 0)) << ((i & 7) << 3);
            ++i;
        } while ((i & 7) != 0 && i < FeedRate);
        state((i - 1) >> 3) ^= lane;
    }
}

template<int Capacity, class Padding, class Source, class Sink>
bool Keccak<Capacity, Padding, Source, Sink>::absorb(Source source)
{
    for (int i = 0; i < FeedRate;) {
        uint64_t lane = 0;
        do {
            lane |= static_cast<uint64_t>(source.readByte()) << ((i & 7) << 3);
            ++i;
        } while ((i & 7) != 0 && i < FeedRate);
        state((i - 1) >> 3) ^= lane;
    }

    keccak_permutate(state_);

    return !source.eoi();
}

template<int Capacity, class Padding, class Source, class Sink>
void Keccak<Capacity, Padding, Source, Sink>::squeeze(Sink sink)
{
    while (!sink.eoi()) {
        int i = 0;
        for (int l = 0; l < 25 && i < FeedRate && !sink.eoi(); ++l) {
            uint64_t lane = state(l);
            for (int z = 0; z < 8 && i < FeedRate && !sink.eoi(); ++z) {
                sink.writeByte(lane);
                lane >>= 8;
            }
        }
        if (i == FeedRate) keccak_permutate(state_);
    }
}



} // namespace cc
